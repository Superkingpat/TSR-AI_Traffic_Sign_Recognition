
VS-FreeRTOS1_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c744  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800c8e4  0800c8e4  0000d8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c8  0800c9c8  0000e160  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c8  0800c9c8  0000d9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9d0  0800c9d0  0000e160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9d0  0800c9d0  0000d9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c9d4  0800c9d4  0000d9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800c9d8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014d28  20000160  0800cb38  0000e160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014e88  0800cb38  0000ee88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0c9  00000000  00000000  0000e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bee  00000000  00000000  0002d259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b1  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007d58  00000000  00000000  00035001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b5c  00000000  00000000  0003cd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0026  00000000  00000000  0005f8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cac  00000000  00000000  000ff920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001075cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8cc 	.word	0x0800c8cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	0800c8cc 	.word	0x0800c8cc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <lcd_send_cmd>:
#include "lcd.h"
//FROM https://controllerstech.com/i2c-lcd-in-stm32/
// Send command to the LCD
void lcd_send_cmd(I2C_HandleTypeDef hi2c1, char cmd) {
 80004d0:	b084      	sub	sp, #16
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af02      	add	r7, sp, #8
 80004d8:	f107 0c10 	add.w	ip, r7, #16
 80004dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    char data_u = cmd & 0xF0;
 80004e0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80004e4:	f023 030f 	bic.w	r3, r3, #15
 80004e8:	71fb      	strb	r3, [r7, #7]
    char data_l = (cmd << 4) & 0xF0;
 80004ea:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	71bb      	strb	r3, [r7, #6]
    uint8_t data_t[4];

    data_t[0] = data_u | 0x0C;  // en=1, rs=0
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	f043 030c 	orr.w	r3, r3, #12
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	703b      	strb	r3, [r7, #0]
    data_t[1] = data_u | 0x08;  // en=0, rs=0
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	b2db      	uxtb	r3, r3
 8000504:	707b      	strb	r3, [r7, #1]
    data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	f043 030c 	orr.w	r3, r3, #12
 800050c:	b2db      	uxtb	r3, r3
 800050e:	70bb      	strb	r3, [r7, #2]
    data_t[3] = data_l | 0x08;  // en=0, rs=0
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	f043 0308 	orr.w	r3, r3, #8
 8000516:	b2db      	uxtb	r3, r3
 8000518:	70fb      	strb	r3, [r7, #3]

    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 800051a:	463a      	mov	r2, r7
 800051c:	2364      	movs	r3, #100	@ 0x64
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2304      	movs	r3, #4
 8000522:	214e      	movs	r1, #78	@ 0x4e
 8000524:	f107 0010 	add.w	r0, r7, #16
 8000528:	f001 fc58 	bl	8001ddc <HAL_I2C_Master_Transmit>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000536:	b004      	add	sp, #16
 8000538:	4770      	bx	lr

0800053a <lcd_send_data>:

// Send data to the LCD
void lcd_send_data(I2C_HandleTypeDef hi2c1, char data) {
 800053a:	b084      	sub	sp, #16
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af02      	add	r7, sp, #8
 8000542:	f107 0c10 	add.w	ip, r7, #16
 8000546:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    char data_u = data & 0xF0;
 800054a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800054e:	f023 030f 	bic.w	r3, r3, #15
 8000552:	71fb      	strb	r3, [r7, #7]
    char data_l = (data << 4) & 0xF0;
 8000554:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	71bb      	strb	r3, [r7, #6]
    uint8_t data_t[4];

    data_t[0] = data_u | 0x0D;  // en=1, rs=1
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f043 030d 	orr.w	r3, r3, #13
 8000562:	b2db      	uxtb	r3, r3
 8000564:	703b      	strb	r3, [r7, #0]
    data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	f043 0309 	orr.w	r3, r3, #9
 800056c:	b2db      	uxtb	r3, r3
 800056e:	707b      	strb	r3, [r7, #1]
    data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	f043 030d 	orr.w	r3, r3, #13
 8000576:	b2db      	uxtb	r3, r3
 8000578:	70bb      	strb	r3, [r7, #2]
    data_t[3] = data_l | 0x09;  // en=0, rs=1
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	f043 0309 	orr.w	r3, r3, #9
 8000580:	b2db      	uxtb	r3, r3
 8000582:	70fb      	strb	r3, [r7, #3]

    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 8000584:	463a      	mov	r2, r7
 8000586:	2364      	movs	r3, #100	@ 0x64
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2304      	movs	r3, #4
 800058c:	214e      	movs	r1, #78	@ 0x4e
 800058e:	f107 0010 	add.w	r0, r7, #16
 8000592:	f001 fc23 	bl	8001ddc <HAL_I2C_Master_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005a0:	b004      	add	sp, #16
 80005a2:	4770      	bx	lr

080005a4 <lcd_init>:

// Initialize the LCD
void lcd_init(I2C_HandleTypeDef hi2c1) {
 80005a4:	b084      	sub	sp, #16
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b092      	sub	sp, #72	@ 0x48
 80005aa:	af12      	add	r7, sp, #72	@ 0x48
 80005ac:	f107 0c08 	add.w	ip, r7, #8
 80005b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_Delay(50);  // Wait for >40ms
 80005b4:	2032      	movs	r0, #50	@ 0x32
 80005b6:	f001 f80f 	bl	80015d8 <HAL_Delay>
    lcd_send_cmd(hi2c1, 0x30);
 80005ba:	2330      	movs	r3, #48	@ 0x30
 80005bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80005be:	4668      	mov	r0, sp
 80005c0:	f107 0318 	add.w	r3, r7, #24
 80005c4:	2244      	movs	r2, #68	@ 0x44
 80005c6:	4619      	mov	r1, r3
 80005c8:	f00b ff39 	bl	800c43e <memcpy>
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d2:	f7ff ff7d 	bl	80004d0 <lcd_send_cmd>
    HAL_Delay(5);   // Wait for >4.1ms
 80005d6:	2005      	movs	r0, #5
 80005d8:	f000 fffe 	bl	80015d8 <HAL_Delay>
    lcd_send_cmd(hi2c1, 0x30);
 80005dc:	2330      	movs	r3, #48	@ 0x30
 80005de:	9311      	str	r3, [sp, #68]	@ 0x44
 80005e0:	4668      	mov	r0, sp
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2244      	movs	r2, #68	@ 0x44
 80005e8:	4619      	mov	r1, r3
 80005ea:	f00b ff28 	bl	800c43e <memcpy>
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f4:	f7ff ff6c 	bl	80004d0 <lcd_send_cmd>
    HAL_Delay(1);   // Wait for >100us
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 ffed 	bl	80015d8 <HAL_Delay>
    lcd_send_cmd(hi2c1, 0x30);
 80005fe:	2330      	movs	r3, #48	@ 0x30
 8000600:	9311      	str	r3, [sp, #68]	@ 0x44
 8000602:	4668      	mov	r0, sp
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	2244      	movs	r2, #68	@ 0x44
 800060a:	4619      	mov	r1, r3
 800060c:	f00b ff17 	bl	800c43e <memcpy>
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000616:	f7ff ff5b 	bl	80004d0 <lcd_send_cmd>
    HAL_Delay(10);
 800061a:	200a      	movs	r0, #10
 800061c:	f000 ffdc 	bl	80015d8 <HAL_Delay>
    lcd_send_cmd(hi2c1, 0x20);  // 4-bit mode
 8000620:	2320      	movs	r3, #32
 8000622:	9311      	str	r3, [sp, #68]	@ 0x44
 8000624:	4668      	mov	r0, sp
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2244      	movs	r2, #68	@ 0x44
 800062c:	4619      	mov	r1, r3
 800062e:	f00b ff06 	bl	800c43e <memcpy>
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000638:	f7ff ff4a 	bl	80004d0 <lcd_send_cmd>

    // Display initialization
    lcd_send_cmd(hi2c1, 0x28); // Function set: 4-bit mode, 2 lines, 5x8 font
 800063c:	2328      	movs	r3, #40	@ 0x28
 800063e:	9311      	str	r3, [sp, #68]	@ 0x44
 8000640:	4668      	mov	r0, sp
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	2244      	movs	r2, #68	@ 0x44
 8000648:	4619      	mov	r1, r3
 800064a:	f00b fef8 	bl	800c43e <memcpy>
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000654:	f7ff ff3c 	bl	80004d0 <lcd_send_cmd>
    HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 ffbd 	bl	80015d8 <HAL_Delay>
    lcd_send_cmd(hi2c1, 0x08); // Display off
 800065e:	2308      	movs	r3, #8
 8000660:	9311      	str	r3, [sp, #68]	@ 0x44
 8000662:	4668      	mov	r0, sp
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	2244      	movs	r2, #68	@ 0x44
 800066a:	4619      	mov	r1, r3
 800066c:	f00b fee7 	bl	800c43e <memcpy>
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000676:	f7ff ff2b 	bl	80004d0 <lcd_send_cmd>
    HAL_Delay(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 ffac 	bl	80015d8 <HAL_Delay>
    lcd_send_cmd(hi2c1, 0x01); // Clear display
 8000680:	2301      	movs	r3, #1
 8000682:	9311      	str	r3, [sp, #68]	@ 0x44
 8000684:	4668      	mov	r0, sp
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2244      	movs	r2, #68	@ 0x44
 800068c:	4619      	mov	r1, r3
 800068e:	f00b fed6 	bl	800c43e <memcpy>
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000698:	f7ff ff1a 	bl	80004d0 <lcd_send_cmd>
    HAL_Delay(2);
 800069c:	2002      	movs	r0, #2
 800069e:	f000 ff9b 	bl	80015d8 <HAL_Delay>
    lcd_send_cmd(hi2c1, 0x06); // Entry mode set: increment cursor
 80006a2:	2306      	movs	r3, #6
 80006a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80006a6:	4668      	mov	r0, sp
 80006a8:	f107 0318 	add.w	r3, r7, #24
 80006ac:	2244      	movs	r2, #68	@ 0x44
 80006ae:	4619      	mov	r1, r3
 80006b0:	f00b fec5 	bl	800c43e <memcpy>
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ba:	f7ff ff09 	bl	80004d0 <lcd_send_cmd>
    HAL_Delay(1);
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 ff8a 	bl	80015d8 <HAL_Delay>
    lcd_send_cmd(hi2c1, 0x0C); // Display on, cursor off, blink off
 80006c4:	230c      	movs	r3, #12
 80006c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80006c8:	4668      	mov	r0, sp
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	2244      	movs	r2, #68	@ 0x44
 80006d0:	4619      	mov	r1, r3
 80006d2:	f00b feb4 	bl	800c43e <memcpy>
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006dc:	f7ff fef8 	bl	80004d0 <lcd_send_cmd>
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006e8:	b004      	add	sp, #16
 80006ea:	4770      	bx	lr

080006ec <lcd_send_string>:

// Send a string to the LCD
void lcd_send_string(I2C_HandleTypeDef hi2c1, char *str) {
 80006ec:	b084      	sub	sp, #16
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b092      	sub	sp, #72	@ 0x48
 80006f2:	af12      	add	r7, sp, #72	@ 0x48
 80006f4:	f107 0c08 	add.w	ip, r7, #8
 80006f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (*str) {
 80006fc:	e010      	b.n	8000720 <lcd_send_string+0x34>
        lcd_send_data(hi2c1, *str++);
 80006fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	9311      	str	r3, [sp, #68]	@ 0x44
 8000708:	4668      	mov	r0, sp
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	2244      	movs	r2, #68	@ 0x44
 8000710:	4619      	mov	r1, r3
 8000712:	f00b fe94 	bl	800c43e <memcpy>
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800071c:	f7ff ff0d 	bl	800053a <lcd_send_data>
    while (*str) {
 8000720:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1ea      	bne.n	80006fe <lcd_send_string+0x12>
    }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000732:	b004      	add	sp, #16
 8000734:	4770      	bx	lr

08000736 <lcd_put_cur>:

// Set cursor position on the LCD
void lcd_put_cur(I2C_HandleTypeDef hi2c1, int row, int col) {
 8000736:	b084      	sub	sp, #16
 8000738:	b580      	push	{r7, lr}
 800073a:	b092      	sub	sp, #72	@ 0x48
 800073c:	af12      	add	r7, sp, #72	@ 0x48
 800073e:	f107 0c08 	add.w	ip, r7, #8
 8000742:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    switch (row) {
 8000746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000748:	2b00      	cmp	r3, #0
 800074a:	d003      	beq.n	8000754 <lcd_put_cur+0x1e>
 800074c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800074e:	2b01      	cmp	r3, #1
 8000750:	d005      	beq.n	800075e <lcd_put_cur+0x28>
 8000752:	e009      	b.n	8000768 <lcd_put_cur+0x32>
        case 0: col |= 0x80; break;
 8000754:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075a:	663b      	str	r3, [r7, #96]	@ 0x60
 800075c:	e004      	b.n	8000768 <lcd_put_cur+0x32>
        case 1: col |= 0xC0; break;
 800075e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000760:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000764:	663b      	str	r3, [r7, #96]	@ 0x60
 8000766:	bf00      	nop
    }
    lcd_send_cmd(hi2c1, col);
 8000768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800076a:	b2db      	uxtb	r3, r3
 800076c:	9311      	str	r3, [sp, #68]	@ 0x44
 800076e:	4668      	mov	r0, sp
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	2244      	movs	r2, #68	@ 0x44
 8000776:	4619      	mov	r1, r3
 8000778:	f00b fe61 	bl	800c43e <memcpy>
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000782:	f7ff fea5 	bl	80004d0 <lcd_send_cmd>
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800078e:	b004      	add	sp, #16
 8000790:	4770      	bx	lr
	...

08000794 <Task_ReceiveData>:
SemaphoreHandle_t sendMutex;

RecivePacket reciveData;
SemaphoreHandle_t reciveMutex;

void Task_ReceiveData(void *pvParameters){
 8000794:	b5b0      	push	{r4, r5, r7, lr}
 8000796:	b08a      	sub	sp, #40	@ 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	uint8_t data[PACKET_SIZE];
    while (1){
    	if (xQueueReceiveFromISR(usbRxQueue, data, portMAX_DELAY) == pdPASS) {
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <Task_ReceiveData+0x60>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f107 0108 	add.w	r1, r7, #8
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 fd3b 	bl	8007224 <xQueueReceiveFromISR>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d118      	bne.n	80007e6 <Task_ReceiveData+0x52>
			memcpy(&reciveData.lcd, &data, PACKET_SIZE);
 80007b4:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <Task_ReceiveData+0x64>)
 80007b6:	461d      	mov	r5, r3
 80007b8:	f107 0408 	add.w	r4, r7, #8
 80007bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			vTaskNotifyGiveFromISR(TaskSetLcdHandle, pdTRUE);
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <Task_ReceiveData+0x68>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2201      	movs	r2, #1
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 ff93 	bl	80086fc <vTaskGenericNotifyGiveFromISR>
			portYIELD_FROM_ISR(pdTRUE);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <Task_ReceiveData+0x6c>)
 80007d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	f3bf 8f4f 	dsb	sy
 80007e2:	f3bf 8f6f 	isb	sy
		}
        HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <Task_ReceiveData+0x70>)
 80007ec:	f001 f997 	bl	8001b1e <HAL_GPIO_TogglePin>
    	if (xQueueReceiveFromISR(usbRxQueue, data, portMAX_DELAY) == pdPASS) {
 80007f0:	e7d4      	b.n	800079c <Task_ReceiveData+0x8>
 80007f2:	bf00      	nop
 80007f4:	200002ac 	.word	0x200002ac
 80007f8:	2000031c 	.word	0x2000031c
 80007fc:	200002a8 	.word	0x200002a8
 8000800:	e000ed04 	.word	0xe000ed04
 8000804:	40020c00 	.word	0x40020c00

08000808 <Task_SetLCD>:
    }
}

void Task_SetLCD(void *pvParameters){
 8000808:	b5b0      	push	{r4, r5, r7, lr}
 800080a:	b09e      	sub	sp, #120	@ 0x78
 800080c:	af14      	add	r7, sp, #80	@ 0x50
 800080e:	6078      	str	r0, [r7, #4]
	lcd_init(hi2c1);
 8000810:	4c5b      	ldr	r4, [pc, #364]	@ (8000980 <Task_SetLCD+0x178>)
 8000812:	4668      	mov	r0, sp
 8000814:	f104 0310 	add.w	r3, r4, #16
 8000818:	2244      	movs	r2, #68	@ 0x44
 800081a:	4619      	mov	r1, r3
 800081c:	f00b fe0f 	bl	800c43e <memcpy>
 8000820:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000824:	f7ff febe 	bl	80005a4 <lcd_init>
	char lcd[32] = "     T.S.R.      External Device";
 8000828:	4b56      	ldr	r3, [pc, #344]	@ (8000984 <Task_SetLCD+0x17c>)
 800082a:	f107 0408 	add.w	r4, r7, #8
 800082e:	461d      	mov	r5, r3
 8000830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000834:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_put_cur(hi2c1, 0, 0);
 800083c:	4c50      	ldr	r4, [pc, #320]	@ (8000980 <Task_SetLCD+0x178>)
 800083e:	2300      	movs	r3, #0
 8000840:	9312      	str	r3, [sp, #72]	@ 0x48
 8000842:	2300      	movs	r3, #0
 8000844:	9311      	str	r3, [sp, #68]	@ 0x44
 8000846:	4668      	mov	r0, sp
 8000848:	f104 0310 	add.w	r3, r4, #16
 800084c:	2244      	movs	r2, #68	@ 0x44
 800084e:	4619      	mov	r1, r3
 8000850:	f00b fdf5 	bl	800c43e <memcpy>
 8000854:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000858:	f7ff ff6d 	bl	8000736 <lcd_put_cur>
	lcd_send_string(hi2c1, &lcd);
 800085c:	4c48      	ldr	r4, [pc, #288]	@ (8000980 <Task_SetLCD+0x178>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	9311      	str	r3, [sp, #68]	@ 0x44
 8000864:	4668      	mov	r0, sp
 8000866:	f104 0310 	add.w	r3, r4, #16
 800086a:	2244      	movs	r2, #68	@ 0x44
 800086c:	4619      	mov	r1, r3
 800086e:	f00b fde6 	bl	800c43e <memcpy>
 8000872:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000876:	f7ff ff39 	bl	80006ec <lcd_send_string>
	lcd_put_cur(hi2c1, 1, 0);
 800087a:	4c41      	ldr	r4, [pc, #260]	@ (8000980 <Task_SetLCD+0x178>)
 800087c:	2300      	movs	r3, #0
 800087e:	9312      	str	r3, [sp, #72]	@ 0x48
 8000880:	2301      	movs	r3, #1
 8000882:	9311      	str	r3, [sp, #68]	@ 0x44
 8000884:	4668      	mov	r0, sp
 8000886:	f104 0310 	add.w	r3, r4, #16
 800088a:	2244      	movs	r2, #68	@ 0x44
 800088c:	4619      	mov	r1, r3
 800088e:	f00b fdd6 	bl	800c43e <memcpy>
 8000892:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000896:	f7ff ff4e 	bl	8000736 <lcd_put_cur>
	lcd_send_string(hi2c1, &lcd[16]);
 800089a:	4c39      	ldr	r4, [pc, #228]	@ (8000980 <Task_SetLCD+0x178>)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	3310      	adds	r3, #16
 80008a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80008a4:	4668      	mov	r0, sp
 80008a6:	f104 0310 	add.w	r3, r4, #16
 80008aa:	2244      	movs	r2, #68	@ 0x44
 80008ac:	4619      	mov	r1, r3
 80008ae:	f00b fdc6 	bl	800c43e <memcpy>
 80008b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008b6:	f7ff ff19 	bl	80006ec <lcd_send_string>
	while (1){
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80008ba:	f04f 32ff 	mov.w	r2, #4294967295
 80008be:	2101      	movs	r1, #1
 80008c0:	2000      	movs	r0, #0
 80008c2:	f007 fec1 	bl	8008648 <ulTaskGenericNotifyTake>
		if (memcmp(&reciveData.lcd, &lcd, 32) != 0) {
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2220      	movs	r2, #32
 80008cc:	4619      	mov	r1, r3
 80008ce:	482e      	ldr	r0, [pc, #184]	@ (8000988 <Task_SetLCD+0x180>)
 80008d0:	f00b fd2a 	bl	800c328 <memcmp>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d048      	beq.n	800096c <Task_SetLCD+0x164>
			memcpy(&lcd,&reciveData.lcd, 32);
 80008da:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <Task_SetLCD+0x180>)
 80008dc:	f107 0408 	add.w	r4, r7, #8
 80008e0:	461d      	mov	r5, r3
 80008e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			lcd_put_cur(hi2c1, 0, 0);
 80008ee:	4c24      	ldr	r4, [pc, #144]	@ (8000980 <Task_SetLCD+0x178>)
 80008f0:	2300      	movs	r3, #0
 80008f2:	9312      	str	r3, [sp, #72]	@ 0x48
 80008f4:	2300      	movs	r3, #0
 80008f6:	9311      	str	r3, [sp, #68]	@ 0x44
 80008f8:	4668      	mov	r0, sp
 80008fa:	f104 0310 	add.w	r3, r4, #16
 80008fe:	2244      	movs	r2, #68	@ 0x44
 8000900:	4619      	mov	r1, r3
 8000902:	f00b fd9c 	bl	800c43e <memcpy>
 8000906:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800090a:	f7ff ff14 	bl	8000736 <lcd_put_cur>
			lcd_send_string(hi2c1, &lcd);
 800090e:	4c1c      	ldr	r4, [pc, #112]	@ (8000980 <Task_SetLCD+0x178>)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	9311      	str	r3, [sp, #68]	@ 0x44
 8000916:	4668      	mov	r0, sp
 8000918:	f104 0310 	add.w	r3, r4, #16
 800091c:	2244      	movs	r2, #68	@ 0x44
 800091e:	4619      	mov	r1, r3
 8000920:	f00b fd8d 	bl	800c43e <memcpy>
 8000924:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000928:	f7ff fee0 	bl	80006ec <lcd_send_string>
			lcd_put_cur(hi2c1, 1, 0);
 800092c:	4c14      	ldr	r4, [pc, #80]	@ (8000980 <Task_SetLCD+0x178>)
 800092e:	2300      	movs	r3, #0
 8000930:	9312      	str	r3, [sp, #72]	@ 0x48
 8000932:	2301      	movs	r3, #1
 8000934:	9311      	str	r3, [sp, #68]	@ 0x44
 8000936:	4668      	mov	r0, sp
 8000938:	f104 0310 	add.w	r3, r4, #16
 800093c:	2244      	movs	r2, #68	@ 0x44
 800093e:	4619      	mov	r1, r3
 8000940:	f00b fd7d 	bl	800c43e <memcpy>
 8000944:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000948:	f7ff fef5 	bl	8000736 <lcd_put_cur>
			lcd_send_string(hi2c1, &lcd[16]);
 800094c:	4c0c      	ldr	r4, [pc, #48]	@ (8000980 <Task_SetLCD+0x178>)
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	3310      	adds	r3, #16
 8000954:	9311      	str	r3, [sp, #68]	@ 0x44
 8000956:	4668      	mov	r0, sp
 8000958:	f104 0310 	add.w	r3, r4, #16
 800095c:	2244      	movs	r2, #68	@ 0x44
 800095e:	4619      	mov	r1, r3
 8000960:	f00b fd6d 	bl	800c43e <memcpy>
 8000964:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000968:	f7ff fec0 	bl	80006ec <lcd_send_string>
		}

    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800096c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000970:	4806      	ldr	r0, [pc, #24]	@ (800098c <Task_SetLCD+0x184>)
 8000972:	f001 f8d4 	bl	8001b1e <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(500));
 8000976:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800097a:	f006 ff9f 	bl	80078bc <vTaskDelay>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800097e:	e79c      	b.n	80008ba <Task_SetLCD+0xb2>
 8000980:	2000017c 	.word	0x2000017c
 8000984:	0800c8e4 	.word	0x0800c8e4
 8000988:	2000031c 	.word	0x2000031c
 800098c:	40020c00 	.word	0x40020c00

08000990 <Task_SendData>:
    }
}

void Task_SendData(void *pvParameters){
 8000990:	b580      	push	{r7, lr}
 8000992:	b09c      	sub	sp, #112	@ 0x70
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	SendPacket data;
	while (1){
		if (xSemaphoreTake(sendMutex, portMAX_DELAY) == pdTRUE) {
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <Task_SendData+0x7c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	4618      	mov	r0, r3
 80009a2:	f006 fb77 	bl	8007094 <xQueueSemaphoreTake>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d118      	bne.n	80009de <Task_SendData+0x4e>
			if (sendData.new_data) {
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <Task_SendData+0x80>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <Task_SendData+0x3c>
				memcpy(&data, &sendData, sizeof(SendPacket));
 80009b4:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <Task_SendData+0x80>)
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	4611      	mov	r1, r2
 80009bc:	2266      	movs	r2, #102	@ 0x66
 80009be:	4618      	mov	r0, r3
 80009c0:	f00b fd3d 	bl	800c43e <memcpy>
				sendData.new_data = false;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <Task_SendData+0x80>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e001      	b.n	80009d0 <Task_SendData+0x40>
			} else data.new_data = false;
 80009cc:	2300      	movs	r3, #0
 80009ce:	723b      	strb	r3, [r7, #8]
			xSemaphoreGive(sendMutex);
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <Task_SendData+0x7c>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	2300      	movs	r3, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	f006 f9a7 	bl	8006d2c <xQueueGenericSend>
		}
		while(data.new_data && CDC_Transmit_FS((uint8_t*)&data.data, sizeof(data.data)));
 80009de:	bf00      	nop
 80009e0:	7a3b      	ldrb	r3, [r7, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d009      	beq.n	80009fa <Task_SendData+0x6a>
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	3302      	adds	r3, #2
 80009ec:	2164      	movs	r1, #100	@ 0x64
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00a fe42 	bl	800b678 <CDC_Transmit_FS>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1f2      	bne.n	80009e0 <Task_SendData+0x50>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80009fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <Task_SendData+0x84>)
 8000a00:	f001 f88d 	bl	8001b1e <HAL_GPIO_TogglePin>
    	vTaskDelay(pdMS_TO_TICKS(1));
 8000a04:	2001      	movs	r0, #1
 8000a06:	f006 ff59 	bl	80078bc <vTaskDelay>
		if (xSemaphoreTake(sendMutex, portMAX_DELAY) == pdTRUE) {
 8000a0a:	e7c5      	b.n	8000998 <Task_SendData+0x8>
 8000a0c:	20000318 	.word	0x20000318
 8000a10:	200002b0 	.word	0x200002b0
 8000a14:	40020c00 	.word	0x40020c00

08000a18 <Task_ReadGPS>:
    }
}

void Task_ReadGPS(void *pvParameters){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0a0      	sub	sp, #128	@ 0x80
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	while (1) {
		uint8_t data[100] = {0};
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2260      	movs	r2, #96	@ 0x60
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f00b fc8b 	bl	800c348 <memset>
		HAL_StatusTypeDef status;
		uint8_t c;
		uint32_t index = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
		int GPS_TIMEOUT = 1000;
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	677b      	str	r3, [r7, #116]	@ 0x74

		do {
			status = HAL_UART_Receive(&huart1, &c, 1, GPS_TIMEOUT);
 8000a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a3e:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 8000a42:	2201      	movs	r2, #1
 8000a44:	4842      	ldr	r0, [pc, #264]	@ (8000b50 <Task_ReadGPS+0x138>)
 8000a46:	f004 f8c9 	bl	8004bdc <HAL_UART_Receive>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
		} while (c != '$');
 8000a50:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8000a54:	2b24      	cmp	r3, #36	@ 0x24
 8000a56:	d1f1      	bne.n	8000a3c <Task_ReadGPS+0x24>

		data[index++] = c;
 8000a58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000a5e:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 8000a62:	3380      	adds	r3, #128	@ 0x80
 8000a64:	443b      	add	r3, r7
 8000a66:	f803 2c74 	strb.w	r2, [r3, #-116]

		while (index < 100) {
 8000a6a:	e03b      	b.n	8000ae4 <Task_ReadGPS+0xcc>
			status = HAL_UART_Receive(&huart1, &c, 1, GPS_TIMEOUT);
 8000a6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a6e:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 8000a72:	2201      	movs	r2, #1
 8000a74:	4836      	ldr	r0, [pc, #216]	@ (8000b50 <Task_ReadGPS+0x138>)
 8000a76:	f004 f8b1 	bl	8004bdc <HAL_UART_Receive>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			if(status == HAL_OK) data[index++] = c;
 8000a80:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d108      	bne.n	8000a9a <Task_ReadGPS+0x82>
 8000a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000a8e:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 8000a92:	3380      	adds	r3, #128	@ 0x80
 8000a94:	443b      	add	r3, r7
 8000a96:	f803 2c74 	strb.w	r2, [r3, #-116]
			if (c == '*') {
 8000a9a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8000a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000aa0:	d120      	bne.n	8000ae4 <Task_ReadGPS+0xcc>
				int i = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
				while(i < 2) {
 8000aa6:	e019      	b.n	8000adc <Task_ReadGPS+0xc4>
					status = HAL_UART_Receive(&huart1, &c, 1, GPS_TIMEOUT);
 8000aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000aaa:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4827      	ldr	r0, [pc, #156]	@ (8000b50 <Task_ReadGPS+0x138>)
 8000ab2:	f004 f893 	bl	8004bdc <HAL_UART_Receive>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
						if(status == HAL_OK) {
 8000abc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10b      	bne.n	8000adc <Task_ReadGPS+0xc4>
					data[index++] = c;
 8000ac4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000aca:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 8000ace:	3380      	adds	r3, #128	@ 0x80
 8000ad0:	443b      	add	r3, r7
 8000ad2:	f803 2c74 	strb.w	r2, [r3, #-116]
					i++;
 8000ad6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ad8:	3301      	adds	r3, #1
 8000ada:	67bb      	str	r3, [r7, #120]	@ 0x78
				while(i < 2) {
 8000adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	dde2      	ble.n	8000aa8 <Task_ReadGPS+0x90>
					}
				}
			break;
 8000ae2:	e002      	b.n	8000aea <Task_ReadGPS+0xd2>
		while (index < 100) {
 8000ae4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ae6:	2b63      	cmp	r3, #99	@ 0x63
 8000ae8:	d9c0      	bls.n	8000a6c <Task_ReadGPS+0x54>
			}
		}
		if (xSemaphoreTake(sendMutex, portMAX_DELAY) == pdTRUE) {
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <Task_ReadGPS+0x13c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f04f 31ff 	mov.w	r1, #4294967295
 8000af2:	4618      	mov	r0, r3
 8000af4:	f006 face 	bl	8007094 <xQueueSemaphoreTake>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d121      	bne.n	8000b42 <Task_ReadGPS+0x12a>
			if (memcmp(&sendData.data, &data, 100) != 0) {
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2264      	movs	r2, #100	@ 0x64
 8000b04:	4619      	mov	r1, r3
 8000b06:	4814      	ldr	r0, [pc, #80]	@ (8000b58 <Task_ReadGPS+0x140>)
 8000b08:	f00b fc0e 	bl	800c328 <memcmp>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d010      	beq.n	8000b34 <Task_ReadGPS+0x11c>
				memcpy(&sendData.data,&data, 100);
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <Task_ReadGPS+0x144>)
 8000b14:	3302      	adds	r3, #2
 8000b16:	f107 010c 	add.w	r1, r7, #12
 8000b1a:	2264      	movs	r2, #100	@ 0x64
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00b fc8e 	bl	800c43e <memcpy>
				sendData.size = index+1;
 8000b22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <Task_ReadGPS+0x144>)
 8000b2c:	705a      	strb	r2, [r3, #1]
				sendData.new_data = true;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <Task_ReadGPS+0x144>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
			}
			xSemaphoreGive(sendMutex);
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <Task_ReadGPS+0x13c>)
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f006 f8f5 	bl	8006d2c <xQueueGenericSend>
		}
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b46:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <Task_ReadGPS+0x148>)
 8000b48:	f000 ffe9 	bl	8001b1e <HAL_GPIO_TogglePin>
	while (1) {
 8000b4c:	e768      	b.n	8000a20 <Task_ReadGPS+0x8>
 8000b4e:	bf00      	nop
 8000b50:	20000260 	.word	0x20000260
 8000b54:	20000318 	.word	0x20000318
 8000b58:	200002b2 	.word	0x200002b2
 8000b5c:	200002b0 	.word	0x200002b0
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6a:	f000 fcf3 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6e:	f000 f891 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b72:	f000 f9ed 	bl	8000f50 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b76:	f000 f925 	bl	8000dc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b7a:	f000 f971 	bl	8000e60 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000b7e:	f00a fc93 	bl	800b4a8 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000b82:	f000 f8ef 	bl	8000d64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b86:	f000 f9b9 	bl	8000efc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	__HAL_I2C_ENABLE(&hi2c1);
 8000b8a:	4b33      	ldr	r3, [pc, #204]	@ (8000c58 <main+0xf4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4b31      	ldr	r3, [pc, #196]	@ (8000c58 <main+0xf4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f042 0201 	orr.w	r2, r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
	sendMutex = xSemaphoreCreateMutex();
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f006 f8ae 	bl	8006cfc <xQueueCreateMutex>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8000c5c <main+0xf8>)
 8000ba4:	6013      	str	r3, [r2, #0]
	if (sendMutex == NULL) {
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <main+0xf8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <main+0x54>
		printf("Failed to create mutex!\n");
 8000bae:	482c      	ldr	r0, [pc, #176]	@ (8000c60 <main+0xfc>)
 8000bb0:	f00b fada 	bl	800c168 <puts>
		return 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e04b      	b.n	8000c50 <main+0xec>
	}
	reciveMutex = xSemaphoreCreateMutex();
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f006 f89f 	bl	8006cfc <xQueueCreateMutex>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a28      	ldr	r2, [pc, #160]	@ (8000c64 <main+0x100>)
 8000bc2:	6013      	str	r3, [r2, #0]
	if (reciveMutex == NULL) {
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <main+0x100>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d104      	bne.n	8000bd6 <main+0x72>
		printf("Failed to create mutex!\n");
 8000bcc:	4824      	ldr	r0, [pc, #144]	@ (8000c60 <main+0xfc>)
 8000bce:	f00b facb 	bl	800c168 <puts>
		return 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e03c      	b.n	8000c50 <main+0xec>
	}
	usbRxQueue = xQueueCreate(10, sizeof(USB_RX_Buffer));
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2120      	movs	r1, #32
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f006 f812 	bl	8006c04 <xQueueGenericCreate>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a21      	ldr	r2, [pc, #132]	@ (8000c68 <main+0x104>)
 8000be4:	6013      	str	r3, [r2, #0]
	if (usbRxQueue == NULL) {
 8000be6:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <main+0x104>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d104      	bne.n	8000bf8 <main+0x94>
		printf("Failed to create queue!\n");
 8000bee:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <main+0x108>)
 8000bf0:	f00b faba 	bl	800c168 <puts>
		return 1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e02b      	b.n	8000c50 <main+0xec>
	}

	xTaskCreate(Task_ReceiveData, "ReceiveData", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2300      	movs	r3, #0
 8000c02:	2282      	movs	r2, #130	@ 0x82
 8000c04:	491a      	ldr	r1, [pc, #104]	@ (8000c70 <main+0x10c>)
 8000c06:	481b      	ldr	r0, [pc, #108]	@ (8000c74 <main+0x110>)
 8000c08:	f006 fd0c 	bl	8007624 <xTaskCreate>
	xTaskCreate(Task_SetLCD, "SetLCD", configMINIMAL_STACK_SIZE, NULL, 1, &TaskSetLcdHandle);
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <main+0x114>)
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	2301      	movs	r3, #1
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	2282      	movs	r2, #130	@ 0x82
 8000c18:	4918      	ldr	r1, [pc, #96]	@ (8000c7c <main+0x118>)
 8000c1a:	4819      	ldr	r0, [pc, #100]	@ (8000c80 <main+0x11c>)
 8000c1c:	f006 fd02 	bl	8007624 <xTaskCreate>
	xTaskCreate(Task_SendData, "SendData", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000c20:	2300      	movs	r3, #0
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	2301      	movs	r3, #1
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2282      	movs	r2, #130	@ 0x82
 8000c2c:	4915      	ldr	r1, [pc, #84]	@ (8000c84 <main+0x120>)
 8000c2e:	4816      	ldr	r0, [pc, #88]	@ (8000c88 <main+0x124>)
 8000c30:	f006 fcf8 	bl	8007624 <xTaskCreate>
	xTaskCreate(Task_ReadGPS, "ReadGPS", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000c34:	2300      	movs	r3, #0
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2282      	movs	r2, #130	@ 0x82
 8000c40:	4912      	ldr	r1, [pc, #72]	@ (8000c8c <main+0x128>)
 8000c42:	4813      	ldr	r0, [pc, #76]	@ (8000c90 <main+0x12c>)
 8000c44:	f006 fcee 	bl	8007624 <xTaskCreate>

	vTaskStartScheduler();
 8000c48:	f006 fe5c 	bl	8007904 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <main+0xe8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000017c 	.word	0x2000017c
 8000c5c:	20000318 	.word	0x20000318
 8000c60:	0800c904 	.word	0x0800c904
 8000c64:	2000033c 	.word	0x2000033c
 8000c68:	200002ac 	.word	0x200002ac
 8000c6c:	0800c91c 	.word	0x0800c91c
 8000c70:	0800c934 	.word	0x0800c934
 8000c74:	08000795 	.word	0x08000795
 8000c78:	200002a8 	.word	0x200002a8
 8000c7c:	0800c940 	.word	0x0800c940
 8000c80:	08000809 	.word	0x08000809
 8000c84:	0800c948 	.word	0x0800c948
 8000c88:	08000991 	.word	0x08000991
 8000c8c:	0800c954 	.word	0x0800c954
 8000c90:	08000a19 	.word	0x08000a19

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	@ 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	@ 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00b fb50 	bl	800c348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <SystemClock_Config+0xc8>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a26      	ldr	r2, [pc, #152]	@ (8000d5c <SystemClock_Config+0xc8>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <SystemClock_Config+0xc8>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <SystemClock_Config+0xcc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a20      	ldr	r2, [pc, #128]	@ (8000d60 <SystemClock_Config+0xcc>)
 8000cde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <SystemClock_Config+0xcc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d08:	23a8      	movs	r3, #168	@ 0xa8
 8000d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d10:	2307      	movs	r3, #7
 8000d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 fe0b 	bl	8003934 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d24:	f000 f994 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	2102      	movs	r1, #2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 f86d 	bl	8003e24 <HAL_RCC_ClockConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d50:	f000 f97e 	bl	8001050 <Error_Handler>
  }
}
 8000d54:	bf00      	nop
 8000d56:	3750      	adds	r7, #80	@ 0x50
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40007000 	.word	0x40007000

08000d64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d6a:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <MX_I2C1_Init+0x58>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d70:	4a13      	ldr	r2, [pc, #76]	@ (8000dc0 <MX_I2C1_Init+0x5c>)
 8000d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000d74:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d7a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d90:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000da4:	f000 fed6 	bl	8001b54 <HAL_I2C_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000dae:	f000 f94f 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000017c 	.word	0x2000017c
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	00061a80 	.word	0x00061a80

08000dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000de2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <MX_TIM3_Init+0x98>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000de8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000dec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000df4:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000df6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000dfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e08:	4813      	ldr	r0, [pc, #76]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000e0a:	f003 fa5d 	bl	80042c8 <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e14:	f000 f91c 	bl	8001050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000e26:	f003 fbf1 	bl	800460c <HAL_TIM_ConfigClockSource>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e30:	f000 f90e 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_TIM3_Init+0x94>)
 8000e42:	f003 fdf9 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e4c:	f000 f900 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001d0 	.word	0x200001d0
 8000e5c:	40000400 	.word	0x40000400

08000e60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef8 <MX_TIM4_Init+0x98>)
 8000e80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000e84:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000e88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 29999;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000e92:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000e96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ea4:	4813      	ldr	r0, [pc, #76]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000ea6:	f003 fa0f 	bl	80042c8 <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000eb0:	f000 f8ce 	bl	8001050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000ec2:	f003 fba3 	bl	800460c <HAL_TIM_ConfigClockSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ecc:	f000 f8c0 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_TIM4_Init+0x94>)
 8000ede:	f003 fdab 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f000 f8b2 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000218 	.word	0x20000218
 8000ef8:	40000800 	.word	0x40000800

08000efc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f00:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <MX_USART1_UART_Init+0x50>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_USART1_UART_Init+0x4c>)
 8000f34:	f003 fe02 	bl	8004b3c <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f3e:	f000 f887 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000260 	.word	0x20000260
 8000f4c:	40011000 	.word	0x40011000

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a26      	ldr	r2, [pc, #152]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b24      	ldr	r3, [pc, #144]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	4b20      	ldr	r3, [pc, #128]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a18      	ldr	r2, [pc, #96]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a11      	ldr	r2, [pc, #68]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_GPIO_Init+0xd4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <MX_GPIO_Init+0xd8>)
 8000ffa:	f000 fd77 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ffe:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_GPIO_Init+0xd8>)
 8001018:	f000 fbe4 	bl	80017e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40020c00 	.word	0x40020c00

0800102c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800103e:	f000 faab 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40000c00 	.word	0x40000c00

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <HAL_MspInit+0x4c>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001070:	6453      	str	r3, [r2, #68]	@ 0x44
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	@ 0x40
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <HAL_I2C_MspInit+0x84>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12b      	bne.n	8001126 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <HAL_I2C_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <HAL_I2C_MspInit+0x88>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <HAL_I2C_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ea:	23c0      	movs	r3, #192	@ 0xc0
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ee:	2312      	movs	r3, #18
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fa:	2304      	movs	r3, #4
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <HAL_I2C_MspInit+0x8c>)
 8001106:	f000 fb6d 	bl	80017e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_I2C_MspInit+0x88>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <HAL_I2C_MspInit+0x88>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001118:	6413      	str	r3, [r2, #64]	@ 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_I2C_MspInit+0x88>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40005400 	.word	0x40005400
 8001134:	40023800 	.word	0x40023800
 8001138:	40020400 	.word	0x40020400

0800113c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a15      	ldr	r2, [pc, #84]	@ (80011a0 <HAL_TIM_Base_MspInit+0x64>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10e      	bne.n	800116c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	4a13      	ldr	r2, [pc, #76]	@ (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6413      	str	r3, [r2, #64]	@ 0x40
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800116a:	e012      	b.n	8001192 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10d      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6413      	str	r3, [r2, #64]	@ 0x40
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <HAL_TIM_Base_MspInit+0x68>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40000400 	.word	0x40000400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40000800 	.word	0x40000800

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	@ (8001230 <HAL_UART_MspInit+0x84>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12c      	bne.n	8001228 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_UART_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001206:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001210:	2301      	movs	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001218:	2307      	movs	r3, #7
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <HAL_UART_MspInit+0x8c>)
 8001224:	f000 fade 	bl	80017e4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40011000 	.word	0x40011000
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <HAL_InitTick+0xe4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	4a32      	ldr	r2, [pc, #200]	@ (8001320 <HAL_InitTick+0xe4>)
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	6413      	str	r3, [r2, #64]	@ 0x40
 800125c:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <HAL_InitTick+0xe4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001268:	f107 0210 	add.w	r2, r7, #16
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fff6 	bl	8004264 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127e:	2b00      	cmp	r3, #0
 8001280:	d103      	bne.n	800128a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001282:	f002 ffc7 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8001286:	6378      	str	r0, [r7, #52]	@ 0x34
 8001288:	e004      	b.n	8001294 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800128a:	f002 ffc3 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 800128e:	4603      	mov	r3, r0
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001296:	4a23      	ldr	r2, [pc, #140]	@ (8001324 <HAL_InitTick+0xe8>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9b      	lsrs	r3, r3, #18
 800129e:	3b01      	subs	r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80012a2:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <HAL_InitTick+0xec>)
 80012a4:	4a21      	ldr	r2, [pc, #132]	@ (800132c <HAL_InitTick+0xf0>)
 80012a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <HAL_InitTick+0xec>)
 80012aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012ae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80012b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <HAL_InitTick+0xec>)
 80012b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <HAL_InitTick+0xec>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_InitTick+0xec>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <HAL_InitTick+0xec>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80012c8:	4817      	ldr	r0, [pc, #92]	@ (8001328 <HAL_InitTick+0xec>)
 80012ca:	f002 fffd 	bl	80042c8 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d11b      	bne.n	8001314 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80012dc:	4812      	ldr	r0, [pc, #72]	@ (8001328 <HAL_InitTick+0xec>)
 80012de:	f003 f843 	bl	8004368 <HAL_TIM_Base_Start_IT>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d111      	bne.n	8001314 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80012f0:	2032      	movs	r0, #50	@ 0x32
 80012f2:	f000 fa69 	bl	80017c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d808      	bhi.n	800130e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	2032      	movs	r0, #50	@ 0x32
 8001302:	f000 fa45 	bl	8001790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <HAL_InitTick+0xf4>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e002      	b.n	8001314 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001318:	4618      	mov	r0, r3
 800131a:	3738      	adds	r7, #56	@ 0x38
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	431bde83 	.word	0x431bde83
 8001328:	20000340 	.word	0x20000340
 800132c:	40000c00 	.word	0x40000c00
 8001330:	20000004 	.word	0x20000004

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <NMI_Handler+0x4>

0800133c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <MemManage_Handler+0x4>

0800134c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <UsageFault_Handler+0x4>

0800135c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <TIM5_IRQHandler+0x10>)
 8001372:	f003 f85b 	bl	800442c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000340 	.word	0x20000340

08001380 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <OTG_FS_IRQHandler+0x10>)
 8001386:	f001 f9c6 	bl	8002716 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20014638 	.word	0x20014638

08001394 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
  }

  return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e009      	b.n	80013f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf1      	blt.n	80013e0 <_write+0x12>
  }
  return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_close>:

int _close(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800142e:	605a      	str	r2, [r3, #4]
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_isatty>:

int _isatty(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f00a ffa0 	bl	800c3e4 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	20000388 	.word	0x20000388
 80014d8:	20014e88 	.word	0x20014e88

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001538 <LoopFillZerobss+0xe>
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <LoopFillZerobss+0x12>)
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <LoopFillZerobss+0x1a>)
 800150e:	2300      	movs	r3, #0
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:
 8001512:	58d4      	ldr	r4, [r2, r3]
 8001514:	50c4      	str	r4, [r0, r3]
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:
 8001518:	18c4      	adds	r4, r0, r3
 800151a:	428c      	cmp	r4, r1
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <LoopFillZerobss+0x1e>)
 8001520:	4c0a      	ldr	r4, [pc, #40]	@ (800154c <LoopFillZerobss+0x22>)
 8001522:	2300      	movs	r3, #0
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:
 800152a:	42a2      	cmp	r2, r4
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>
 800152e:	f00a ff5f 	bl	800c3f0 <__libc_init_array>
 8001532:	f7ff fb17 	bl	8000b64 <main>
 8001536:	4770      	bx	lr
 8001538:	20020000 	.word	0x20020000
 800153c:	20000000 	.word	0x20000000
 8001540:	20000160 	.word	0x20000160
 8001544:	0800c9d8 	.word	0x0800c9d8
 8001548:	20000160 	.word	0x20000160
 800154c:	20014e88 	.word	0x20014e88

08001550 <ADC_IRQHandler>:
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f8fc 	bl	800177a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	200f      	movs	r0, #15
 8001584:	f7ff fe5a 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fd68 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008
 80015bc:	2000038c 	.word	0x2000038c

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000038c 	.word	0x2000038c

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	@ (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	@ (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	@ (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	@ 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ff4c 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a2:	f7ff ff61 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	6978      	ldr	r0, [r7, #20]
 80017ae:	f7ff ffb1 	bl	8001714 <NVIC_EncodePriority>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff80 	bl	80016c0 <__NVIC_SetPriority>
}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff54 	bl	8001684 <__NVIC_EnableIRQ>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	@ 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	e159      	b.n	8001ab4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	429a      	cmp	r2, r3
 800181a:	f040 8148 	bne.w	8001aae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d005      	beq.n	8001836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001832:	2b02      	cmp	r3, #2
 8001834:	d130      	bne.n	8001898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 0201 	and.w	r2, r3, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d017      	beq.n	80018d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d123      	bne.n	8001928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	08da      	lsrs	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3208      	adds	r2, #8
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0203 	and.w	r2, r3, #3
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a2 	beq.w	8001aae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b57      	ldr	r3, [pc, #348]	@ (8001acc <HAL_GPIO_Init+0x2e8>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	4a56      	ldr	r2, [pc, #344]	@ (8001acc <HAL_GPIO_Init+0x2e8>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001978:	6453      	str	r3, [r2, #68]	@ 0x44
 800197a:	4b54      	ldr	r3, [pc, #336]	@ (8001acc <HAL_GPIO_Init+0x2e8>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001986:	4a52      	ldr	r2, [pc, #328]	@ (8001ad0 <HAL_GPIO_Init+0x2ec>)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	220f      	movs	r2, #15
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a49      	ldr	r2, [pc, #292]	@ (8001ad4 <HAL_GPIO_Init+0x2f0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d019      	beq.n	80019e6 <HAL_GPIO_Init+0x202>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a48      	ldr	r2, [pc, #288]	@ (8001ad8 <HAL_GPIO_Init+0x2f4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0x1fe>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a47      	ldr	r2, [pc, #284]	@ (8001adc <HAL_GPIO_Init+0x2f8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00d      	beq.n	80019de <HAL_GPIO_Init+0x1fa>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a46      	ldr	r2, [pc, #280]	@ (8001ae0 <HAL_GPIO_Init+0x2fc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <HAL_GPIO_Init+0x1f6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a45      	ldr	r2, [pc, #276]	@ (8001ae4 <HAL_GPIO_Init+0x300>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_GPIO_Init+0x1f2>
 80019d2:	2304      	movs	r3, #4
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x204>
 80019d6:	2307      	movs	r3, #7
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x204>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x204>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x204>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x204>
 80019e6:	2300      	movs	r3, #0
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f002 0203 	and.w	r2, r2, #3
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	@ (8001ad0 <HAL_GPIO_Init+0x2ec>)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a06:	4b38      	ldr	r3, [pc, #224]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a54:	4a24      	ldr	r2, [pc, #144]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	f67f aea2 	bls.w	8001800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3724      	adds	r7, #36	@ 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	619a      	str	r2, [r3, #24]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b30:	887a      	ldrh	r2, [r7, #2]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	041a      	lsls	r2, r3, #16
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	400b      	ands	r3, r1
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e12b      	b.n	8001dbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fa96 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2224      	movs	r2, #36	@ 0x24
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb8:	f002 fb2c 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a81      	ldr	r2, [pc, #516]	@ (8001dc8 <HAL_I2C_Init+0x274>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d807      	bhi.n	8001bd8 <HAL_I2C_Init+0x84>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a80      	ldr	r2, [pc, #512]	@ (8001dcc <HAL_I2C_Init+0x278>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	bf94      	ite	ls
 8001bd0:	2301      	movls	r3, #1
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e006      	b.n	8001be6 <HAL_I2C_Init+0x92>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a7d      	ldr	r2, [pc, #500]	@ (8001dd0 <HAL_I2C_Init+0x27c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0e7      	b.n	8001dbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a78      	ldr	r2, [pc, #480]	@ (8001dd4 <HAL_I2C_Init+0x280>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc8 <HAL_I2C_Init+0x274>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d802      	bhi.n	8001c28 <HAL_I2C_Init+0xd4>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	e009      	b.n	8001c3c <HAL_I2C_Init+0xe8>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	4a69      	ldr	r2, [pc, #420]	@ (8001dd8 <HAL_I2C_Init+0x284>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	495c      	ldr	r1, [pc, #368]	@ (8001dc8 <HAL_I2C_Init+0x274>)
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	d819      	bhi.n	8001c90 <HAL_I2C_Init+0x13c>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e59      	subs	r1, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6a:	1c59      	adds	r1, r3, #1
 8001c6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c70:	400b      	ands	r3, r1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_I2C_Init+0x138>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e59      	subs	r1, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8a:	e051      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	e04f      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d111      	bne.n	8001cbc <HAL_I2C_Init+0x168>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	440b      	add	r3, r1
 8001ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e012      	b.n	8001ce2 <HAL_I2C_Init+0x18e>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1e58      	subs	r0, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	0099      	lsls	r1, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Init+0x196>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e022      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10e      	bne.n	8001d10 <HAL_I2C_Init+0x1bc>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e58      	subs	r0, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	440b      	add	r3, r1
 8001d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d0e:	e00f      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e58      	subs	r0, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	0099      	lsls	r1, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	6809      	ldr	r1, [r1, #0]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6911      	ldr	r1, [r2, #16]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68d2      	ldr	r2, [r2, #12]
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	000186a0 	.word	0x000186a0
 8001dcc:	001e847f 	.word	0x001e847f
 8001dd0:	003d08ff 	.word	0x003d08ff
 8001dd4:	431bde83 	.word	0x431bde83
 8001dd8:	10624dd3 	.word	0x10624dd3

08001ddc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	460b      	mov	r3, r1
 8001dea:	817b      	strh	r3, [r7, #10]
 8001dec:	4613      	mov	r3, r2
 8001dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff fbe6 	bl	80015c0 <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	f040 80e0 	bne.w	8001fc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2319      	movs	r3, #25
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4970      	ldr	r1, [pc, #448]	@ (8001fd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f964 	bl	80020dc <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0d3      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_I2C_Master_Transmit+0x50>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0cc      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d007      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2221      	movs	r2, #33	@ 0x21
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	893a      	ldrh	r2, [r7, #8]
 8001e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4a50      	ldr	r2, [pc, #320]	@ (8001fd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e94:	8979      	ldrh	r1, [r7, #10]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f89c 	bl	8001fd8 <I2C_MasterRequestWrite>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e08d      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ec0:	e066      	b.n	8001f90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	6a39      	ldr	r1, [r7, #32]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fa22 	bl	8002310 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d107      	bne.n	8001eea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e06b      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d11b      	bne.n	8001f64 <HAL_I2C_Master_Transmit+0x188>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d017      	beq.n	8001f64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	6a39      	ldr	r1, [r7, #32]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fa19 	bl	80023a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d107      	bne.n	8001f8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e01a      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d194      	bne.n	8001ec2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	00100002 	.word	0x00100002
 8001fd4:	ffff0000 	.word	0xffff0000

08001fd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d006      	beq.n	8002002 <I2C_MasterRequestWrite+0x2a>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d003      	beq.n	8002002 <I2C_MasterRequestWrite+0x2a>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002000:	d108      	bne.n	8002014 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e00b      	b.n	800202c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	2b12      	cmp	r3, #18
 800201a:	d107      	bne.n	800202c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800202a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f84f 	bl	80020dc <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002052:	d103      	bne.n	800205c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e035      	b.n	80020cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002068:	d108      	bne.n	800207c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800206a:	897b      	ldrh	r3, [r7, #10]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	e01b      	b.n	80020b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800207c:	897b      	ldrh	r3, [r7, #10]
 800207e:	11db      	asrs	r3, r3, #7
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f003 0306 	and.w	r3, r3, #6
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f063 030f 	orn	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	490e      	ldr	r1, [pc, #56]	@ (80020d4 <I2C_MasterRequestWrite+0xfc>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f898 	bl	80021d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e010      	b.n	80020cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020aa:	897b      	ldrh	r3, [r7, #10]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4907      	ldr	r1, [pc, #28]	@ (80020d8 <I2C_MasterRequestWrite+0x100>)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f888 	bl	80021d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	00010008 	.word	0x00010008
 80020d8:	00010002 	.word	0x00010002

080020dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ec:	e048      	b.n	8002180 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d044      	beq.n	8002180 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f6:	f7ff fa63 	bl	80015c0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d139      	bne.n	8002180 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10d      	bne.n	8002132 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	e00c      	b.n	800214c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	43da      	mvns	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	429a      	cmp	r2, r3
 8002150:	d116      	bne.n	8002180 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e023      	b.n	80021c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10d      	bne.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	43da      	mvns	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	4013      	ands	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	e00c      	b.n	80021c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	43da      	mvns	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	4013      	ands	r3, r2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d093      	beq.n	80020ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021de:	e071      	b.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ee:	d123      	bne.n	8002238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e067      	b.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223e:	d041      	beq.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002240:	f7ff f9be 	bl	80015c0 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d302      	bcc.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d136      	bne.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10c      	bne.n	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4013      	ands	r3, r2
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	e00b      	b.n	8002292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	43da      	mvns	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4013      	ands	r3, r2
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f043 0220 	orr.w	r2, r3, #32
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e021      	b.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	0c1b      	lsrs	r3, r3, #16
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10c      	bne.n	80022e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e00b      	b.n	8002300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	43da      	mvns	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4013      	ands	r3, r2
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f af6d 	bne.w	80021e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231c:	e034      	b.n	8002388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f886 	bl	8002430 <I2C_IsAcknowledgeFailed>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e034      	b.n	8002398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d028      	beq.n	8002388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7ff f943 	bl	80015c0 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11d      	bne.n	8002388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002356:	2b80      	cmp	r3, #128	@ 0x80
 8002358:	d016      	beq.n	8002388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e007      	b.n	8002398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002392:	2b80      	cmp	r3, #128	@ 0x80
 8002394:	d1c3      	bne.n	800231e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ac:	e034      	b.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f83e 	bl	8002430 <I2C_IsAcknowledgeFailed>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e034      	b.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d028      	beq.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7ff f8fb 	bl	80015c0 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11d      	bne.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d016      	beq.n	8002418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e007      	b.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d1c3      	bne.n	80023ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002446:	d11b      	bne.n	8002480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	f043 0204 	orr.w	r2, r3, #4
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af02      	add	r7, sp, #8
 8002494:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e101      	b.n	80026a4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f009 fa24 	bl	800b908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2203      	movs	r2, #3
 80024c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ce:	d102      	bne.n	80024d6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 f85d 	bl	800559a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7c1a      	ldrb	r2, [r3, #16]
 80024e8:	f88d 2000 	strb.w	r2, [sp]
 80024ec:	3304      	adds	r3, #4
 80024ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f0:	f002 ff3c 	bl	800536c <USB_CoreInit>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0ce      	b.n	80026a4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f003 f855 	bl	80055bc <USB_SetCurrentMode>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0bf      	b.n	80026a4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e04a      	b.n	80025c0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	3315      	adds	r3, #21
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3314      	adds	r3, #20
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002552:	7bfa      	ldrb	r2, [r7, #15]
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	b298      	uxth	r0, r3
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	332e      	adds	r3, #46	@ 0x2e
 8002566:	4602      	mov	r2, r0
 8002568:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3318      	adds	r3, #24
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	331c      	adds	r3, #28
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	3320      	adds	r3, #32
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3324      	adds	r3, #36	@ 0x24
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	3301      	adds	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d3af      	bcc.n	800252a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e044      	b.n	800265a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	3301      	adds	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	791b      	ldrb	r3, [r3, #4]
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	429a      	cmp	r2, r3
 8002662:	d3b5      	bcc.n	80025d0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7c1a      	ldrb	r2, [r3, #16]
 800266c:	f88d 2000 	strb.w	r2, [sp]
 8002670:	3304      	adds	r3, #4
 8002672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002674:	f002 ffee 	bl	8005654 <USB_DevInit>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00c      	b.n	80026a4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f004 f838 	bl	8006712 <USB_DevDisconnect>

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_PCD_Start+0x1c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e022      	b.n	800270e <HAL_PCD_Start+0x62>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d009      	beq.n	80026f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 ff3f 	bl	8005578 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 ffe6 	bl	80066d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002716:	b590      	push	{r4, r7, lr}
 8002718:	b08d      	sub	sp, #52	@ 0x34
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f004 f8a4 	bl	800687a <USB_GetMode>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	f040 848c 	bne.w	8003052 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f004 f808 	bl	8006754 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8482 	beq.w	8003050 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fff5 	bl	8006754 <USB_ReadInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b02      	cmp	r3, #2
 8002772:	d107      	bne.n	8002784 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f002 0202 	and.w	r2, r2, #2
 8002782:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f003 ffe3 	bl	8006754 <USB_ReadInterrupts>
 800278e:	4603      	mov	r3, r0
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b10      	cmp	r3, #16
 8002796:	d161      	bne.n	800285c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0210 	bic.w	r2, r2, #16
 80027a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 020f 	and.w	r2, r3, #15
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	3304      	adds	r3, #4
 80027c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	0c5b      	lsrs	r3, r3, #17
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d124      	bne.n	800281e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d035      	beq.n	800284c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	6a38      	ldr	r0, [r7, #32]
 80027f4:	f003 fe1a 	bl	800642c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002804:	441a      	add	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002816:	441a      	add	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	615a      	str	r2, [r3, #20]
 800281c:	e016      	b.n	800284c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	0c5b      	lsrs	r3, r3, #17
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	2b06      	cmp	r3, #6
 8002828:	d110      	bne.n	800284c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002830:	2208      	movs	r2, #8
 8002832:	4619      	mov	r1, r3
 8002834:	6a38      	ldr	r0, [r7, #32]
 8002836:	f003 fdf9 	bl	800642c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002846:	441a      	add	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0210 	orr.w	r2, r2, #16
 800285a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f003 ff77 	bl	8006754 <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002870:	f040 80a7 	bne.w	80029c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f003 ff7c 	bl	800677a <USB_ReadDevAllOutEpInterrupt>
 8002882:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002884:	e099      	b.n	80029ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 808e 	beq.w	80029ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f003 ffa0 	bl	80067e2 <USB_ReadDevOutEPInterrupt>
 80028a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00c      	beq.n	80028c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ba:	461a      	mov	r2, r3
 80028bc:	2301      	movs	r3, #1
 80028be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fea4 	bl	8003610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00c      	beq.n	80028ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028de:	461a      	mov	r2, r3
 80028e0:	2308      	movs	r3, #8
 80028e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 ff7a 	bl	80037e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002902:	461a      	mov	r2, r3
 8002904:	2310      	movs	r3, #16
 8002906:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d030      	beq.n	8002974 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291a:	2b80      	cmp	r3, #128	@ 0x80
 800291c:	d109      	bne.n	8002932 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800292c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002930:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	78db      	ldrb	r3, [r3, #3]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d108      	bne.n	8002962 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f009 f8dd 	bl	800bb1c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800296e:	461a      	mov	r2, r3
 8002970:	2302      	movs	r3, #2
 8002972:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800298a:	461a      	mov	r2, r3
 800298c:	2320      	movs	r3, #32
 800298e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029a6:	461a      	mov	r2, r3
 80029a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	3301      	adds	r3, #1
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f47f af62 	bne.w	8002886 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 fec4 	bl	8006754 <USB_ReadInterrupts>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029d6:	f040 80db 	bne.w	8002b90 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fee5 	bl	80067ae <USB_ReadDevAllInEpInterrupt>
 80029e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029ea:	e0cd      	b.n	8002b88 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80c2 	beq.w	8002b7c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 ff0b 	bl	800681e <USB_ReadDevInEPInterrupt>
 8002a08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d057      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69f9      	ldr	r1, [r7, #28]
 8002a30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a34:	4013      	ands	r3, r2
 8002a36:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a44:	461a      	mov	r2, r3
 8002a46:	2301      	movs	r3, #1
 8002a48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	799b      	ldrb	r3, [r3, #6]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d132      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3320      	adds	r3, #32
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4403      	add	r3, r0
 8002a72:	331c      	adds	r3, #28
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4419      	add	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4403      	add	r3, r0
 8002a86:	3320      	adds	r3, #32
 8002a88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d113      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x3a2>
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3324      	adds	r3, #36	@ 0x24
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d108      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	f003 ff12 	bl	80068dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f008 ffb1 	bl	800ba26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ada:	461a      	mov	r2, r3
 8002adc:	2308      	movs	r3, #8
 8002ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af6:	461a      	mov	r2, r3
 8002af8:	2310      	movs	r3, #16
 8002afa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b12:	461a      	mov	r2, r3
 8002b14:	2340      	movs	r3, #64	@ 0x40
 8002b16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d023      	beq.n	8002b6a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b24:	6a38      	ldr	r0, [r7, #32]
 8002b26:	f002 fef9 	bl	800591c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	3310      	adds	r3, #16
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4413      	add	r3, r2
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	78db      	ldrb	r3, [r3, #3]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4619      	mov	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f008 fff4 	bl	800bb40 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b64:	461a      	mov	r2, r3
 8002b66:	2302      	movs	r3, #2
 8002b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fcbd 	bl	80034f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	3301      	adds	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f47f af2e 	bne.w	80029ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f003 fddd 	bl	8006754 <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ba4:	d122      	bne.n	8002bec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d108      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bcc:	2100      	movs	r1, #0
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fea4 	bl	800391c <HAL_PCDEx_LPM_Callback>
 8002bd4:	e002      	b.n	8002bdc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f008 ff92 	bl	800bb00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f003 fdaf 	bl	8006754 <USB_ReadInterrupts>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c00:	d112      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f008 ff4e 	bl	800bab4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c26:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fd91 	bl	8006754 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3c:	f040 80b7 	bne.w	8002dae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2110      	movs	r1, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fe5e 	bl	800591c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c64:	e046      	b.n	8002cf4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c72:	461a      	mov	r2, r3
 8002c74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c8a:	0151      	lsls	r1, r2, #5
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	440a      	add	r2, r1
 8002c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cbe:	0151      	lsls	r1, r2, #5
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ccc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cde:	0151      	lsls	r1, r2, #5
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	440a      	add	r2, r1
 8002ce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ce8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	791b      	ldrb	r3, [r3, #4]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d3b2      	bcc.n	8002c66 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d0e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002d12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7bdb      	ldrb	r3, [r3, #15]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d016      	beq.n	8002d4a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d2c:	f043 030b 	orr.w	r3, r3, #11
 8002d30:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d42:	f043 030b 	orr.w	r3, r3, #11
 8002d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d48:	e015      	b.n	8002d76 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d5c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d70:	f043 030b 	orr.w	r3, r3, #11
 8002d74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d84:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f003 fd9f 	bl	80068dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fcce 	bl	8006754 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dc2:	d123      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fd64 	bl	8006896 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f002 fe1b 	bl	8005a0e <USB_GetDevSpeed>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681c      	ldr	r4, [r3, #0]
 8002de4:	f001 fa0a 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8002de8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dee:	461a      	mov	r2, r3
 8002df0:	4620      	mov	r0, r4
 8002df2:	f002 fb1f 	bl	8005434 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f008 fe3d 	bl	800ba76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 fc9f 	bl	8006754 <USB_ReadInterrupts>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d10a      	bne.n	8002e36 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f008 fe1a 	bl	800ba5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695a      	ldr	r2, [r3, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f002 0208 	and.w	r2, r2, #8
 8002e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fc8a 	bl	8006754 <USB_ReadInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b80      	cmp	r3, #128	@ 0x80
 8002e48:	d123      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e56:	2301      	movs	r3, #1
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5a:	e014      	b.n	8002e86 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fb0a 	bl	8003494 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	3301      	adds	r3, #1
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	791b      	ldrb	r3, [r3, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d3e4      	bcc.n	8002e5c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 fc5c 	bl	8006754 <USB_ReadInterrupts>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ea6:	d13c      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eac:	e02b      	b.n	8002f06 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3318      	adds	r3, #24
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d115      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ed4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	da12      	bge.n	8002f00 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3317      	adds	r3, #23
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	4619      	mov	r1, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 faca 	bl	8003494 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	3301      	adds	r3, #1
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	791b      	ldrb	r3, [r3, #4]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d3cd      	bcc.n	8002eae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fc14 	bl	8006754 <USB_ReadInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f36:	d156      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f38:	2301      	movs	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3c:	e045      	b.n	8002fca <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d12e      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da2b      	bge.n	8002fc4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d121      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f92:	2201      	movs	r2, #1
 8002f94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc0:	6053      	str	r3, [r2, #4]
            break;
 8002fc2:	e008      	b.n	8002fd6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	791b      	ldrb	r3, [r3, #4]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d3b3      	bcc.n	8002f3e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fbb2 	bl	8006754 <USB_ReadInterrupts>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ffa:	d10a      	bne.n	8003012 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f008 fdb1 	bl	800bb64 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fb9c 	bl	8006754 <USB_ReadInterrupts>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d115      	bne.n	8003052 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f008 fda1 	bl	800bb80 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	e000      	b.n	8003052 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003050:	bf00      	nop
    }
  }
}
 8003052:	3734      	adds	r7, #52	@ 0x34
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}

08003058 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_PCD_SetAddress+0x1a>
 800306e:	2302      	movs	r3, #2
 8003070:	e012      	b.n	8003098 <HAL_PCD_SetAddress+0x40>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fafb 	bl	8006684 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	4608      	mov	r0, r1
 80030aa:	4611      	mov	r1, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	70fb      	strb	r3, [r7, #3]
 80030b2:	460b      	mov	r3, r1
 80030b4:	803b      	strh	r3, [r7, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da0f      	bge.n	80030e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	3310      	adds	r3, #16
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	705a      	strb	r2, [r3, #1]
 80030e4:	e00f      	b.n	8003106 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	3304      	adds	r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003112:	883b      	ldrh	r3, [r7, #0]
 8003114:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	78ba      	ldrb	r2, [r7, #2]
 8003120:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003134:	78bb      	ldrb	r3, [r7, #2]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d102      	bne.n	8003140 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_PCD_EP_Open+0xae>
 800314a:	2302      	movs	r3, #2
 800314c:	e00e      	b.n	800316c <HAL_PCD_EP_Open+0xcc>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68f9      	ldr	r1, [r7, #12]
 800315c:	4618      	mov	r0, r3
 800315e:	f002 fc7b 	bl	8005a58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800316a:	7afb      	ldrb	r3, [r7, #11]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003184:	2b00      	cmp	r3, #0
 8003186:	da0f      	bge.n	80031a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	3310      	adds	r3, #16
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	705a      	strb	r2, [r3, #1]
 80031a6:	e00f      	b.n	80031c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	f003 020f 	and.w	r2, r3, #15
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_PCD_EP_Close+0x6e>
 80031de:	2302      	movs	r3, #2
 80031e0:	e00e      	b.n	8003200 <HAL_PCD_EP_Close+0x8c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 fcb9 	bl	8005b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	f003 020f 	and.w	r2, r3, #15
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	3304      	adds	r3, #4
 8003230:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	b2da      	uxtb	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	799b      	ldrb	r3, [r3, #6]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	799b      	ldrb	r3, [r3, #6]
 800326c:	461a      	mov	r2, r3
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	f002 fd56 	bl	8005d20 <USB_EPStartXfer>

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 020f 	and.w	r2, r3, #15
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80032a0:	681b      	ldr	r3, [r3, #0]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	460b      	mov	r3, r1
 80032bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032be:	7afb      	ldrb	r3, [r7, #11]
 80032c0:	f003 020f 	and.w	r2, r3, #15
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	3310      	adds	r3, #16
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2201      	movs	r2, #1
 80032ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ee:	7afb      	ldrb	r3, [r7, #11]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	799b      	ldrb	r3, [r3, #6]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	799b      	ldrb	r3, [r3, #6]
 8003310:	461a      	mov	r2, r3
 8003312:	6979      	ldr	r1, [r7, #20]
 8003314:	f002 fd04 	bl	8005d20 <USB_EPStartXfer>

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	7912      	ldrb	r2, [r2, #4]
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04f      	b.n	80033e0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003344:	2b00      	cmp	r3, #0
 8003346:	da0f      	bge.n	8003368 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 020f 	and.w	r2, r3, #15
 800334e:	4613      	mov	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	3310      	adds	r3, #16
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	3304      	adds	r3, #4
 800335e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	705a      	strb	r2, [r3, #1]
 8003366:	e00d      	b.n	8003384 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	3304      	adds	r3, #4
 800337c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_PCD_EP_SetStall+0x82>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e01d      	b.n	80033e0 <HAL_PCD_EP_SetStall+0xbe>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 f892 	bl	80064dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7999      	ldrb	r1, [r3, #6]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033d0:	461a      	mov	r2, r3
 80033d2:	f003 fa83 	bl	80068dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	7912      	ldrb	r2, [r2, #4]
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e042      	b.n	800348c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340a:	2b00      	cmp	r3, #0
 800340c:	da0f      	bge.n	800342e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	f003 020f 	and.w	r2, r3, #15
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	3310      	adds	r3, #16
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	705a      	strb	r2, [r3, #1]
 800342c:	e00f      	b.n	800344e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	f003 020f 	and.w	r2, r3, #15
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_PCD_EP_ClrStall+0x86>
 800346a:	2302      	movs	r3, #2
 800346c:	e00e      	b.n	800348c <HAL_PCD_EP_ClrStall+0xa4>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68f9      	ldr	r1, [r7, #12]
 800347c:	4618      	mov	r0, r3
 800347e:	f003 f89b 	bl	80065b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	da0c      	bge.n	80034c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	f003 020f 	and.w	r2, r3, #15
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	3310      	adds	r3, #16
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e00c      	b.n	80034dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	f003 020f 	and.w	r2, r3, #15
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68f9      	ldr	r1, [r7, #12]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 feba 	bl	800625c <USB_EPStopXfer>
 80034e8:	4603      	mov	r3, r0
 80034ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034ec:	7afb      	ldrb	r3, [r7, #11]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b08a      	sub	sp, #40	@ 0x28
 80034fa:	af02      	add	r7, sp, #8
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	3310      	adds	r3, #16
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	429a      	cmp	r2, r3
 8003528:	d901      	bls.n	800352e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	429a      	cmp	r2, r3
 8003542:	d902      	bls.n	800354a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3303      	adds	r3, #3
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003552:	e02a      	b.n	80035aa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	429a      	cmp	r2, r3
 8003568:	d902      	bls.n	8003570 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	3303      	adds	r3, #3
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68d9      	ldr	r1, [r3, #12]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4603      	mov	r3, r0
 800358c:	6978      	ldr	r0, [r7, #20]
 800358e:	f002 ff0f 	bl	80063b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	441a      	add	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	441a      	add	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d809      	bhi.n	80035d4 <PCD_WriteEmptyTxFifo+0xde>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d203      	bcs.n	80035d4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1bf      	bne.n	8003554 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d811      	bhi.n	8003604 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	2201      	movs	r2, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	6939      	ldr	r1, [r7, #16]
 80035fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003600:	4013      	ands	r3, r2
 8003602:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	333c      	adds	r3, #60	@ 0x3c
 8003628:	3304      	adds	r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	799b      	ldrb	r3, [r3, #6]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d17b      	bne.n	800373e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4a61      	ldr	r2, [pc, #388]	@ (80037d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	f240 80b9 	bls.w	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b3 	beq.w	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003672:	461a      	mov	r2, r3
 8003674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003678:	6093      	str	r3, [r2, #8]
 800367a:	e0a7      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003692:	461a      	mov	r2, r3
 8003694:	2320      	movs	r3, #32
 8003696:	6093      	str	r3, [r2, #8]
 8003698:	e098      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 8093 	bne.w	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	4a4b      	ldr	r2, [pc, #300]	@ (80037d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d90f      	bls.n	80036ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c4:	461a      	mov	r2, r3
 80036c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	e07e      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	4413      	add	r3, r2
 80036e0:	3304      	adds	r3, #4
 80036e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	0159      	lsls	r1, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	440b      	add	r3, r1
 80036f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	1ad2      	subs	r2, r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d114      	bne.n	8003730 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003718:	461a      	mov	r2, r3
 800371a:	2101      	movs	r1, #1
 800371c:	f003 f8de 	bl	80068dc <USB_EP0_OutStart>
 8003720:	e006      	b.n	8003730 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f008 f95a 	bl	800b9f0 <HAL_PCD_DataOutStageCallback>
 800373c:	e046      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	4a26      	ldr	r2, [pc, #152]	@ (80037dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d124      	bne.n	8003790 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375c:	461a      	mov	r2, r3
 800375e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003762:	6093      	str	r3, [r2, #8]
 8003764:	e032      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	2320      	movs	r3, #32
 8003780:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f008 f931 	bl	800b9f0 <HAL_PCD_DataOutStageCallback>
 800378e:	e01d      	b.n	80037cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d114      	bne.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037b8:	461a      	mov	r2, r3
 80037ba:	2100      	movs	r1, #0
 80037bc:	f003 f88e 	bl	80068dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f008 f912 	bl	800b9f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	4f54300a 	.word	0x4f54300a
 80037dc:	4f54310a 	.word	0x4f54310a

080037e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	333c      	adds	r3, #60	@ 0x3c
 80037f8:	3304      	adds	r3, #4
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a15      	ldr	r2, [pc, #84]	@ (8003868 <PCD_EP_OutSetupPacket_int+0x88>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d90e      	bls.n	8003834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382c:	461a      	mov	r2, r3
 800382e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f008 f8c9 	bl	800b9cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <PCD_EP_OutSetupPacket_int+0x88>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d90c      	bls.n	800385c <PCD_EP_OutSetupPacket_int+0x7c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	799b      	ldrb	r3, [r3, #6]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d108      	bne.n	800385c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003854:	461a      	mov	r2, r3
 8003856:	2101      	movs	r1, #1
 8003858:	f003 f840 	bl	80068dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	4f54300a 	.word	0x4f54300a

0800386c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	70fb      	strb	r3, [r7, #3]
 8003878:	4613      	mov	r3, r2
 800387a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800388a:	883b      	ldrh	r3, [r7, #0]
 800388c:	0419      	lsls	r1, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	430a      	orrs	r2, r1
 8003896:	629a      	str	r2, [r3, #40]	@ 0x28
 8003898:	e028      	b.n	80038ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4413      	add	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e00d      	b.n	80038ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	3340      	adds	r3, #64	@ 0x40
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	78fb      	ldrb	r3, [r7, #3]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3ec      	bcc.n	80038ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038d4:	883b      	ldrh	r3, [r7, #0]
 80038d6:	0418      	lsls	r0, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6819      	ldr	r1, [r3, #0]
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	3b01      	subs	r3, #1
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4302      	orrs	r2, r0
 80038e4:	3340      	adds	r3, #64	@ 0x40
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e267      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d075      	beq.n	8003a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003952:	4b88      	ldr	r3, [pc, #544]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b04      	cmp	r3, #4
 800395c:	d00c      	beq.n	8003978 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395e:	4b85      	ldr	r3, [pc, #532]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003966:	2b08      	cmp	r3, #8
 8003968:	d112      	bne.n	8003990 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396a:	4b82      	ldr	r3, [pc, #520]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003976:	d10b      	bne.n	8003990 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	4b7e      	ldr	r3, [pc, #504]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d05b      	beq.n	8003a3c <HAL_RCC_OscConfig+0x108>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d157      	bne.n	8003a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e242      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003998:	d106      	bne.n	80039a8 <HAL_RCC_OscConfig+0x74>
 800399a:	4b76      	ldr	r3, [pc, #472]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a75      	ldr	r2, [pc, #468]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e01d      	b.n	80039e4 <HAL_RCC_OscConfig+0xb0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039b0:	d10c      	bne.n	80039cc <HAL_RCC_OscConfig+0x98>
 80039b2:	4b70      	ldr	r3, [pc, #448]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	4b6d      	ldr	r3, [pc, #436]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e00b      	b.n	80039e4 <HAL_RCC_OscConfig+0xb0>
 80039cc:	4b69      	ldr	r3, [pc, #420]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a68      	ldr	r2, [pc, #416]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b66      	ldr	r3, [pc, #408]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a65      	ldr	r2, [pc, #404]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 80039de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fd fde8 	bl	80015c0 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fd fde4 	bl	80015c0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e207      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	4b5b      	ldr	r3, [pc, #364]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0xc0>
 8003a12:	e014      	b.n	8003a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fdd4 	bl	80015c0 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1c:	f7fd fdd0 	bl	80015c0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	@ 0x64
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1f3      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	4b51      	ldr	r3, [pc, #324]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0xe8>
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d063      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a56:	4b47      	ldr	r3, [pc, #284]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d11c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a62:	4b44      	ldr	r3, [pc, #272]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d116      	bne.n	8003a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	4b41      	ldr	r3, [pc, #260]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d005      	beq.n	8003a86 <HAL_RCC_OscConfig+0x152>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d001      	beq.n	8003a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e1c7      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4937      	ldr	r1, [pc, #220]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	e03a      	b.n	8003b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa4:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <HAL_RCC_OscConfig+0x244>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fd89 	bl	80015c0 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab2:	f7fd fd85 	bl	80015c0 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e1a8      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad0:	4b28      	ldr	r3, [pc, #160]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4925      	ldr	r1, [pc, #148]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	600b      	str	r3, [r1, #0]
 8003ae4:	e015      	b.n	8003b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <HAL_RCC_OscConfig+0x244>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fd68 	bl	80015c0 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7fd fd64 	bl	80015c0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e187      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	4b1b      	ldr	r3, [pc, #108]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d036      	beq.n	8003b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b26:	4b15      	ldr	r3, [pc, #84]	@ (8003b7c <HAL_RCC_OscConfig+0x248>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd fd48 	bl	80015c0 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b34:	f7fd fd44 	bl	80015c0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e167      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <HAL_RCC_OscConfig+0x240>)
 8003b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x200>
 8003b52:	e01b      	b.n	8003b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b54:	4b09      	ldr	r3, [pc, #36]	@ (8003b7c <HAL_RCC_OscConfig+0x248>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b5a:	f7fd fd31 	bl	80015c0 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	e00e      	b.n	8003b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b62:	f7fd fd2d 	bl	80015c0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d907      	bls.n	8003b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e150      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	42470000 	.word	0x42470000
 8003b7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	4b88      	ldr	r3, [pc, #544]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ea      	bne.n	8003b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8097 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9e:	4b81      	ldr	r3, [pc, #516]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	4b7d      	ldr	r3, [pc, #500]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	4a7c      	ldr	r2, [pc, #496]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bba:	4b7a      	ldr	r3, [pc, #488]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bca:	4b77      	ldr	r3, [pc, #476]	@ (8003da8 <HAL_RCC_OscConfig+0x474>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d118      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd6:	4b74      	ldr	r3, [pc, #464]	@ (8003da8 <HAL_RCC_OscConfig+0x474>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a73      	ldr	r2, [pc, #460]	@ (8003da8 <HAL_RCC_OscConfig+0x474>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be2:	f7fd fced 	bl	80015c0 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bea:	f7fd fce9 	bl	80015c0 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e10c      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8003da8 <HAL_RCC_OscConfig+0x474>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d106      	bne.n	8003c1e <HAL_RCC_OscConfig+0x2ea>
 8003c10:	4b64      	ldr	r3, [pc, #400]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c14:	4a63      	ldr	r2, [pc, #396]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c1c:	e01c      	b.n	8003c58 <HAL_RCC_OscConfig+0x324>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x30c>
 8003c26:	4b5f      	ldr	r3, [pc, #380]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c32:	4b5c      	ldr	r3, [pc, #368]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c36:	4a5b      	ldr	r2, [pc, #364]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0x324>
 8003c40:	4b58      	ldr	r3, [pc, #352]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c44:	4a57      	ldr	r2, [pc, #348]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4c:	4b55      	ldr	r3, [pc, #340]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c50:	4a54      	ldr	r2, [pc, #336]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c52:	f023 0304 	bic.w	r3, r3, #4
 8003c56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d015      	beq.n	8003c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd fcae 	bl	80015c0 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fd fcaa 	bl	80015c0 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0cb      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7e:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0ee      	beq.n	8003c68 <HAL_RCC_OscConfig+0x334>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8c:	f7fd fc98 	bl	80015c0 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd fc94 	bl	80015c0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0b5      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003caa:	4b3e      	ldr	r3, [pc, #248]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ee      	bne.n	8003c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cb6:	7dfb      	ldrb	r3, [r7, #23]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d105      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cbc:	4b39      	ldr	r3, [pc, #228]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	4a38      	ldr	r2, [pc, #224]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a1 	beq.w	8003e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cd2:	4b34      	ldr	r3, [pc, #208]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d05c      	beq.n	8003d98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d141      	bne.n	8003d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce6:	4b31      	ldr	r3, [pc, #196]	@ (8003dac <HAL_RCC_OscConfig+0x478>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7fd fc68 	bl	80015c0 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fd fc64 	bl	80015c0 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e087      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	4b27      	ldr	r3, [pc, #156]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69da      	ldr	r2, [r3, #28]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	019b      	lsls	r3, r3, #6
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	491b      	ldr	r1, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x478>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fd fc3d 	bl	80015c0 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fd fc39 	bl	80015c0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e05c      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5c:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x416>
 8003d68:	e054      	b.n	8003e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <HAL_RCC_OscConfig+0x478>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fd fc26 	bl	80015c0 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd fc22 	bl	80015c0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e045      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x444>
 8003d96:	e03d      	b.n	8003e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e038      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40007000 	.word	0x40007000
 8003dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e20 <HAL_RCC_OscConfig+0x4ec>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d121      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d11a      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003de0:	4013      	ands	r3, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d111      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800

08003e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0cc      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e38:	4b68      	ldr	r3, [pc, #416]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d90c      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b65      	ldr	r3, [pc, #404]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b63      	ldr	r3, [pc, #396]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0b8      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e78:	4b59      	ldr	r3, [pc, #356]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a58      	ldr	r2, [pc, #352]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e90:	4b53      	ldr	r3, [pc, #332]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4a52      	ldr	r2, [pc, #328]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9c:	4b50      	ldr	r3, [pc, #320]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	494d      	ldr	r1, [pc, #308]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d044      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	4b47      	ldr	r3, [pc, #284]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d119      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e07f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e06f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e067      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f02:	4b37      	ldr	r3, [pc, #220]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4934      	ldr	r1, [pc, #208]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f14:	f7fd fb54 	bl	80015c0 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fd fb50 	bl	80015c0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e04f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 020c 	and.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1eb      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d20c      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b22      	ldr	r3, [pc, #136]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b20      	ldr	r3, [pc, #128]	@ (8003fdc <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e032      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4916      	ldr	r1, [pc, #88]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f96:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	490e      	ldr	r1, [pc, #56]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003faa:	f000 f821 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	490a      	ldr	r1, [pc, #40]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbc:	5ccb      	ldrb	r3, [r1, r3]
 8003fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc2:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fc6:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <HAL_RCC_ClockConfig+0x1c8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fd f936 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023c00 	.word	0x40023c00
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	0800c9b0 	.word	0x0800c9b0
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	20000004 	.word	0x20000004

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff4:	b094      	sub	sp, #80	@ 0x50
 8003ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004008:	4b79      	ldr	r3, [pc, #484]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d00d      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x40>
 8004014:	2b08      	cmp	r3, #8
 8004016:	f200 80e1 	bhi.w	80041dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x34>
 800401e:	2b04      	cmp	r3, #4
 8004020:	d003      	beq.n	800402a <HAL_RCC_GetSysClockFreq+0x3a>
 8004022:	e0db      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b73      	ldr	r3, [pc, #460]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004026:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004028:	e0db      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800402a:	4b73      	ldr	r3, [pc, #460]	@ (80041f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800402c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800402e:	e0d8      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004030:	4b6f      	ldr	r3, [pc, #444]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004038:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800403a:	4b6d      	ldr	r3, [pc, #436]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d063      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004046:	4b6a      	ldr	r3, [pc, #424]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	099b      	lsrs	r3, r3, #6
 800404c:	2200      	movs	r2, #0
 800404e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004050:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004058:	633b      	str	r3, [r7, #48]	@ 0x30
 800405a:	2300      	movs	r3, #0
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
 800405e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004062:	4622      	mov	r2, r4
 8004064:	462b      	mov	r3, r5
 8004066:	f04f 0000 	mov.w	r0, #0
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	0159      	lsls	r1, r3, #5
 8004070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004074:	0150      	lsls	r0, r2, #5
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4621      	mov	r1, r4
 800407c:	1a51      	subs	r1, r2, r1
 800407e:	6139      	str	r1, [r7, #16]
 8004080:	4629      	mov	r1, r5
 8004082:	eb63 0301 	sbc.w	r3, r3, r1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004094:	4659      	mov	r1, fp
 8004096:	018b      	lsls	r3, r1, #6
 8004098:	4651      	mov	r1, sl
 800409a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800409e:	4651      	mov	r1, sl
 80040a0:	018a      	lsls	r2, r1, #6
 80040a2:	4651      	mov	r1, sl
 80040a4:	ebb2 0801 	subs.w	r8, r2, r1
 80040a8:	4659      	mov	r1, fp
 80040aa:	eb63 0901 	sbc.w	r9, r3, r1
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040c2:	4690      	mov	r8, r2
 80040c4:	4699      	mov	r9, r3
 80040c6:	4623      	mov	r3, r4
 80040c8:	eb18 0303 	adds.w	r3, r8, r3
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	462b      	mov	r3, r5
 80040d0:	eb49 0303 	adc.w	r3, r9, r3
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040e2:	4629      	mov	r1, r5
 80040e4:	024b      	lsls	r3, r1, #9
 80040e6:	4621      	mov	r1, r4
 80040e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040ec:	4621      	mov	r1, r4
 80040ee:	024a      	lsls	r2, r1, #9
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040f6:	2200      	movs	r2, #0
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004100:	f7fc f86e 	bl	80001e0 <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4613      	mov	r3, r2
 800410a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800410c:	e058      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410e:	4b38      	ldr	r3, [pc, #224]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	099b      	lsrs	r3, r3, #6
 8004114:	2200      	movs	r2, #0
 8004116:	4618      	mov	r0, r3
 8004118:	4611      	mov	r1, r2
 800411a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	2300      	movs	r3, #0
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24
 8004124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	f04f 0000 	mov.w	r0, #0
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	0159      	lsls	r1, r3, #5
 8004136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800413a:	0150      	lsls	r0, r2, #5
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4641      	mov	r1, r8
 8004142:	ebb2 0a01 	subs.w	sl, r2, r1
 8004146:	4649      	mov	r1, r9
 8004148:	eb63 0b01 	sbc.w	fp, r3, r1
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800415c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004160:	ebb2 040a 	subs.w	r4, r2, sl
 8004164:	eb63 050b 	sbc.w	r5, r3, fp
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	00eb      	lsls	r3, r5, #3
 8004172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004176:	00e2      	lsls	r2, r4, #3
 8004178:	4614      	mov	r4, r2
 800417a:	461d      	mov	r5, r3
 800417c:	4643      	mov	r3, r8
 800417e:	18e3      	adds	r3, r4, r3
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	464b      	mov	r3, r9
 8004184:	eb45 0303 	adc.w	r3, r5, r3
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004196:	4629      	mov	r1, r5
 8004198:	028b      	lsls	r3, r1, #10
 800419a:	4621      	mov	r1, r4
 800419c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041a0:	4621      	mov	r1, r4
 80041a2:	028a      	lsls	r2, r1, #10
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041aa:	2200      	movs	r2, #0
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	61fa      	str	r2, [r7, #28]
 80041b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b4:	f7fc f814 	bl	80001e0 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041c0:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	3301      	adds	r3, #1
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041da:	e002      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3750      	adds	r7, #80	@ 0x50
 80041e8:	46bd      	mov	sp, r7
 80041ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ee:	bf00      	nop
 80041f0:	40023800 	.word	0x40023800
 80041f4:	00f42400 	.word	0x00f42400
 80041f8:	007a1200 	.word	0x007a1200

080041fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004200:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <HAL_RCC_GetHCLKFreq+0x14>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000000 	.word	0x20000000

08004214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004218:	f7ff fff0 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b05      	ldr	r3, [pc, #20]	@ (8004234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0a9b      	lsrs	r3, r3, #10
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4903      	ldr	r1, [pc, #12]	@ (8004238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40023800 	.word	0x40023800
 8004238:	0800c9c0 	.word	0x0800c9c0

0800423c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004240:	f7ff ffdc 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b05      	ldr	r3, [pc, #20]	@ (800425c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	0b5b      	lsrs	r3, r3, #13
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4903      	ldr	r1, [pc, #12]	@ (8004260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40023800 	.word	0x40023800
 8004260:	0800c9c0 	.word	0x0800c9c0

08004264 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	220f      	movs	r2, #15
 8004272:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004274:	4b12      	ldr	r3, [pc, #72]	@ (80042c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0203 	and.w	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004280:	4b0f      	ldr	r3, [pc, #60]	@ (80042c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800428c:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <HAL_RCC_GetClockConfig+0x5c>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004298:	4b09      	ldr	r3, [pc, #36]	@ (80042c0 <HAL_RCC_GetClockConfig+0x5c>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	08db      	lsrs	r3, r3, #3
 800429e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042a6:	4b07      	ldr	r3, [pc, #28]	@ (80042c4 <HAL_RCC_GetClockConfig+0x60>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0207 	and.w	r2, r3, #7
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40023c00 	.word	0x40023c00

080042c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e041      	b.n	800435e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc ff24 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fa70 	bl	80047ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e044      	b.n	800440a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1e      	ldr	r2, [pc, #120]	@ (8004418 <HAL_TIM_Base_Start_IT+0xb0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043aa:	d013      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1a      	ldr	r2, [pc, #104]	@ (800441c <HAL_TIM_Base_Start_IT+0xb4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a19      	ldr	r2, [pc, #100]	@ (8004420 <HAL_TIM_Base_Start_IT+0xb8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a17      	ldr	r2, [pc, #92]	@ (8004424 <HAL_TIM_Base_Start_IT+0xbc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a16      	ldr	r2, [pc, #88]	@ (8004428 <HAL_TIM_Base_Start_IT+0xc0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d111      	bne.n	80043f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d010      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	e007      	b.n	8004408 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40014000 	.word	0x40014000

0800442c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d020      	beq.n	8004490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01b      	beq.n	8004490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0202 	mvn.w	r2, #2
 8004460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f999 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f98b 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f99c 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d020      	beq.n	80044dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01b      	beq.n	80044dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0204 	mvn.w	r2, #4
 80044ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f973 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f965 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f976 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0208 	mvn.w	r2, #8
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f94d 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f93f 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f950 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b00      	cmp	r3, #0
 8004530:	d020      	beq.n	8004574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0210 	mvn.w	r2, #16
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2208      	movs	r2, #8
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f927 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f919 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f92a 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0201 	mvn.w	r2, #1
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc fd4a 	bl	800102c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fab6 	bl	8004b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00c      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8fb 	bl	80047d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00c      	beq.n	8004604 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0220 	mvn.w	r2, #32
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa88 	bl	8004b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_TIM_ConfigClockSource+0x1c>
 8004624:	2302      	movs	r3, #2
 8004626:	e0b4      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x186>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800464e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004660:	d03e      	beq.n	80046e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004666:	f200 8087 	bhi.w	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466e:	f000 8086 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x172>
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004676:	d87f      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b70      	cmp	r3, #112	@ 0x70
 800467a:	d01a      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0xa6>
 800467c:	2b70      	cmp	r3, #112	@ 0x70
 800467e:	d87b      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b60      	cmp	r3, #96	@ 0x60
 8004682:	d050      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x11a>
 8004684:	2b60      	cmp	r3, #96	@ 0x60
 8004686:	d877      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b50      	cmp	r3, #80	@ 0x50
 800468a:	d03c      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0xfa>
 800468c:	2b50      	cmp	r3, #80	@ 0x50
 800468e:	d873      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	d058      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x13a>
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d86f      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b30      	cmp	r3, #48	@ 0x30
 800469a:	d064      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	2b30      	cmp	r3, #48	@ 0x30
 800469e:	d86b      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d060      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15a>
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d867      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d05c      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15a>
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d05a      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15a>
 80046b0:	e062      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	f000 f999 	bl	80049f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	609a      	str	r2, [r3, #8]
      break;
 80046de:	e04f      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	f000 f982 	bl	80049f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004702:	609a      	str	r2, [r3, #8]
      break;
 8004704:	e03c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004712:	461a      	mov	r2, r3
 8004714:	f000 f8f6 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2150      	movs	r1, #80	@ 0x50
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f94f 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004724:	e02c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004732:	461a      	mov	r2, r3
 8004734:	f000 f915 	bl	8004962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2160      	movs	r1, #96	@ 0x60
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f93f 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004744:	e01c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	461a      	mov	r2, r3
 8004754:	f000 f8d6 	bl	8004904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2140      	movs	r1, #64	@ 0x40
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f92f 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004764:	e00c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f000 f926 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 8004776:	e003      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      break;
 800477c:	e000      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800477e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00f      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480a:	d00b      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a37      	ldr	r2, [pc, #220]	@ (80048ec <TIM_Base_SetConfig+0x100>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a36      	ldr	r2, [pc, #216]	@ (80048f0 <TIM_Base_SetConfig+0x104>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a35      	ldr	r2, [pc, #212]	@ (80048f4 <TIM_Base_SetConfig+0x108>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2b      	ldr	r2, [pc, #172]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	@ (80048ec <TIM_Base_SetConfig+0x100>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	@ (80048f0 <TIM_Base_SetConfig+0x104>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	@ (80048f4 <TIM_Base_SetConfig+0x108>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	@ (80048f8 <TIM_Base_SetConfig+0x10c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a24      	ldr	r2, [pc, #144]	@ (80048fc <TIM_Base_SetConfig+0x110>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a23      	ldr	r2, [pc, #140]	@ (8004900 <TIM_Base_SetConfig+0x114>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0e      	ldr	r2, [pc, #56]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]
  }
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800492e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f023 0210 	bic.w	r2, r3, #16
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800498c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	031b      	lsls	r3, r3, #12
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800499e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	f043 0307 	orr.w	r3, r3, #7
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	021a      	lsls	r2, r3, #8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e050      	b.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d018      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9c:	d013      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a16      	ldr	r2, [pc, #88]	@ (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40000c00 	.word	0x40000c00
 8004b10:	40014000 	.word	0x40014000

08004b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e042      	b.n	8004bd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc fb22 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2224      	movs	r2, #36	@ 0x24
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f97f 	bl	8004e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	@ 0x28
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	f040 8081 	bne.w	8004d00 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_UART_Receive+0x2e>
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e079      	b.n	8004d02 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2222      	movs	r2, #34	@ 0x22
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c22:	f7fc fccd 	bl	80015c0 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3c:	d108      	bne.n	8004c50 <HAL_UART_Receive+0x74>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e003      	b.n	8004c58 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c58:	e047      	b.n	8004cea <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2120      	movs	r1, #32
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f850 	bl	8004d0a <UART_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e042      	b.n	8004d02 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10c      	bne.n	8004c9c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	3302      	adds	r3, #2
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e01f      	b.n	8004cdc <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca4:	d007      	beq.n	8004cb6 <HAL_UART_Receive+0xda>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_UART_Receive+0xe8>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e008      	b.n	8004cd6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1b2      	bne.n	8004c5a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e000      	b.n	8004d02 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1a:	e03b      	b.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d037      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d24:	f7fc fc4c 	bl	80015c0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	6a3a      	ldr	r2, [r7, #32]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e03a      	b.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d023      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b80      	cmp	r3, #128	@ 0x80
 8004d50:	d020      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d01d      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d116      	bne.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f81d 	bl	8004dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2208      	movs	r2, #8
 8004d86:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e00f      	b.n	8004db4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d0b4      	beq.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b095      	sub	sp, #84	@ 0x54
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004de4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e5      	bne.n	8004dc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3314      	adds	r3, #20
 8004e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d119      	bne.n	8004e68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f023 0310 	bic.w	r3, r3, #16
 8004e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e54:	61ba      	str	r2, [r7, #24]
 8004e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6979      	ldr	r1, [r7, #20]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	613b      	str	r3, [r7, #16]
   return(result);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e76:	bf00      	nop
 8004e78:	3754      	adds	r7, #84	@ 0x54
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e88:	b0c0      	sub	sp, #256	@ 0x100
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	68d9      	ldr	r1, [r3, #12]
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	ea40 0301 	orr.w	r3, r0, r1
 8004eac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004edc:	f021 010c 	bic.w	r1, r1, #12
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004eea:	430b      	orrs	r3, r1
 8004eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efe:	6999      	ldr	r1, [r3, #24]
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	ea40 0301 	orr.w	r3, r0, r1
 8004f0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b8f      	ldr	r3, [pc, #572]	@ (8005150 <UART_SetConfig+0x2cc>)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d005      	beq.n	8004f24 <UART_SetConfig+0xa0>
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8005154 <UART_SetConfig+0x2d0>)
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d104      	bne.n	8004f2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f24:	f7ff f98a 	bl	800423c <HAL_RCC_GetPCLK2Freq>
 8004f28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f2c:	e003      	b.n	8004f36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f2e:	f7ff f971 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8004f32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f40:	f040 810c 	bne.w	800515c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f56:	4622      	mov	r2, r4
 8004f58:	462b      	mov	r3, r5
 8004f5a:	1891      	adds	r1, r2, r2
 8004f5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f5e:	415b      	adcs	r3, r3
 8004f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f66:	4621      	mov	r1, r4
 8004f68:	eb12 0801 	adds.w	r8, r2, r1
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	eb43 0901 	adc.w	r9, r3, r1
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f86:	4690      	mov	r8, r2
 8004f88:	4699      	mov	r9, r3
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	eb18 0303 	adds.w	r3, r8, r3
 8004f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f94:	462b      	mov	r3, r5
 8004f96:	eb49 0303 	adc.w	r3, r9, r3
 8004f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004faa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	18db      	adds	r3, r3, r3
 8004fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fb8:	4613      	mov	r3, r2
 8004fba:	eb42 0303 	adc.w	r3, r2, r3
 8004fbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fc8:	f7fb f90a 	bl	80001e0 <__aeabi_uldivmod>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4b61      	ldr	r3, [pc, #388]	@ (8005158 <UART_SetConfig+0x2d4>)
 8004fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	011c      	lsls	r4, r3, #4
 8004fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fe4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fe8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	eb12 0a01 	adds.w	sl, r2, r1
 8005002:	4649      	mov	r1, r9
 8005004:	eb43 0b01 	adc.w	fp, r3, r1
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005014:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800501c:	4692      	mov	sl, r2
 800501e:	469b      	mov	fp, r3
 8005020:	4643      	mov	r3, r8
 8005022:	eb1a 0303 	adds.w	r3, sl, r3
 8005026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800502a:	464b      	mov	r3, r9
 800502c:	eb4b 0303 	adc.w	r3, fp, r3
 8005030:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005040:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005044:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005048:	460b      	mov	r3, r1
 800504a:	18db      	adds	r3, r3, r3
 800504c:	643b      	str	r3, [r7, #64]	@ 0x40
 800504e:	4613      	mov	r3, r2
 8005050:	eb42 0303 	adc.w	r3, r2, r3
 8005054:	647b      	str	r3, [r7, #68]	@ 0x44
 8005056:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800505a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800505e:	f7fb f8bf 	bl	80001e0 <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4611      	mov	r1, r2
 8005068:	4b3b      	ldr	r3, [pc, #236]	@ (8005158 <UART_SetConfig+0x2d4>)
 800506a:	fba3 2301 	umull	r2, r3, r3, r1
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2264      	movs	r2, #100	@ 0x64
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	1acb      	subs	r3, r1, r3
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800507e:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <UART_SetConfig+0x2d4>)
 8005080:	fba3 2302 	umull	r2, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800508c:	441c      	add	r4, r3
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005098:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800509c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050a8:	415b      	adcs	r3, r3
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050b0:	4641      	mov	r1, r8
 80050b2:	1851      	adds	r1, r2, r1
 80050b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80050b6:	4649      	mov	r1, r9
 80050b8:	414b      	adcs	r3, r1
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050c8:	4659      	mov	r1, fp
 80050ca:	00cb      	lsls	r3, r1, #3
 80050cc:	4651      	mov	r1, sl
 80050ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d2:	4651      	mov	r1, sl
 80050d4:	00ca      	lsls	r2, r1, #3
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	4642      	mov	r2, r8
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050e4:	464b      	mov	r3, r9
 80050e6:	460a      	mov	r2, r1
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005100:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005104:	460b      	mov	r3, r1
 8005106:	18db      	adds	r3, r3, r3
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800510a:	4613      	mov	r3, r2
 800510c:	eb42 0303 	adc.w	r3, r2, r3
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005116:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800511a:	f7fb f861 	bl	80001e0 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <UART_SetConfig+0x2d4>)
 8005124:	fba3 1302 	umull	r1, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2164      	movs	r1, #100	@ 0x64
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	3332      	adds	r3, #50	@ 0x32
 8005136:	4a08      	ldr	r2, [pc, #32]	@ (8005158 <UART_SetConfig+0x2d4>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	f003 0207 	and.w	r2, r3, #7
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4422      	add	r2, r4
 800514a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800514c:	e106      	b.n	800535c <UART_SetConfig+0x4d8>
 800514e:	bf00      	nop
 8005150:	40011000 	.word	0x40011000
 8005154:	40011400 	.word	0x40011400
 8005158:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800515c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005160:	2200      	movs	r2, #0
 8005162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005166:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800516a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800516e:	4642      	mov	r2, r8
 8005170:	464b      	mov	r3, r9
 8005172:	1891      	adds	r1, r2, r2
 8005174:	6239      	str	r1, [r7, #32]
 8005176:	415b      	adcs	r3, r3
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
 800517a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800517e:	4641      	mov	r1, r8
 8005180:	1854      	adds	r4, r2, r1
 8005182:	4649      	mov	r1, r9
 8005184:	eb43 0501 	adc.w	r5, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	00eb      	lsls	r3, r5, #3
 8005192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005196:	00e2      	lsls	r2, r4, #3
 8005198:	4614      	mov	r4, r2
 800519a:	461d      	mov	r5, r3
 800519c:	4643      	mov	r3, r8
 800519e:	18e3      	adds	r3, r4, r3
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051a4:	464b      	mov	r3, r9
 80051a6:	eb45 0303 	adc.w	r3, r5, r3
 80051aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051ca:	4629      	mov	r1, r5
 80051cc:	008b      	lsls	r3, r1, #2
 80051ce:	4621      	mov	r1, r4
 80051d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051d4:	4621      	mov	r1, r4
 80051d6:	008a      	lsls	r2, r1, #2
 80051d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051dc:	f7fb f800 	bl	80001e0 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4b60      	ldr	r3, [pc, #384]	@ (8005368 <UART_SetConfig+0x4e4>)
 80051e6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	011c      	lsls	r4, r3, #4
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	61b9      	str	r1, [r7, #24]
 8005208:	415b      	adcs	r3, r3
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005210:	4641      	mov	r1, r8
 8005212:	1851      	adds	r1, r2, r1
 8005214:	6139      	str	r1, [r7, #16]
 8005216:	4649      	mov	r1, r9
 8005218:	414b      	adcs	r3, r1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005228:	4659      	mov	r1, fp
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	4651      	mov	r1, sl
 800522e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005232:	4651      	mov	r1, sl
 8005234:	00ca      	lsls	r2, r1, #3
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	4603      	mov	r3, r0
 800523c:	4642      	mov	r2, r8
 800523e:	189b      	adds	r3, r3, r2
 8005240:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005244:	464b      	mov	r3, r9
 8005246:	460a      	mov	r2, r1
 8005248:	eb42 0303 	adc.w	r3, r2, r3
 800524c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	67bb      	str	r3, [r7, #120]	@ 0x78
 800525a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005268:	4649      	mov	r1, r9
 800526a:	008b      	lsls	r3, r1, #2
 800526c:	4641      	mov	r1, r8
 800526e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005272:	4641      	mov	r1, r8
 8005274:	008a      	lsls	r2, r1, #2
 8005276:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800527a:	f7fa ffb1 	bl	80001e0 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4611      	mov	r1, r2
 8005284:	4b38      	ldr	r3, [pc, #224]	@ (8005368 <UART_SetConfig+0x4e4>)
 8005286:	fba3 2301 	umull	r2, r3, r3, r1
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	2264      	movs	r2, #100	@ 0x64
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	1acb      	subs	r3, r1, r3
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	3332      	adds	r3, #50	@ 0x32
 8005298:	4a33      	ldr	r2, [pc, #204]	@ (8005368 <UART_SetConfig+0x4e4>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a4:	441c      	add	r4, r3
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052aa:	2200      	movs	r2, #0
 80052ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80052b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052b4:	4642      	mov	r2, r8
 80052b6:	464b      	mov	r3, r9
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	415b      	adcs	r3, r3
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c4:	4641      	mov	r1, r8
 80052c6:	1851      	adds	r1, r2, r1
 80052c8:	6039      	str	r1, [r7, #0]
 80052ca:	4649      	mov	r1, r9
 80052cc:	414b      	adcs	r3, r1
 80052ce:	607b      	str	r3, [r7, #4]
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052dc:	4659      	mov	r1, fp
 80052de:	00cb      	lsls	r3, r1, #3
 80052e0:	4651      	mov	r1, sl
 80052e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e6:	4651      	mov	r1, sl
 80052e8:	00ca      	lsls	r2, r1, #3
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	4642      	mov	r2, r8
 80052f2:	189b      	adds	r3, r3, r2
 80052f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052f6:	464b      	mov	r3, r9
 80052f8:	460a      	mov	r2, r1
 80052fa:	eb42 0303 	adc.w	r3, r2, r3
 80052fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	663b      	str	r3, [r7, #96]	@ 0x60
 800530a:	667a      	str	r2, [r7, #100]	@ 0x64
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005318:	4649      	mov	r1, r9
 800531a:	008b      	lsls	r3, r1, #2
 800531c:	4641      	mov	r1, r8
 800531e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005322:	4641      	mov	r1, r8
 8005324:	008a      	lsls	r2, r1, #2
 8005326:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800532a:	f7fa ff59 	bl	80001e0 <__aeabi_uldivmod>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4b0d      	ldr	r3, [pc, #52]	@ (8005368 <UART_SetConfig+0x4e4>)
 8005334:	fba3 1302 	umull	r1, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	2164      	movs	r1, #100	@ 0x64
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	3332      	adds	r3, #50	@ 0x32
 8005346:	4a08      	ldr	r2, [pc, #32]	@ (8005368 <UART_SetConfig+0x4e4>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	f003 020f 	and.w	r2, r3, #15
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4422      	add	r2, r4
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005362:	46bd      	mov	sp, r7
 8005364:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005368:	51eb851f 	.word	0x51eb851f

0800536c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800536c:	b084      	sub	sp, #16
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	f107 001c 	add.w	r0, r7, #28
 800537a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800537e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005382:	2b01      	cmp	r3, #1
 8005384:	d123      	bne.n	80053ce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800539a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 fae8 	bl	8006998 <USB_CoreReset>
 80053c8:	4603      	mov	r3, r0
 80053ca:	73fb      	strb	r3, [r7, #15]
 80053cc:	e01b      	b.n	8005406 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f001 fadc 	bl	8006998 <USB_CoreReset>
 80053e0:	4603      	mov	r3, r0
 80053e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80053f8:	e005      	b.n	8005406 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005406:	7fbb      	ldrb	r3, [r7, #30]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10b      	bne.n	8005424 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f043 0206 	orr.w	r2, r3, #6
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005430:	b004      	add	sp, #16
 8005432:	4770      	bx	lr

08005434 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d165      	bne.n	8005514 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a41      	ldr	r2, [pc, #260]	@ (8005550 <USB_SetTurnaroundTime+0x11c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d906      	bls.n	800545e <USB_SetTurnaroundTime+0x2a>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a40      	ldr	r2, [pc, #256]	@ (8005554 <USB_SetTurnaroundTime+0x120>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d202      	bcs.n	800545e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005458:	230f      	movs	r3, #15
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e062      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a3c      	ldr	r2, [pc, #240]	@ (8005554 <USB_SetTurnaroundTime+0x120>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d306      	bcc.n	8005474 <USB_SetTurnaroundTime+0x40>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a3b      	ldr	r2, [pc, #236]	@ (8005558 <USB_SetTurnaroundTime+0x124>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d202      	bcs.n	8005474 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800546e:	230e      	movs	r3, #14
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e057      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a38      	ldr	r2, [pc, #224]	@ (8005558 <USB_SetTurnaroundTime+0x124>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d306      	bcc.n	800548a <USB_SetTurnaroundTime+0x56>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a37      	ldr	r2, [pc, #220]	@ (800555c <USB_SetTurnaroundTime+0x128>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d202      	bcs.n	800548a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005484:	230d      	movs	r3, #13
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e04c      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a33      	ldr	r2, [pc, #204]	@ (800555c <USB_SetTurnaroundTime+0x128>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d306      	bcc.n	80054a0 <USB_SetTurnaroundTime+0x6c>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a32      	ldr	r2, [pc, #200]	@ (8005560 <USB_SetTurnaroundTime+0x12c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d802      	bhi.n	80054a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800549a:	230c      	movs	r3, #12
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e041      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005560 <USB_SetTurnaroundTime+0x12c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d906      	bls.n	80054b6 <USB_SetTurnaroundTime+0x82>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005564 <USB_SetTurnaroundTime+0x130>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d802      	bhi.n	80054b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054b0:	230b      	movs	r3, #11
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e036      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005564 <USB_SetTurnaroundTime+0x130>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d906      	bls.n	80054cc <USB_SetTurnaroundTime+0x98>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4a29      	ldr	r2, [pc, #164]	@ (8005568 <USB_SetTurnaroundTime+0x134>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d802      	bhi.n	80054cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054c6:	230a      	movs	r3, #10
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e02b      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4a26      	ldr	r2, [pc, #152]	@ (8005568 <USB_SetTurnaroundTime+0x134>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d906      	bls.n	80054e2 <USB_SetTurnaroundTime+0xae>
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4a25      	ldr	r2, [pc, #148]	@ (800556c <USB_SetTurnaroundTime+0x138>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d202      	bcs.n	80054e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054dc:	2309      	movs	r3, #9
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e020      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4a21      	ldr	r2, [pc, #132]	@ (800556c <USB_SetTurnaroundTime+0x138>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d306      	bcc.n	80054f8 <USB_SetTurnaroundTime+0xc4>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	4a20      	ldr	r2, [pc, #128]	@ (8005570 <USB_SetTurnaroundTime+0x13c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d802      	bhi.n	80054f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054f2:	2308      	movs	r3, #8
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e015      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005570 <USB_SetTurnaroundTime+0x13c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d906      	bls.n	800550e <USB_SetTurnaroundTime+0xda>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4a1c      	ldr	r2, [pc, #112]	@ (8005574 <USB_SetTurnaroundTime+0x140>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d202      	bcs.n	800550e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005508:	2307      	movs	r3, #7
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e00a      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800550e:	2306      	movs	r3, #6
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e007      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800551a:	2309      	movs	r3, #9
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e001      	b.n	8005524 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005520:	2309      	movs	r3, #9
 8005522:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	029b      	lsls	r3, r3, #10
 8005538:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800553c:	431a      	orrs	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	00d8acbf 	.word	0x00d8acbf
 8005554:	00e4e1c0 	.word	0x00e4e1c0
 8005558:	00f42400 	.word	0x00f42400
 800555c:	01067380 	.word	0x01067380
 8005560:	011a499f 	.word	0x011a499f
 8005564:	01312cff 	.word	0x01312cff
 8005568:	014ca43f 	.word	0x014ca43f
 800556c:	016e3600 	.word	0x016e3600
 8005570:	01a6ab1f 	.word	0x01a6ab1f
 8005574:	01e84800 	.word	0x01e84800

08005578 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f043 0201 	orr.w	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f023 0201 	bic.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d115      	bne.n	800560a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055ea:	200a      	movs	r0, #10
 80055ec:	f7fb fff4 	bl	80015d8 <HAL_Delay>
      ms += 10U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	330a      	adds	r3, #10
 80055f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 f93f 	bl	800687a <USB_GetMode>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d01e      	beq.n	8005640 <USB_SetCurrentMode+0x84>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2bc7      	cmp	r3, #199	@ 0xc7
 8005606:	d9f0      	bls.n	80055ea <USB_SetCurrentMode+0x2e>
 8005608:	e01a      	b.n	8005640 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d115      	bne.n	800563c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800561c:	200a      	movs	r0, #10
 800561e:	f7fb ffdb 	bl	80015d8 <HAL_Delay>
      ms += 10U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	330a      	adds	r3, #10
 8005626:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 f926 	bl	800687a <USB_GetMode>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <USB_SetCurrentMode+0x84>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2bc7      	cmp	r3, #199	@ 0xc7
 8005638:	d9f0      	bls.n	800561c <USB_SetCurrentMode+0x60>
 800563a:	e001      	b.n	8005640 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e005      	b.n	800564c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2bc8      	cmp	r3, #200	@ 0xc8
 8005644:	d101      	bne.n	800564a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005654:	b084      	sub	sp, #16
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	e009      	b.n	8005688 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3340      	adds	r3, #64	@ 0x40
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	2200      	movs	r2, #0
 8005680:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	3301      	adds	r3, #1
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b0e      	cmp	r3, #14
 800568c:	d9f2      	bls.n	8005674 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800568e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005692:	2b00      	cmp	r3, #0
 8005694:	d11c      	bne.n	80056d0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80056ce:	e00b      	b.n	80056e8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056ee:	461a      	mov	r2, r3
 80056f0:	2300      	movs	r3, #0
 80056f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10d      	bne.n	8005718 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005704:	2100      	movs	r1, #0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f968 	bl	80059dc <USB_SetDevSpeed>
 800570c:	e008      	b.n	8005720 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800570e:	2101      	movs	r1, #1
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f963 	bl	80059dc <USB_SetDevSpeed>
 8005716:	e003      	b.n	8005720 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005718:	2103      	movs	r1, #3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f95e 	bl	80059dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005720:	2110      	movs	r1, #16
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f8fa 	bl	800591c <USB_FlushTxFifo>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f924 	bl	8005980 <USB_FlushRxFifo>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005748:	461a      	mov	r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005754:	461a      	mov	r2, r3
 8005756:	2300      	movs	r3, #0
 8005758:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005760:	461a      	mov	r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	e043      	b.n	80057f4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800577e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005782:	d118      	bne.n	80057b6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005796:	461a      	mov	r2, r3
 8005798:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e013      	b.n	80057c8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ac:	461a      	mov	r2, r3
 80057ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e008      	b.n	80057c8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c2:	461a      	mov	r2, r3
 80057c4:	2300      	movs	r3, #0
 80057c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d4:	461a      	mov	r2, r3
 80057d6:	2300      	movs	r3, #0
 80057d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e6:	461a      	mov	r2, r3
 80057e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3301      	adds	r3, #1
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057f8:	461a      	mov	r2, r3
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d3b5      	bcc.n	800576c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005800:	2300      	movs	r3, #0
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	e043      	b.n	800588e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800581c:	d118      	bne.n	8005850 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005830:	461a      	mov	r2, r3
 8005832:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e013      	b.n	8005862 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005846:	461a      	mov	r2, r3
 8005848:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	e008      	b.n	8005862 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585c:	461a      	mov	r2, r3
 800585e:	2300      	movs	r3, #0
 8005860:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586e:	461a      	mov	r2, r3
 8005870:	2300      	movs	r3, #0
 8005872:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005880:	461a      	mov	r2, r3
 8005882:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	3301      	adds	r3, #1
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005892:	461a      	mov	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4293      	cmp	r3, r2
 8005898:	d3b5      	bcc.n	8005806 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80058ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f043 0210 	orr.w	r2, r3, #16
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <USB_DevInit+0x2c4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f043 0208 	orr.w	r2, r3, #8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005900:	f043 0304 	orr.w	r3, r3, #4
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005914:	b004      	add	sp, #16
 8005916:	4770      	bx	lr
 8005918:	803c3800 	.word	0x803c3800

0800591c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005936:	d901      	bls.n	800593c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e01b      	b.n	8005974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	daf2      	bge.n	800592a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	019b      	lsls	r3, r3, #6
 800594c:	f043 0220 	orr.w	r2, r3, #32
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005960:	d901      	bls.n	8005966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e006      	b.n	8005974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b20      	cmp	r3, #32
 8005970:	d0f0      	beq.n	8005954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005998:	d901      	bls.n	800599e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e018      	b.n	80059d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	daf2      	bge.n	800598c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2210      	movs	r2, #16
 80059ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059bc:	d901      	bls.n	80059c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e006      	b.n	80059d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d0f0      	beq.n	80059b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059fc:	4313      	orrs	r3, r2
 80059fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b087      	sub	sp, #28
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0306 	and.w	r3, r3, #6
 8005a26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]
 8005a32:	e00a      	b.n	8005a4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d002      	beq.n	8005a40 <USB_GetDevSpeed+0x32>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d102      	bne.n	8005a46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a40:	2302      	movs	r3, #2
 8005a42:	75fb      	strb	r3, [r7, #23]
 8005a44:	e001      	b.n	8005a4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a46:	230f      	movs	r3, #15
 8005a48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d13a      	bne.n	8005aea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	68f9      	ldr	r1, [r7, #12]
 8005a8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d155      	bne.n	8005b58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ac8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	059b      	lsls	r3, r3, #22
 8005ace:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	0151      	lsls	r1, r2, #5
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	440a      	add	r2, r1
 8005ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e036      	b.n	8005b58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af0:	69da      	ldr	r2, [r3, #28]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	2101      	movs	r1, #1
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	68f9      	ldr	r1, [r7, #12]
 8005b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d11a      	bne.n	8005b58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	791b      	ldrb	r3, [r3, #4]
 8005b3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	4313      	orrs	r3, r2
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d161      	bne.n	8005c48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b9a:	d11f      	bne.n	8005bdc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2101      	movs	r1, #1
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	2101      	movs	r1, #1
 8005c12:	fa01 f303 	lsl.w	r3, r1, r3
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c20:	4013      	ands	r3, r2
 8005c22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	0159      	lsls	r1, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	440b      	add	r3, r1
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4b35      	ldr	r3, [pc, #212]	@ (8005d18 <USB_DeactivateEndpoint+0x1b0>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]
 8005c46:	e060      	b.n	8005d0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c5e:	d11f      	bne.n	8005ca0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	0151      	lsls	r1, r2, #5
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	440a      	add	r2, r1
 8005c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb6:	041b      	lsls	r3, r3, #16
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cda:	041b      	lsls	r3, r3, #16
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	0159      	lsls	r1, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	440b      	add	r3, r1
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d02:	4619      	mov	r1, r3
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <USB_DeactivateEndpoint+0x1b4>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	ec337800 	.word	0xec337800
 8005d1c:	eff37800 	.word	0xeff37800

08005d20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	@ 0x28
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	f040 817f 	bne.w	8006040 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d132      	bne.n	8005db0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d64:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d68:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	0151      	lsls	r1, r2, #5
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	440a      	add	r2, r1
 8005da4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005da8:	0cdb      	lsrs	r3, r3, #19
 8005daa:	04db      	lsls	r3, r3, #19
 8005dac:	6113      	str	r3, [r2, #16]
 8005dae:	e097      	b.n	8005ee0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dca:	0cdb      	lsrs	r3, r3, #19
 8005dcc:	04db      	lsls	r3, r3, #19
 8005dce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005dee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005df2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d11a      	bne.n	8005e30 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d903      	bls.n	8005e0e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e2c:	6113      	str	r3, [r2, #16]
 8005e2e:	e044      	b.n	8005eba <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	4413      	add	r3, r2
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	8afb      	ldrh	r3, [r7, #22]
 8005e56:	04d9      	lsls	r1, r3, #19
 8005e58:	4ba4      	ldr	r3, [pc, #656]	@ (80060ec <USB_EPStartXfer+0x3cc>)
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	0148      	lsls	r0, r1, #5
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	4401      	add	r1, r0
 8005e64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d122      	bne.n	8005eba <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e8e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005e92:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	8afb      	ldrh	r3, [r7, #22]
 8005ea4:	075b      	lsls	r3, r3, #29
 8005ea6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005eaa:	69b9      	ldr	r1, [r7, #24]
 8005eac:	0148      	lsls	r0, r1, #5
 8005eae:	69f9      	ldr	r1, [r7, #28]
 8005eb0:	4401      	add	r1, r0
 8005eb2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ed0:	69b9      	ldr	r1, [r7, #24]
 8005ed2:	0148      	lsls	r0, r1, #5
 8005ed4:	69f9      	ldr	r1, [r7, #28]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005edc:	4313      	orrs	r3, r2
 8005ede:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d14b      	bne.n	8005f7e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efa:	461a      	mov	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	791b      	ldrb	r3, [r3, #4]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d128      	bne.n	8005f5c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d110      	bne.n	8005f3c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e00f      	b.n	8005f5c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f5a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	e166      	b.n	800624c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f98:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f9c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	791b      	ldrb	r3, [r3, #4]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d015      	beq.n	8005fd2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 814e 	beq.w	800624c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc6:	69f9      	ldr	r1, [r7, #28]
 8005fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	634b      	str	r3, [r1, #52]	@ 0x34
 8005fd0:	e13c      	b.n	800624c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d110      	bne.n	8006004 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ffc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e00f      	b.n	8006024 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800601e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006022:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	68d9      	ldr	r1, [r3, #12]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781a      	ldrb	r2, [r3, #0]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	b298      	uxth	r0, r3
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	4603      	mov	r3, r0
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f9b9 	bl	80063b0 <USB_WritePacket>
 800603e:	e105      	b.n	800624c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800605a:	0cdb      	lsrs	r3, r3, #19
 800605c:	04db      	lsls	r3, r3, #19
 800605e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800607a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800607e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006082:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d132      	bne.n	80060f0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b8:	69b9      	ldr	r1, [r7, #24]
 80060ba:	0148      	lsls	r0, r1, #5
 80060bc:	69f9      	ldr	r1, [r7, #28]
 80060be:	4401      	add	r1, r0
 80060c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80060c4:	4313      	orrs	r3, r2
 80060c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	69fa      	ldr	r2, [r7, #28]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060e6:	6113      	str	r3, [r2, #16]
 80060e8:	e062      	b.n	80061b0 <USB_EPStartXfer+0x490>
 80060ea:	bf00      	nop
 80060ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d123      	bne.n	8006140 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610e:	69b9      	ldr	r1, [r7, #24]
 8006110:	0148      	lsls	r0, r1, #5
 8006112:	69f9      	ldr	r1, [r7, #28]
 8006114:	4401      	add	r1, r0
 8006116:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800611a:	4313      	orrs	r3, r2
 800611c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	440a      	add	r2, r1
 8006134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006138:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800613c:	6113      	str	r3, [r2, #16]
 800613e:	e037      	b.n	80061b0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	4413      	add	r3, r2
 800614a:	1e5a      	subs	r2, r3, #1
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	8afa      	ldrh	r2, [r7, #22]
 800615c:	fb03 f202 	mul.w	r2, r3, r2
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	8afb      	ldrh	r3, [r7, #22]
 8006174:	04d9      	lsls	r1, r3, #19
 8006176:	4b38      	ldr	r3, [pc, #224]	@ (8006258 <USB_EPStartXfer+0x538>)
 8006178:	400b      	ands	r3, r1
 800617a:	69b9      	ldr	r1, [r7, #24]
 800617c:	0148      	lsls	r0, r1, #5
 800617e:	69f9      	ldr	r1, [r7, #28]
 8006180:	4401      	add	r1, r0
 8006182:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006186:	4313      	orrs	r3, r2
 8006188:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a0:	69b9      	ldr	r1, [r7, #24]
 80061a2:	0148      	lsls	r0, r1, #5
 80061a4:	69f9      	ldr	r1, [r7, #28]
 80061a6:	4401      	add	r1, r0
 80061a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10d      	bne.n	80061d2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	68d9      	ldr	r1, [r3, #12]
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ce:	460a      	mov	r2, r1
 80061d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	791b      	ldrb	r3, [r3, #4]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d128      	bne.n	800622c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d110      	bne.n	800620c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006204:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e00f      	b.n	800622c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800622a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006246:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800624a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	1ff80000 	.word	0x1ff80000

0800625c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	785b      	ldrb	r3, [r3, #1]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d14a      	bne.n	8006310 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800628e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006292:	f040 8086 	bne.w	80063a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	7812      	ldrb	r2, [r2, #0]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d902      	bls.n	80062f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
          break;
 80062f2:	e056      	b.n	80063a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800630c:	d0e7      	beq.n	80062de <USB_EPStopXfer+0x82>
 800630e:	e048      	b.n	80063a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006328:	d13b      	bne.n	80063a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	7812      	ldrb	r2, [r2, #0]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	440a      	add	r2, r1
 8006344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006348:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800634c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	7812      	ldrb	r2, [r2, #0]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	440a      	add	r2, r1
 8006368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800636c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006370:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800637e:	4293      	cmp	r3, r2
 8006380:	d902      	bls.n	8006388 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
          break;
 8006386:	e00c      	b.n	80063a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800639c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063a0:	d0e7      	beq.n	8006372 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b089      	sub	sp, #36	@ 0x24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4611      	mov	r1, r2
 80063bc:	461a      	mov	r2, r3
 80063be:	460b      	mov	r3, r1
 80063c0:	71fb      	strb	r3, [r7, #7]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d123      	bne.n	800641e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063d6:	88bb      	ldrh	r3, [r7, #4]
 80063d8:	3303      	adds	r3, #3
 80063da:	089b      	lsrs	r3, r3, #2
 80063dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063de:	2300      	movs	r3, #0
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	e018      	b.n	8006416 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063e4:	79fb      	ldrb	r3, [r7, #7]
 80063e6:	031a      	lsls	r2, r3, #12
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063f0:	461a      	mov	r2, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	3301      	adds	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	3301      	adds	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3301      	adds	r3, #1
 800640e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	3301      	adds	r3, #1
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	429a      	cmp	r2, r3
 800641c:	d3e2      	bcc.n	80063e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3724      	adds	r7, #36	@ 0x24
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800642c:	b480      	push	{r7}
 800642e:	b08b      	sub	sp, #44	@ 0x2c
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	089b      	lsrs	r3, r3, #2
 8006446:	b29b      	uxth	r3, r3
 8006448:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	e014      	b.n	8006482 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	601a      	str	r2, [r3, #0]
    pDest++;
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	3301      	adds	r3, #1
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	3301      	adds	r3, #1
 800646e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	3301      	adds	r3, #1
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	3301      	adds	r3, #1
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	3301      	adds	r3, #1
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	429a      	cmp	r2, r3
 8006488:	d3e6      	bcc.n	8006458 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800648a:	8bfb      	ldrh	r3, [r7, #30]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01e      	beq.n	80064ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800649a:	461a      	mov	r2, r3
 800649c:	f107 0310 	add.w	r3, r7, #16
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	701a      	strb	r2, [r3, #0]
      i++;
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	3301      	adds	r3, #1
 80064ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	3301      	adds	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80064c2:	8bfb      	ldrh	r3, [r7, #30]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064c8:	8bfb      	ldrh	r3, [r7, #30]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1ea      	bne.n	80064a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	372c      	adds	r7, #44	@ 0x2c
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d12c      	bne.n	8006552 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	db12      	blt.n	8006530 <USB_EPSetStall+0x54>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00f      	beq.n	8006530 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800652a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800652e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	440a      	add	r2, r1
 8006546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800654a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	e02b      	b.n	80065aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	db12      	blt.n	800658a <USB_EPSetStall+0xae>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00f      	beq.n	800658a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006584:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006588:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d128      	bne.n	8006626 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	791b      	ldrb	r3, [r3, #4]
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d003      	beq.n	8006604 <USB_EPClearStall+0x4c>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	791b      	ldrb	r3, [r3, #4]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d138      	bne.n	8006676 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e027      	b.n	8006676 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	440a      	add	r2, r1
 800663c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006640:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006644:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	791b      	ldrb	r3, [r3, #4]
 800664a:	2b03      	cmp	r3, #3
 800664c:	d003      	beq.n	8006656 <USB_EPClearStall+0x9e>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	791b      	ldrb	r3, [r3, #4]
 8006652:	2b02      	cmp	r3, #2
 8006654:	d10f      	bne.n	8006676 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	0151      	lsls	r1, r2, #5
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	440a      	add	r2, r1
 800666c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006674:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80066a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80066b8:	68f9      	ldr	r1, [r7, #12]
 80066ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066fe:	f023 0302 	bic.w	r3, r3, #2
 8006702:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800672c:	f023 0303 	bic.w	r3, r3, #3
 8006730:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006740:	f043 0302 	orr.w	r3, r3, #2
 8006744:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4013      	ands	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800676c:	68fb      	ldr	r3, [r7, #12]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	4013      	ands	r3, r2
 800679c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	0c1b      	lsrs	r3, r3, #16
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	4013      	ands	r3, r2
 80067d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	b29b      	uxth	r3, r3
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4013      	ands	r3, r2
 800680e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006810:	68bb      	ldr	r3, [r7, #8]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800681e:	b480      	push	{r7}
 8006820:	b087      	sub	sp, #28
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006840:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	fa22 f303 	lsr.w	r3, r2, r3
 800684e:	01db      	lsls	r3, r3, #7
 8006850:	b2db      	uxtb	r3, r3
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4013      	ands	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800686c:	68bb      	ldr	r3, [r7, #8]
}
 800686e:	4618      	mov	r0, r3
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f003 0301 	and.w	r3, r3, #1
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80068b4:	f023 0307 	bic.w	r3, r3, #7
 80068b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	460b      	mov	r3, r1
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	333c      	adds	r3, #60	@ 0x3c
 80068f2:	3304      	adds	r3, #4
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4a26      	ldr	r2, [pc, #152]	@ (8006994 <USB_EP0_OutStart+0xb8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d90a      	bls.n	8006916 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800690c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006910:	d101      	bne.n	8006916 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e037      	b.n	8006986 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691c:	461a      	mov	r2, r3
 800691e:	2300      	movs	r3, #0
 8006920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006930:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006944:	f043 0318 	orr.w	r3, r3, #24
 8006948:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006958:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800695c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800695e:	7afb      	ldrb	r3, [r7, #11]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d10f      	bne.n	8006984 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800697e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006982:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	4f54300a 	.word	0x4f54300a

08006998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	3301      	adds	r3, #1
 80069a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069b0:	d901      	bls.n	80069b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e01b      	b.n	80069ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	daf2      	bge.n	80069a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f043 0201 	orr.w	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069da:	d901      	bls.n	80069e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e006      	b.n	80069ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d0f0      	beq.n	80069ce <USB_CoreReset+0x36>

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f103 0208 	add.w	r2, r3, #8
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a12:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f103 0208 	add.w	r2, r3, #8
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f103 0208 	add.w	r2, r3, #8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6a:	d103      	bne.n	8006a74 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e00c      	b.n	8006a8e <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3308      	adds	r3, #8
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	e002      	b.n	8006a82 <vListInsert+0x2e>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d2f6      	bcs.n	8006a7c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6892      	ldr	r2, [r2, #8]
 8006adc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6852      	ldr	r2, [r2, #4]
 8006ae6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d103      	bne.n	8006afa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	1e5a      	subs	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
	...

08006b1c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8006b26:	2301      	movs	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d05d      	beq.n	8006bf0 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d059      	beq.n	8006bf0 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b44:	2100      	movs	r1, #0
 8006b46:	fba3 2302 	umull	r2, r3, r3, r2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d000      	beq.n	8006b50 <xQueueGenericReset+0x34>
 8006b4e:	2101      	movs	r1, #1
 8006b50:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d14c      	bne.n	8006bf0 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8006b56:	f002 fa77 	bl	8009048 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	441a      	add	r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b86:	3b01      	subs	r3, #1
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	441a      	add	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	22ff      	movs	r2, #255	@ 0xff
 8006b9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	22ff      	movs	r2, #255	@ 0xff
 8006ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d114      	bne.n	8006bd6 <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01a      	beq.n	8006bea <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	3310      	adds	r3, #16
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f995 	bl	8007ee8 <xTaskRemoveFromEventList>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d012      	beq.n	8006bea <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c00 <xQueueGenericReset+0xe4>)
 8006bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	e009      	b.n	8006bea <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	3310      	adds	r3, #16
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff ff0d 	bl	80069fa <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3324      	adds	r3, #36	@ 0x24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff ff08 	bl	80069fa <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8006bea:	f002 fa47 	bl	800907c <vPortExitCritical>
 8006bee:	e001      	b.n	8006bf4 <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	e000ed04 	.word	0xe000ed04

08006c04 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	@ 0x28
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d02d      	beq.n	8006c78 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	fba3 2302 	umull	r2, r3, r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d000      	beq.n	8006c2c <xQueueGenericCreate+0x28>
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d122      	bne.n	8006c78 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8006c3a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8006c3e:	d81b      	bhi.n	8006c78 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	3350      	adds	r3, #80	@ 0x50
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f002 faca 	bl	80091e8 <pvPortMalloc>
 8006c54:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00d      	beq.n	8006c78 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3350      	adds	r3, #80	@ 0x50
 8006c64:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c66:	79fa      	ldrb	r2, [r7, #7]
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f805 	bl	8006c82 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006c78:	69fb      	ldr	r3, [r7, #28]
    }
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	60f8      	str	r0, [r7, #12]
 8006c8a:	60b9      	str	r1, [r7, #8]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d103      	bne.n	8006c9e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e002      	b.n	8006ca4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	69b8      	ldr	r0, [r7, #24]
 8006cb4:	f7ff ff32 	bl	8006b1c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	78fa      	ldrb	r2, [r7, #3]
 8006cbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00e      	beq.n	8006cf4 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ce8:	2300      	movs	r3, #0
 8006cea:	2200      	movs	r2, #0
 8006cec:	2100      	movs	r1, #0
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f81c 	bl	8006d2c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4603      	mov	r3, r0
 8006d04:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d06:	2301      	movs	r3, #1
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d0e:	79fb      	ldrb	r3, [r7, #7]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6939      	ldr	r1, [r7, #16]
 8006d14:	6978      	ldr	r0, [r7, #20]
 8006d16:	f7ff ff75 	bl	8006c04 <xQueueGenericCreate>
 8006d1a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff ffd3 	bl	8006cc8 <prvInitialiseMutex>

        return xNewQueue;
 8006d22:	68fb      	ldr	r3, [r7, #12]
    }
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	@ 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006d42:	f002 f981 	bl	8009048 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <xQueueGenericSend+0x2c>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d129      	bne.n	8006dac <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	6a38      	ldr	r0, [r7, #32]
 8006d5e:	f000 fadc 	bl	800731a <prvCopyDataToQueue>
 8006d62:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d010      	beq.n	8006d8e <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	3324      	adds	r3, #36	@ 0x24
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 f8b9 	bl	8007ee8 <xTaskRemoveFromEventList>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d013      	beq.n	8006da4 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8006e7c <xQueueGenericSend+0x150>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	e00a      	b.n	8006da4 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8006d94:	4b39      	ldr	r3, [pc, #228]	@ (8006e7c <xQueueGenericSend+0x150>)
 8006d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006da4:	f002 f96a 	bl	800907c <vPortExitCritical>
                return pdPASS;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e063      	b.n	8006e74 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006db2:	f002 f963 	bl	800907c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e05c      	b.n	8006e74 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d106      	bne.n	8006dce <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 f957 	bl	8008078 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006dce:	f002 f955 	bl	800907c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006dd2:	f000 fdd9 	bl	8007988 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006dd6:	f002 f937 	bl	8009048 <vPortEnterCritical>
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006de0:	b25b      	sxtb	r3, r3
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d103      	bne.n	8006df0 <xQueueGenericSend+0xc4>
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006df6:	b25b      	sxtb	r3, r3
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d103      	bne.n	8006e06 <xQueueGenericSend+0xda>
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e06:	f002 f939 	bl	800907c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e0a:	1d3a      	adds	r2, r7, #4
 8006e0c:	f107 0314 	add.w	r3, r7, #20
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 f946 	bl	80080a4 <xTaskCheckForTimeOut>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d124      	bne.n	8006e68 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e1e:	6a38      	ldr	r0, [r7, #32]
 8006e20:	f000 fb73 	bl	800750a <prvIsQueueFull>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d018      	beq.n	8006e5c <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	3310      	adds	r3, #16
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 f80a 	bl	8007e4c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006e38:	6a38      	ldr	r0, [r7, #32]
 8006e3a:	f000 fafe 	bl	800743a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006e3e:	f000 fdb1 	bl	80079a4 <xTaskResumeAll>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f47f af7c 	bne.w	8006d42 <xQueueGenericSend+0x16>
                {
                    portYIELD_WITHIN_API();
 8006e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e7c <xQueueGenericSend+0x150>)
 8006e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	e772      	b.n	8006d42 <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006e5c:	6a38      	ldr	r0, [r7, #32]
 8006e5e:	f000 faec 	bl	800743a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006e62:	f000 fd9f 	bl	80079a4 <xTaskResumeAll>
 8006e66:	e76c      	b.n	8006d42 <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006e68:	6a38      	ldr	r0, [r7, #32]
 8006e6a:	f000 fae6 	bl	800743a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006e6e:	f000 fd99 	bl	80079a4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006e72:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3728      	adds	r7, #40	@ 0x28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08e      	sub	sp, #56	@ 0x38
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	633b      	str	r3, [r7, #48]	@ 0x30
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e92:	f002 f993 	bl	80091bc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006e96:	f3ef 8211 	mrs	r2, BASEPRI
 8006e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	61fa      	str	r2, [r7, #28]
 8006eac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006eae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d302      	bcc.n	8006ec4 <xQueueGenericSendFromISR+0x44>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d137      	bne.n	8006f34 <xQueueGenericSendFromISR+0xb4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eda:	f000 fa1e 	bl	800731a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006ede:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d112      	bne.n	8006f0e <xQueueGenericSendFromISR+0x8e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01e      	beq.n	8006f2e <xQueueGenericSendFromISR+0xae>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef2:	3324      	adds	r3, #36	@ 0x24
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fff7 	bl	8007ee8 <xTaskRemoveFromEventList>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d016      	beq.n	8006f2e <xQueueGenericSendFromISR+0xae>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d013      	beq.n	8006f2e <xQueueGenericSendFromISR+0xae>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	e00f      	b.n	8006f2e <xQueueGenericSendFromISR+0xae>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8006f0e:	f000 fe45 	bl	8007b9c <uxTaskGetNumberOfTasks>
 8006f12:	6238      	str	r0, [r7, #32]
 8006f14:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006f18:	6a3a      	ldr	r2, [r7, #32]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d907      	bls.n	8006f2e <xQueueGenericSendFromISR+0xae>
 8006f1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f22:	3301      	adds	r3, #1
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	b25a      	sxtb	r2, r3
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	637b      	str	r3, [r7, #52]	@ 0x34
        {
 8006f32:	e001      	b.n	8006f38 <xQueueGenericSendFromISR+0xb8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3a:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006f42:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3738      	adds	r7, #56	@ 0x38
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	@ 0x28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006f64:	f002 f870 	bl	8009048 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d01f      	beq.n	8006fb4 <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	6a38      	ldr	r0, [r7, #32]
 8006f78:	f000 fa39 	bl	80073ee <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	1e5a      	subs	r2, r3, #1
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00f      	beq.n	8006fac <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	3310      	adds	r3, #16
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 ffa9 	bl	8007ee8 <xTaskRemoveFromEventList>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8007090 <xQueueReceive+0x140>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006fac:	f002 f866 	bl	800907c <vPortExitCritical>
                return pdPASS;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e069      	b.n	8007088 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d103      	bne.n	8006fc2 <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006fba:	f002 f85f 	bl	800907c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e062      	b.n	8007088 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006fc8:	f107 0314 	add.w	r3, r7, #20
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 f853 	bl	8008078 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006fd6:	f002 f851 	bl	800907c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006fda:	f000 fcd5 	bl	8007988 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006fde:	f002 f833 	bl	8009048 <vPortEnterCritical>
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fe8:	b25b      	sxtb	r3, r3
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d103      	bne.n	8006ff8 <xQueueReceive+0xa8>
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ffe:	b25b      	sxtb	r3, r3
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d103      	bne.n	800700e <xQueueReceive+0xbe>
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800700e:	f002 f835 	bl	800907c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007012:	1d3a      	adds	r2, r7, #4
 8007014:	f107 0314 	add.w	r3, r7, #20
 8007018:	4611      	mov	r1, r2
 800701a:	4618      	mov	r0, r3
 800701c:	f001 f842 	bl	80080a4 <xTaskCheckForTimeOut>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d123      	bne.n	800706e <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007026:	6a38      	ldr	r0, [r7, #32]
 8007028:	f000 fa59 	bl	80074de <prvIsQueueEmpty>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d017      	beq.n	8007062 <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	3324      	adds	r3, #36	@ 0x24
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f000 ff06 	bl	8007e4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007040:	6a38      	ldr	r0, [r7, #32]
 8007042:	f000 f9fa 	bl	800743a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007046:	f000 fcad 	bl	80079a4 <xTaskResumeAll>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d189      	bne.n	8006f64 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8007050:	4b0f      	ldr	r3, [pc, #60]	@ (8007090 <xQueueReceive+0x140>)
 8007052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	e780      	b.n	8006f64 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8007062:	6a38      	ldr	r0, [r7, #32]
 8007064:	f000 f9e9 	bl	800743a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007068:	f000 fc9c 	bl	80079a4 <xTaskResumeAll>
 800706c:	e77a      	b.n	8006f64 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800706e:	6a38      	ldr	r0, [r7, #32]
 8007070:	f000 f9e3 	bl	800743a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007074:	f000 fc96 	bl	80079a4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007078:	6a38      	ldr	r0, [r7, #32]
 800707a:	f000 fa30 	bl	80074de <prvIsQueueEmpty>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	f43f af6f 	beq.w	8006f64 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007086:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007088:	4618      	mov	r0, r3
 800708a:	3728      	adds	r7, #40	@ 0x28
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	e000ed04 	.word	0xe000ed04

08007094 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08a      	sub	sp, #40	@ 0x28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	623b      	str	r3, [r7, #32]
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80070aa:	f001 ffcd 	bl	8009048 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b2:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d024      	beq.n	8007104 <xQueueSemaphoreTake+0x70>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	1e5a      	subs	r2, r3, #1
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <xQueueSemaphoreTake+0x40>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80070ca:	f001 faa9 	bl	8008620 <pvTaskIncrementMutexHeldCount>
 80070ce:	4602      	mov	r2, r0
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00f      	beq.n	80070fc <xQueueSemaphoreTake+0x68>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	3310      	adds	r3, #16
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 ff01 	bl	8007ee8 <xTaskRemoveFromEventList>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <xQueueSemaphoreTake+0x68>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80070ec:	4b4c      	ldr	r3, [pc, #304]	@ (8007220 <xQueueSemaphoreTake+0x18c>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80070fc:	f001 ffbe 	bl	800907c <vPortExitCritical>
                return pdPASS;
 8007100:	2301      	movs	r3, #1
 8007102:	e089      	b.n	8007218 <xQueueSemaphoreTake+0x184>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <xQueueSemaphoreTake+0x7e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800710a:	f001 ffb7 	bl	800907c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800710e:	2300      	movs	r3, #0
 8007110:	e082      	b.n	8007218 <xQueueSemaphoreTake+0x184>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <xQueueSemaphoreTake+0x92>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8007118:	f107 030c 	add.w	r3, r7, #12
 800711c:	4618      	mov	r0, r3
 800711e:	f000 ffab 	bl	8008078 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007122:	2301      	movs	r3, #1
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8007126:	f001 ffa9 	bl	800907c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800712a:	f000 fc2d 	bl	8007988 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800712e:	f001 ff8b 	bl	8009048 <vPortEnterCritical>
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007138:	b25b      	sxtb	r3, r3
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713e:	d103      	bne.n	8007148 <xQueueSemaphoreTake+0xb4>
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800714e:	b25b      	sxtb	r3, r3
 8007150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007154:	d103      	bne.n	800715e <xQueueSemaphoreTake+0xca>
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800715e:	f001 ff8d 	bl	800907c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007162:	463a      	mov	r2, r7
 8007164:	f107 030c 	add.w	r3, r7, #12
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f000 ff9a 	bl	80080a4 <xTaskCheckForTimeOut>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d132      	bne.n	80071dc <xQueueSemaphoreTake+0x148>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007176:	69f8      	ldr	r0, [r7, #28]
 8007178:	f000 f9b1 	bl	80074de <prvIsQueueEmpty>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d026      	beq.n	80071d0 <xQueueSemaphoreTake+0x13c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <xQueueSemaphoreTake+0x10a>
                    {
                        taskENTER_CRITICAL();
 800718a:	f001 ff5d 	bl	8009048 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4618      	mov	r0, r3
 8007194:	f001 f88e 	bl	80082b4 <xTaskPriorityInherit>
 8007198:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800719a:	f001 ff6f 	bl	800907c <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	3324      	adds	r3, #36	@ 0x24
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4611      	mov	r1, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fe50 	bl	8007e4c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80071ac:	69f8      	ldr	r0, [r7, #28]
 80071ae:	f000 f944 	bl	800743a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80071b2:	f000 fbf7 	bl	80079a4 <xTaskResumeAll>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f47f af76 	bne.w	80070aa <xQueueSemaphoreTake+0x16>
                {
                    portYIELD_WITHIN_API();
 80071be:	4b18      	ldr	r3, [pc, #96]	@ (8007220 <xQueueSemaphoreTake+0x18c>)
 80071c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	e76c      	b.n	80070aa <xQueueSemaphoreTake+0x16>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80071d0:	69f8      	ldr	r0, [r7, #28]
 80071d2:	f000 f932 	bl	800743a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80071d6:	f000 fbe5 	bl	80079a4 <xTaskResumeAll>
 80071da:	e766      	b.n	80070aa <xQueueSemaphoreTake+0x16>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80071dc:	69f8      	ldr	r0, [r7, #28]
 80071de:	f000 f92c 	bl	800743a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80071e2:	f000 fbdf 	bl	80079a4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071e6:	69f8      	ldr	r0, [r7, #28]
 80071e8:	f000 f979 	bl	80074de <prvIsQueueEmpty>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f43f af5b 	beq.w	80070aa <xQueueSemaphoreTake+0x16>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <xQueueSemaphoreTake+0x182>
                    {
                        taskENTER_CRITICAL();
 80071fa:	f001 ff25 	bl	8009048 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80071fe:	69f8      	ldr	r0, [r7, #28]
 8007200:	f000 f873 	bl	80072ea <prvGetDisinheritPriorityAfterTimeout>
 8007204:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	6979      	ldr	r1, [r7, #20]
 800720c:	4618      	mov	r0, r3
 800720e:	f001 f971 	bl	80084f4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8007212:	f001 ff33 	bl	800907c <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007216:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007218:	4618      	mov	r0, r3
 800721a:	3728      	adds	r7, #40	@ 0x28
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08e      	sub	sp, #56	@ 0x38
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	633b      	str	r3, [r7, #48]	@ 0x30
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007234:	f001 ffc2 	bl	80091bc <vPortValidateInterruptPriority>
        __asm volatile
 8007238:	f3ef 8211 	mrs	r2, BASEPRI
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	61fa      	str	r2, [r7, #28]
 800724e:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8007250:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007252:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800725a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725c:	2b00      	cmp	r3, #0
 800725e:	d037      	beq.n	80072d0 <xQueueReceiveFromISR+0xac>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8007260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007262:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800726a:	68b9      	ldr	r1, [r7, #8]
 800726c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800726e:	f000 f8be 	bl	80073ee <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007274:	1e5a      	subs	r2, r3, #1
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800727a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	d112      	bne.n	80072aa <xQueueReceiveFromISR+0x86>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01e      	beq.n	80072ca <xQueueReceiveFromISR+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	3310      	adds	r3, #16
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fe29 	bl	8007ee8 <xTaskRemoveFromEventList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d016      	beq.n	80072ca <xQueueReceiveFromISR+0xa6>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d013      	beq.n	80072ca <xQueueReceiveFromISR+0xa6>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	e00f      	b.n	80072ca <xQueueReceiveFromISR+0xa6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80072aa:	f000 fc77 	bl	8007b9c <uxTaskGetNumberOfTasks>
 80072ae:	6238      	str	r0, [r7, #32]
 80072b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80072b4:	6a3a      	ldr	r2, [r7, #32]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d907      	bls.n	80072ca <xQueueReceiveFromISR+0xa6>
 80072ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072be:	3301      	adds	r3, #1
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	b25a      	sxtb	r2, r3
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 80072ca:	2301      	movs	r3, #1
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ce:	e001      	b.n	80072d4 <xQueueReceiveFromISR+0xb0>
        }
        else
        {
            xReturn = pdFAIL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f383 8811 	msr	BASEPRI, r3
    }
 80072de:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3738      	adds	r7, #56	@ 0x38
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d006      	beq.n	8007308 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f1c3 0305 	rsb	r3, r3, #5
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	e001      	b.n	800730c <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800730c:	68fb      	ldr	r3, [r7, #12]
    }
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b086      	sub	sp, #24
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10d      	bne.n	8007354 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d14d      	bne.n	80073dc <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	4618      	mov	r0, r3
 8007346:	f001 f853 	bl	80083f0 <xTaskPriorityDisinherit>
 800734a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	609a      	str	r2, [r3, #8]
 8007352:	e043      	b.n	80073dc <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d119      	bne.n	800738e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6858      	ldr	r0, [r3, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	461a      	mov	r2, r3
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	f005 f86a 	bl	800c43e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	441a      	add	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	429a      	cmp	r2, r3
 8007382:	d32b      	bcc.n	80073dc <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	605a      	str	r2, [r3, #4]
 800738c:	e026      	b.n	80073dc <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68d8      	ldr	r0, [r3, #12]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	461a      	mov	r2, r3
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	f005 f850 	bl	800c43e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	425b      	negs	r3, r3
 80073a8:	441a      	add	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d207      	bcs.n	80073ca <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	425b      	negs	r3, r3
 80073c4:	441a      	add	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d105      	bne.n	80073dc <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3b01      	subs	r3, #1
 80073da:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80073e4:	697b      	ldr	r3, [r7, #20]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d018      	beq.n	8007432 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007408:	441a      	add	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	429a      	cmp	r2, r3
 8007418:	d303      	bcc.n	8007422 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68d9      	ldr	r1, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	461a      	mov	r2, r3
 800742c:	6838      	ldr	r0, [r7, #0]
 800742e:	f005 f806 	bl	800c43e <memcpy>
    }
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8007442:	f001 fe01 	bl	8009048 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800744c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800744e:	e011      	b.n	8007474 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	2b00      	cmp	r3, #0
 8007456:	d012      	beq.n	800747e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3324      	adds	r3, #36	@ 0x24
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fd43 	bl	8007ee8 <xTaskRemoveFromEventList>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8007468:	f000 fe66 	bl	8008138 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	3b01      	subs	r3, #1
 8007470:	b2db      	uxtb	r3, r3
 8007472:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007478:	2b00      	cmp	r3, #0
 800747a:	dce9      	bgt.n	8007450 <prvUnlockQueue+0x16>
 800747c:	e000      	b.n	8007480 <prvUnlockQueue+0x46>
                    break;
 800747e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	22ff      	movs	r2, #255	@ 0xff
 8007484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8007488:	f001 fdf8 	bl	800907c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800748c:	f001 fddc 	bl	8009048 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007496:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007498:	e011      	b.n	80074be <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d012      	beq.n	80074c8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3310      	adds	r3, #16
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fd1e 	bl	8007ee8 <xTaskRemoveFromEventList>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80074b2:	f000 fe41 	bl	8008138 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80074be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	dce9      	bgt.n	800749a <prvUnlockQueue+0x60>
 80074c6:	e000      	b.n	80074ca <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80074c8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	22ff      	movs	r2, #255	@ 0xff
 80074ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80074d2:	f001 fdd3 	bl	800907c <vPortExitCritical>
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80074e6:	f001 fdaf 	bl	8009048 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80074f2:	2301      	movs	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	e001      	b.n	80074fc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80074fc:	f001 fdbe 	bl	800907c <vPortExitCritical>

    return xReturn;
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007512:	f001 fd99 	bl	8009048 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751e:	429a      	cmp	r2, r3
 8007520:	d102      	bne.n	8007528 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8007522:	2301      	movs	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	e001      	b.n	800752c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800752c:	f001 fda6 	bl	800907c <vPortExitCritical>

    return xReturn;
 8007530:	68fb      	ldr	r3, [r7, #12]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );

        if( pcQueueName != NULL )
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d024      	beq.n	800759a <vQueueAddToRegistry+0x5e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e01e      	b.n	8007594 <vQueueAddToRegistry+0x58>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8007556:	4a18      	ldr	r2, [pc, #96]	@ (80075b8 <vQueueAddToRegistry+0x7c>)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	429a      	cmp	r2, r3
 8007564:	d105      	bne.n	8007572 <vQueueAddToRegistry+0x36>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4a13      	ldr	r2, [pc, #76]	@ (80075b8 <vQueueAddToRegistry+0x7c>)
 800756c:	4413      	add	r3, r2
 800756e:	60bb      	str	r3, [r7, #8]
                    break;
 8007570:	e013      	b.n	800759a <vQueueAddToRegistry+0x5e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <vQueueAddToRegistry+0x52>
 8007578:	4a0f      	ldr	r2, [pc, #60]	@ (80075b8 <vQueueAddToRegistry+0x7c>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	4a0b      	ldr	r2, [pc, #44]	@ (80075b8 <vQueueAddToRegistry+0x7c>)
 800758a:	4413      	add	r3, r2
 800758c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b07      	cmp	r3, #7
 8007598:	d9dd      	bls.n	8007556 <vQueueAddToRegistry+0x1a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <vQueueAddToRegistry+0x70>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	20000390 	.word	0x20000390

080075bc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80075cc:	f001 fd3c 	bl	8009048 <vPortEnterCritical>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075d6:	b25b      	sxtb	r3, r3
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d103      	bne.n	80075e6 <vQueueWaitForMessageRestricted+0x2a>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075ec:	b25b      	sxtb	r3, r3
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d103      	bne.n	80075fc <vQueueWaitForMessageRestricted+0x40>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075fc:	f001 fd3e 	bl	800907c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3324      	adds	r3, #36	@ 0x24
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fc31 	bl	8007e78 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8007616:	6978      	ldr	r0, [r7, #20]
 8007618:	f7ff ff0f 	bl	800743a <prvUnlockQueue>
    }
 800761c:	bf00      	nop
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007624:	b580      	push	{r7, lr}
 8007626:	b08c      	sub	sp, #48	@ 0x30
 8007628:	af04      	add	r7, sp, #16
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	4613      	mov	r3, r2
 8007632:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4618      	mov	r0, r3
 800763a:	f001 fdd5 	bl	80091e8 <pvPortMalloc>
 800763e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d013      	beq.n	800766e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007646:	2058      	movs	r0, #88	@ 0x58
 8007648:	f001 fdce 	bl	80091e8 <pvPortMalloc>
 800764c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007654:	2258      	movs	r2, #88	@ 0x58
 8007656:	2100      	movs	r1, #0
 8007658:	69f8      	ldr	r0, [r7, #28]
 800765a:	f004 fe75 	bl	800c348 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	631a      	str	r2, [r3, #48]	@ 0x30
 8007664:	e005      	b.n	8007672 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8007666:	6978      	ldr	r0, [r7, #20]
 8007668:	f001 fe58 	bl	800931c <vPortFree>
 800766c:	e001      	b.n	8007672 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d013      	beq.n	80076a0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007678:	88fa      	ldrh	r2, [r7, #6]
 800767a:	2300      	movs	r3, #0
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	9302      	str	r3, [sp, #8]
 8007682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007684:	9301      	str	r3, [sp, #4]
 8007686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f80e 	bl	80076b0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007694:	69f8      	ldr	r0, [r7, #28]
 8007696:	f000 f87b 	bl	8007790 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800769a:	2301      	movs	r3, #1
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	e002      	b.n	80076a6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295
 80076a4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80076a6:	69bb      	ldr	r3, [r7, #24]
    }
 80076a8:	4618      	mov	r0, r3
 80076aa:	3720      	adds	r7, #32
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	461a      	mov	r2, r3
 80076c8:	21a5      	movs	r1, #165	@ 0xa5
 80076ca:	f004 fe3d 	bl	800c348 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076d8:	3b01      	subs	r3, #1
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f023 0307 	bic.w	r3, r3, #7
 80076e6:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01e      	beq.n	800772c <prvInitialiseNewTask+0x7c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	e012      	b.n	800771a <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	7819      	ldrb	r1, [r3, #0]
 80076fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	4413      	add	r3, r2
 8007702:	3334      	adds	r3, #52	@ 0x34
 8007704:	460a      	mov	r2, r1
 8007706:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d006      	beq.n	8007722 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	3301      	adds	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b09      	cmp	r3, #9
 800771e:	d9e9      	bls.n	80076f4 <prvInitialiseNewTask+0x44>
 8007720:	e000      	b.n	8007724 <prvInitialiseNewTask+0x74>
            {
                break;
 8007722:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	2b04      	cmp	r3, #4
 8007730:	d901      	bls.n	8007736 <prvInitialiseNewTask+0x86>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007732:	2304      	movs	r3, #4
 8007734:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007738:	6a3a      	ldr	r2, [r7, #32]
 800773a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff f977 	bl	8006a3a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	3318      	adds	r3, #24
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff f972 	bl	8006a3a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800775a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	f1c3 0205 	rsb	r2, r3, #5
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800776a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	6938      	ldr	r0, [r7, #16]
 8007772:	f001 fb87 	bl	8008e84 <pxPortInitialiseStack>
 8007776:	4602      	mov	r2, r0
 8007778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <prvInitialiseNewTask+0xd8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007784:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007786:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007788:	bf00      	nop
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007798:	f001 fc56 	bl	8009048 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800779c:	4b40      	ldr	r3, [pc, #256]	@ (80078a0 <prvAddNewTaskToReadyList+0x110>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3301      	adds	r3, #1
 80077a2:	4a3f      	ldr	r2, [pc, #252]	@ (80078a0 <prvAddNewTaskToReadyList+0x110>)
 80077a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80077a6:	4b3f      	ldr	r3, [pc, #252]	@ (80078a4 <prvAddNewTaskToReadyList+0x114>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80077ae:	4a3d      	ldr	r2, [pc, #244]	@ (80078a4 <prvAddNewTaskToReadyList+0x114>)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077b4:	4b3a      	ldr	r3, [pc, #232]	@ (80078a0 <prvAddNewTaskToReadyList+0x110>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d110      	bne.n	80077de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80077bc:	f000 fce0 	bl	8008180 <prvInitialiseTaskLists>
 80077c0:	e00d      	b.n	80077de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80077c2:	4b39      	ldr	r3, [pc, #228]	@ (80078a8 <prvAddNewTaskToReadyList+0x118>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ca:	4b36      	ldr	r3, [pc, #216]	@ (80078a4 <prvAddNewTaskToReadyList+0x114>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d802      	bhi.n	80077de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80077d8:	4a32      	ldr	r2, [pc, #200]	@ (80078a4 <prvAddNewTaskToReadyList+0x114>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80077de:	4b33      	ldr	r3, [pc, #204]	@ (80078ac <prvAddNewTaskToReadyList+0x11c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	4a31      	ldr	r2, [pc, #196]	@ (80078ac <prvAddNewTaskToReadyList+0x11c>)
 80077e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077e8:	4b30      	ldr	r3, [pc, #192]	@ (80078ac <prvAddNewTaskToReadyList+0x11c>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	2201      	movs	r2, #1
 80077f6:	409a      	lsls	r2, r3
 80077f8:	4b2d      	ldr	r3, [pc, #180]	@ (80078b0 <prvAddNewTaskToReadyList+0x120>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	4a2c      	ldr	r2, [pc, #176]	@ (80078b0 <prvAddNewTaskToReadyList+0x120>)
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007806:	492b      	ldr	r1, [pc, #172]	@ (80078b4 <prvAddNewTaskToReadyList+0x124>)
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	3304      	adds	r3, #4
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	609a      	str	r2, [r3, #8]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60da      	str	r2, [r3, #12]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	3204      	adds	r2, #4
 800782e:	605a      	str	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	609a      	str	r2, [r3, #8]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4a1b      	ldr	r2, [pc, #108]	@ (80078b4 <prvAddNewTaskToReadyList+0x124>)
 8007846:	441a      	add	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	615a      	str	r2, [r3, #20]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007850:	4918      	ldr	r1, [pc, #96]	@ (80078b4 <prvAddNewTaskToReadyList+0x124>)
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	1c59      	adds	r1, r3, #1
 8007860:	4814      	ldr	r0, [pc, #80]	@ (80078b4 <prvAddNewTaskToReadyList+0x124>)
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4403      	add	r3, r0
 800786c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800786e:	f001 fc05 	bl	800907c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007872:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <prvAddNewTaskToReadyList+0x118>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00e      	beq.n	8007898 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800787a:	4b0a      	ldr	r3, [pc, #40]	@ (80078a4 <prvAddNewTaskToReadyList+0x114>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007884:	429a      	cmp	r2, r3
 8007886:	d207      	bcs.n	8007898 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007888:	4b0b      	ldr	r3, [pc, #44]	@ (80078b8 <prvAddNewTaskToReadyList+0x128>)
 800788a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200004a8 	.word	0x200004a8
 80078a4:	200003d0 	.word	0x200003d0
 80078a8:	200004b4 	.word	0x200004b4
 80078ac:	200004c4 	.word	0x200004c4
 80078b0:	200004b0 	.word	0x200004b0
 80078b4:	200003d4 	.word	0x200003d4
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d008      	beq.n	80078e0 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 80078ce:	f000 f85b 	bl	8007988 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078d2:	2100      	movs	r1, #0
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 ffeb 	bl	80088b0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80078da:	f000 f863 	bl	80079a4 <xTaskResumeAll>
 80078de:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d107      	bne.n	80078f6 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 80078e6:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <vTaskDelay+0x44>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800790a:	4b18      	ldr	r3, [pc, #96]	@ (800796c <vTaskStartScheduler+0x68>)
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	2300      	movs	r3, #0
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	2282      	movs	r2, #130	@ 0x82
 8007916:	4916      	ldr	r1, [pc, #88]	@ (8007970 <vTaskStartScheduler+0x6c>)
 8007918:	4816      	ldr	r0, [pc, #88]	@ (8007974 <vTaskStartScheduler+0x70>)
 800791a:	f7ff fe83 	bl	8007624 <xTaskCreate>
 800791e:	6078      	str	r0, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d102      	bne.n	800792c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8007926:	f001 f843 	bl	80089b0 <xTimerCreateTimerTask>
 800792a:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d115      	bne.n	800795e <vTaskStartScheduler+0x5a>
        __asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	603b      	str	r3, [r7, #0]
    }
 8007944:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007946:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <vTaskStartScheduler+0x74>)
 8007948:	f04f 32ff 	mov.w	r2, #4294967295
 800794c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800794e:	4b0b      	ldr	r3, [pc, #44]	@ (800797c <vTaskStartScheduler+0x78>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007954:	4b0a      	ldr	r3, [pc, #40]	@ (8007980 <vTaskStartScheduler+0x7c>)
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800795a:	f001 fb0b 	bl	8008f74 <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800795e:	4b09      	ldr	r3, [pc, #36]	@ (8007984 <vTaskStartScheduler+0x80>)
 8007960:	681b      	ldr	r3, [r3, #0]
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	200004cc 	.word	0x200004cc
 8007970:	0800c95c 	.word	0x0800c95c
 8007974:	08008151 	.word	0x08008151
 8007978:	200004c8 	.word	0x200004c8
 800797c:	200004b4 	.word	0x200004b4
 8007980:	200004ac 	.word	0x200004ac
 8007984:	2000000c 	.word	0x2000000c

08007988 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800798c:	4b04      	ldr	r3, [pc, #16]	@ (80079a0 <vTaskSuspendAll+0x18>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	4a03      	ldr	r2, [pc, #12]	@ (80079a0 <vTaskSuspendAll+0x18>)
 8007994:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007996:	bf00      	nop
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	200004d0 	.word	0x200004d0

080079a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80079ae:	2300      	movs	r3, #0
 80079b0:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80079b2:	f001 fb49 	bl	8009048 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80079b6:	4b68      	ldr	r3, [pc, #416]	@ (8007b58 <xTaskResumeAll+0x1b4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4a66      	ldr	r2, [pc, #408]	@ (8007b58 <xTaskResumeAll+0x1b4>)
 80079be:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c0:	4b65      	ldr	r3, [pc, #404]	@ (8007b58 <xTaskResumeAll+0x1b4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 80c0 	bne.w	8007b4a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079ca:	4b64      	ldr	r3, [pc, #400]	@ (8007b5c <xTaskResumeAll+0x1b8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80bb 	beq.w	8007b4a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079d4:	e08a      	b.n	8007aec <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d6:	4b62      	ldr	r3, [pc, #392]	@ (8007b60 <xTaskResumeAll+0x1bc>)
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e2:	60bb      	str	r3, [r7, #8]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	6a12      	ldr	r2, [r2, #32]
 80079ec:	609a      	str	r2, [r3, #8]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	69d2      	ldr	r2, [r2, #28]
 80079f6:	605a      	str	r2, [r3, #4]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	3318      	adds	r3, #24
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d103      	bne.n	8007a0c <xTaskResumeAll+0x68>
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	6a1a      	ldr	r2, [r3, #32]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	605a      	str	r2, [r3, #4]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	1e5a      	subs	r2, r3, #1
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	607b      	str	r3, [r7, #4]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	68d2      	ldr	r2, [r2, #12]
 8007a2a:	609a      	str	r2, [r3, #8]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	6892      	ldr	r2, [r2, #8]
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d103      	bne.n	8007a4a <xTaskResumeAll+0xa6>
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	615a      	str	r2, [r3, #20]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	1e5a      	subs	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	2201      	movs	r2, #1
 8007a60:	409a      	lsls	r2, r3
 8007a62:	4b40      	ldr	r3, [pc, #256]	@ (8007b64 <xTaskResumeAll+0x1c0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	4a3e      	ldr	r2, [pc, #248]	@ (8007b64 <xTaskResumeAll+0x1c0>)
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a70:	493d      	ldr	r1, [pc, #244]	@ (8007b68 <xTaskResumeAll+0x1c4>)
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	609a      	str	r2, [r3, #8]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	60da      	str	r2, [r3, #12]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	3204      	adds	r2, #4
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	1d1a      	adds	r2, r3, #4
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	609a      	str	r2, [r3, #8]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4a2e      	ldr	r2, [pc, #184]	@ (8007b68 <xTaskResumeAll+0x1c4>)
 8007ab0:	441a      	add	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	615a      	str	r2, [r3, #20]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aba:	492b      	ldr	r1, [pc, #172]	@ (8007b68 <xTaskResumeAll+0x1c4>)
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	1c59      	adds	r1, r3, #1
 8007aca:	4827      	ldr	r0, [pc, #156]	@ (8007b68 <xTaskResumeAll+0x1c4>)
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4403      	add	r3, r0
 8007ad6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007adc:	4b23      	ldr	r3, [pc, #140]	@ (8007b6c <xTaskResumeAll+0x1c8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d302      	bcc.n	8007aec <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8007ae6:	4b22      	ldr	r3, [pc, #136]	@ (8007b70 <xTaskResumeAll+0x1cc>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aec:	4b1c      	ldr	r3, [pc, #112]	@ (8007b60 <xTaskResumeAll+0x1bc>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f af70 	bne.w	80079d6 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007afc:	f000 fbbe 	bl	800827c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b00:	4b1c      	ldr	r3, [pc, #112]	@ (8007b74 <xTaskResumeAll+0x1d0>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d010      	beq.n	8007b2e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007b0c:	f000 f852 	bl	8007bb4 <xTaskIncrementTick>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8007b16:	4b16      	ldr	r3, [pc, #88]	@ (8007b70 <xTaskResumeAll+0x1cc>)
 8007b18:	2201      	movs	r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f1      	bne.n	8007b0c <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8007b28:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <xTaskResumeAll+0x1d0>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007b2e:	4b10      	ldr	r3, [pc, #64]	@ (8007b70 <xTaskResumeAll+0x1cc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d009      	beq.n	8007b4a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007b36:	2301      	movs	r3, #1
 8007b38:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b78 <xTaskResumeAll+0x1d4>)
 8007b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007b4a:	f001 fa97 	bl	800907c <vPortExitCritical>

    return xAlreadyYielded;
 8007b4e:	693b      	ldr	r3, [r7, #16]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	200004d0 	.word	0x200004d0
 8007b5c:	200004a8 	.word	0x200004a8
 8007b60:	20000468 	.word	0x20000468
 8007b64:	200004b0 	.word	0x200004b0
 8007b68:	200003d4 	.word	0x200003d4
 8007b6c:	200003d0 	.word	0x200003d0
 8007b70:	200004bc 	.word	0x200004bc
 8007b74:	200004b8 	.word	0x200004b8
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8007b82:	4b05      	ldr	r3, [pc, #20]	@ (8007b98 <xTaskGetTickCount+0x1c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007b88:	687b      	ldr	r3, [r7, #4]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	200004ac 	.word	0x200004ac

08007b9c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8007ba0:	4b03      	ldr	r3, [pc, #12]	@ (8007bb0 <uxTaskGetNumberOfTasks+0x14>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	200004a8 	.word	0x200004a8

08007bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bbe:	4b75      	ldr	r3, [pc, #468]	@ (8007d94 <xTaskIncrementTick+0x1e0>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 80dc 	bne.w	8007d80 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bc8:	4b73      	ldr	r3, [pc, #460]	@ (8007d98 <xTaskIncrementTick+0x1e4>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007bd0:	4a71      	ldr	r2, [pc, #452]	@ (8007d98 <xTaskIncrementTick+0x1e4>)
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d110      	bne.n	8007bfe <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8007bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8007d9c <xTaskIncrementTick+0x1e8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	4b6f      	ldr	r3, [pc, #444]	@ (8007da0 <xTaskIncrementTick+0x1ec>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a6d      	ldr	r2, [pc, #436]	@ (8007d9c <xTaskIncrementTick+0x1e8>)
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	4a6d      	ldr	r2, [pc, #436]	@ (8007da0 <xTaskIncrementTick+0x1ec>)
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8007da4 <xTaskIncrementTick+0x1f0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8007da4 <xTaskIncrementTick+0x1f0>)
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	f000 fb3f 	bl	800827c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8007da8 <xTaskIncrementTick+0x1f4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	f0c0 80a6 	bcc.w	8007d56 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c0a:	4b64      	ldr	r3, [pc, #400]	@ (8007d9c <xTaskIncrementTick+0x1e8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d104      	bne.n	8007c1e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c14:	4b64      	ldr	r3, [pc, #400]	@ (8007da8 <xTaskIncrementTick+0x1f4>)
 8007c16:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1a:	601a      	str	r2, [r3, #0]
                    break;
 8007c1c:	e09b      	b.n	8007d56 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8007d9c <xTaskIncrementTick+0x1e8>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d203      	bcs.n	8007c3e <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007c36:	4a5c      	ldr	r2, [pc, #368]	@ (8007da8 <xTaskIncrementTick+0x1f4>)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007c3c:	e08b      	b.n	8007d56 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	60bb      	str	r3, [r7, #8]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	68d2      	ldr	r2, [r2, #12]
 8007c4c:	609a      	str	r2, [r3, #8]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	6892      	ldr	r2, [r2, #8]
 8007c56:	605a      	str	r2, [r3, #4]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d103      	bne.n	8007c6c <xTaskIncrementTick+0xb8>
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	605a      	str	r2, [r3, #4]
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	615a      	str	r2, [r3, #20]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	1e5a      	subs	r2, r3, #1
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01e      	beq.n	8007cc2 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c88:	607b      	str	r3, [r7, #4]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	6a12      	ldr	r2, [r2, #32]
 8007c92:	609a      	str	r2, [r3, #8]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	69d2      	ldr	r2, [r2, #28]
 8007c9c:	605a      	str	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	3318      	adds	r3, #24
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d103      	bne.n	8007cb2 <xTaskIncrementTick+0xfe>
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6a1a      	ldr	r2, [r3, #32]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	605a      	str	r2, [r3, #4]
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	1e5a      	subs	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	409a      	lsls	r2, r3
 8007cca:	4b38      	ldr	r3, [pc, #224]	@ (8007dac <xTaskIncrementTick+0x1f8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	4a36      	ldr	r2, [pc, #216]	@ (8007dac <xTaskIncrementTick+0x1f8>)
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd8:	4935      	ldr	r1, [pc, #212]	@ (8007db0 <xTaskIncrementTick+0x1fc>)
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	603b      	str	r3, [r7, #0]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	609a      	str	r2, [r3, #8]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	60da      	str	r2, [r3, #12]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	3204      	adds	r2, #4
 8007d00:	605a      	str	r2, [r3, #4]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1d1a      	adds	r2, r3, #4
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	609a      	str	r2, [r3, #8]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0e:	4613      	mov	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4413      	add	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4a26      	ldr	r2, [pc, #152]	@ (8007db0 <xTaskIncrementTick+0x1fc>)
 8007d18:	441a      	add	r2, r3
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	615a      	str	r2, [r3, #20]
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d22:	4923      	ldr	r1, [pc, #140]	@ (8007db0 <xTaskIncrementTick+0x1fc>)
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	1c59      	adds	r1, r3, #1
 8007d32:	481f      	ldr	r0, [pc, #124]	@ (8007db0 <xTaskIncrementTick+0x1fc>)
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4403      	add	r3, r0
 8007d3e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d44:	4b1b      	ldr	r3, [pc, #108]	@ (8007db4 <xTaskIncrementTick+0x200>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	f67f af5d 	bls.w	8007c0a <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d54:	e759      	b.n	8007c0a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d56:	4b17      	ldr	r3, [pc, #92]	@ (8007db4 <xTaskIncrementTick+0x200>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5c:	4914      	ldr	r1, [pc, #80]	@ (8007db0 <xTaskIncrementTick+0x1fc>)
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d901      	bls.n	8007d72 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007d72:	4b11      	ldr	r3, [pc, #68]	@ (8007db8 <xTaskIncrementTick+0x204>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d007      	beq.n	8007d8a <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	61fb      	str	r3, [r7, #28]
 8007d7e:	e004      	b.n	8007d8a <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007d80:	4b0e      	ldr	r3, [pc, #56]	@ (8007dbc <xTaskIncrementTick+0x208>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3301      	adds	r3, #1
 8007d86:	4a0d      	ldr	r2, [pc, #52]	@ (8007dbc <xTaskIncrementTick+0x208>)
 8007d88:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	200004d0 	.word	0x200004d0
 8007d98:	200004ac 	.word	0x200004ac
 8007d9c:	20000460 	.word	0x20000460
 8007da0:	20000464 	.word	0x20000464
 8007da4:	200004c0 	.word	0x200004c0
 8007da8:	200004c8 	.word	0x200004c8
 8007dac:	200004b0 	.word	0x200004b0
 8007db0:	200003d4 	.word	0x200003d4
 8007db4:	200003d0 	.word	0x200003d0
 8007db8:	200004bc 	.word	0x200004bc
 8007dbc:	200004b8 	.word	0x200004b8

08007dc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8007e38 <vTaskSwitchContext+0x78>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007dce:	4b1b      	ldr	r3, [pc, #108]	@ (8007e3c <vTaskSwitchContext+0x7c>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007dd4:	e02a      	b.n	8007e2c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8007dd6:	4b19      	ldr	r3, [pc, #100]	@ (8007e3c <vTaskSwitchContext+0x7c>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ddc:	4b18      	ldr	r3, [pc, #96]	@ (8007e40 <vTaskSwitchContext+0x80>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	fab3 f383 	clz	r3, r3
 8007de8:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	f1c3 031f 	rsb	r3, r3, #31
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4a11      	ldr	r2, [pc, #68]	@ (8007e44 <vTaskSwitchContext+0x84>)
 8007dfe:	4413      	add	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	605a      	str	r2, [r3, #4]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	3308      	adds	r3, #8
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d104      	bne.n	8007e22 <vTaskSwitchContext+0x62>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	4a07      	ldr	r2, [pc, #28]	@ (8007e48 <vTaskSwitchContext+0x88>)
 8007e2a:	6013      	str	r3, [r2, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	200004d0 	.word	0x200004d0
 8007e3c:	200004bc 	.word	0x200004bc
 8007e40:	200004b0 	.word	0x200004b0
 8007e44:	200003d4 	.word	0x200003d4
 8007e48:	200003d0 	.word	0x200003d0

08007e4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e56:	4b07      	ldr	r3, [pc, #28]	@ (8007e74 <vTaskPlaceOnEventList+0x28>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3318      	adds	r3, #24
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fe fdf8 	bl	8006a54 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e64:	2101      	movs	r1, #1
 8007e66:	6838      	ldr	r0, [r7, #0]
 8007e68:	f000 fd22 	bl	80088b0 <prvAddCurrentTaskToDelayedList>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	200003d0 	.word	0x200003d0

08007e78 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	4b16      	ldr	r3, [pc, #88]	@ (8007ee4 <vTaskPlaceOnEventListRestricted+0x6c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	61da      	str	r2, [r3, #28]
 8007e92:	4b14      	ldr	r3, [pc, #80]	@ (8007ee4 <vTaskPlaceOnEventListRestricted+0x6c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	6892      	ldr	r2, [r2, #8]
 8007e9a:	621a      	str	r2, [r3, #32]
 8007e9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <vTaskPlaceOnEventListRestricted+0x6c>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	3218      	adds	r2, #24
 8007ea6:	605a      	str	r2, [r3, #4]
 8007ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <vTaskPlaceOnEventListRestricted+0x6c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f103 0218 	add.w	r2, r3, #24
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	609a      	str	r2, [r3, #8]
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee4 <vTaskPlaceOnEventListRestricted+0x6c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <vTaskPlaceOnEventListRestricted+0x5a>
        {
            xTicksToWait = portMAX_DELAY;
 8007ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	68b8      	ldr	r0, [r7, #8]
 8007ed6:	f000 fceb 	bl	80088b0 <prvAddCurrentTaskToDelayedList>
    }
 8007eda:	bf00      	nop
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	200003d0 	.word	0x200003d0

08007ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b089      	sub	sp, #36	@ 0x24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	6a12      	ldr	r2, [r2, #32]
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	69d2      	ldr	r2, [r2, #28]
 8007f10:	605a      	str	r2, [r3, #4]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	3318      	adds	r3, #24
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d103      	bne.n	8007f26 <xTaskRemoveFromEventList+0x3e>
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	6a1a      	ldr	r2, [r3, #32]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	605a      	str	r2, [r3, #4]
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	1e5a      	subs	r2, r3, #1
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f36:	4b4a      	ldr	r3, [pc, #296]	@ (8008060 <xTaskRemoveFromEventList+0x178>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d15e      	bne.n	8007ffc <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	68d2      	ldr	r2, [r2, #12]
 8007f4c:	609a      	str	r2, [r3, #8]
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	6892      	ldr	r2, [r2, #8]
 8007f56:	605a      	str	r2, [r3, #4]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d103      	bne.n	8007f6c <xTaskRemoveFromEventList+0x84>
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	605a      	str	r2, [r3, #4]
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	615a      	str	r2, [r3, #20]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	1e5a      	subs	r2, r3, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f80:	2201      	movs	r2, #1
 8007f82:	409a      	lsls	r2, r3
 8007f84:	4b37      	ldr	r3, [pc, #220]	@ (8008064 <xTaskRemoveFromEventList+0x17c>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	4a36      	ldr	r2, [pc, #216]	@ (8008064 <xTaskRemoveFromEventList+0x17c>)
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f92:	4935      	ldr	r1, [pc, #212]	@ (8008068 <xTaskRemoveFromEventList+0x180>)
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60bb      	str	r3, [r7, #8]
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	609a      	str	r2, [r3, #8]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	60da      	str	r2, [r3, #12]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	3204      	adds	r2, #4
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	1d1a      	adds	r2, r3, #4
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	609a      	str	r2, [r3, #8]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4a25      	ldr	r2, [pc, #148]	@ (8008068 <xTaskRemoveFromEventList+0x180>)
 8007fd2:	441a      	add	r2, r3
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	615a      	str	r2, [r3, #20]
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fdc:	4922      	ldr	r1, [pc, #136]	@ (8008068 <xTaskRemoveFromEventList+0x180>)
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	1c59      	adds	r1, r3, #1
 8007fec:	481e      	ldr	r0, [pc, #120]	@ (8008068 <xTaskRemoveFromEventList+0x180>)
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4403      	add	r3, r0
 8007ff8:	6019      	str	r1, [r3, #0]
 8007ffa:	e01b      	b.n	8008034 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800806c <xTaskRemoveFromEventList+0x184>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	61da      	str	r2, [r3, #28]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	621a      	str	r2, [r3, #32]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	3218      	adds	r2, #24
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	f103 0218 	add.w	r2, r3, #24
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	4a11      	ldr	r2, [pc, #68]	@ (800806c <xTaskRemoveFromEventList+0x184>)
 8008028:	629a      	str	r2, [r3, #40]	@ 0x28
 800802a:	4b10      	ldr	r3, [pc, #64]	@ (800806c <xTaskRemoveFromEventList+0x184>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3301      	adds	r3, #1
 8008030:	4a0e      	ldr	r2, [pc, #56]	@ (800806c <xTaskRemoveFromEventList+0x184>)
 8008032:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008038:	4b0d      	ldr	r3, [pc, #52]	@ (8008070 <xTaskRemoveFromEventList+0x188>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803e:	429a      	cmp	r2, r3
 8008040:	d905      	bls.n	800804e <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008042:	2301      	movs	r3, #1
 8008044:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008046:	4b0b      	ldr	r3, [pc, #44]	@ (8008074 <xTaskRemoveFromEventList+0x18c>)
 8008048:	2201      	movs	r2, #1
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	e001      	b.n	8008052 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 800804e:	2300      	movs	r3, #0
 8008050:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8008052:	69fb      	ldr	r3, [r7, #28]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3724      	adds	r7, #36	@ 0x24
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	200004d0 	.word	0x200004d0
 8008064:	200004b0 	.word	0x200004b0
 8008068:	200003d4 	.word	0x200003d4
 800806c:	20000468 	.word	0x20000468
 8008070:	200003d0 	.word	0x200003d0
 8008074:	200004bc 	.word	0x200004bc

08008078 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008080:	4b06      	ldr	r3, [pc, #24]	@ (800809c <vTaskInternalSetTimeOutState+0x24>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008088:	4b05      	ldr	r3, [pc, #20]	@ (80080a0 <vTaskInternalSetTimeOutState+0x28>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	605a      	str	r2, [r3, #4]
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	200004c0 	.word	0x200004c0
 80080a0:	200004ac 	.word	0x200004ac

080080a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 80080ae:	f000 ffcb 	bl	8009048 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80080b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008130 <xTaskCheckForTimeOut+0x8c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d102      	bne.n	80080d2 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e026      	b.n	8008120 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b17      	ldr	r3, [pc, #92]	@ (8008134 <xTaskCheckForTimeOut+0x90>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d00a      	beq.n	80080f4 <xTaskCheckForTimeOut+0x50>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d305      	bcc.n	80080f4 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	e015      	b.n	8008120 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d20b      	bcs.n	8008116 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1ad2      	subs	r2, r2, r3
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff ffb4 	bl	8008078 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	e004      	b.n	8008120 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8008120:	f000 ffac 	bl	800907c <vPortExitCritical>

    return xReturn;
 8008124:	697b      	ldr	r3, [r7, #20]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200004ac 	.word	0x200004ac
 8008134:	200004c0 	.word	0x200004c0

08008138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800813c:	4b03      	ldr	r3, [pc, #12]	@ (800814c <vTaskMissedYield+0x14>)
 800813e:	2201      	movs	r2, #1
 8008140:	601a      	str	r2, [r3, #0]
}
 8008142:	bf00      	nop
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	200004bc 	.word	0x200004bc

08008150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008158:	f000 f852 	bl	8008200 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800815c:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <prvIdleTask+0x28>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d9f9      	bls.n	8008158 <prvIdleTask+0x8>
            {
                taskYIELD();
 8008164:	4b05      	ldr	r3, [pc, #20]	@ (800817c <prvIdleTask+0x2c>)
 8008166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8008174:	e7f0      	b.n	8008158 <prvIdleTask+0x8>
 8008176:	bf00      	nop
 8008178:	200003d4 	.word	0x200003d4
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008186:	2300      	movs	r3, #0
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	e00c      	b.n	80081a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4a12      	ldr	r2, [pc, #72]	@ (80081e0 <prvInitialiseTaskLists+0x60>)
 8008198:	4413      	add	r3, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fc2d 	bl	80069fa <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3301      	adds	r3, #1
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d9ef      	bls.n	800818c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80081ac:	480d      	ldr	r0, [pc, #52]	@ (80081e4 <prvInitialiseTaskLists+0x64>)
 80081ae:	f7fe fc24 	bl	80069fa <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80081b2:	480d      	ldr	r0, [pc, #52]	@ (80081e8 <prvInitialiseTaskLists+0x68>)
 80081b4:	f7fe fc21 	bl	80069fa <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80081b8:	480c      	ldr	r0, [pc, #48]	@ (80081ec <prvInitialiseTaskLists+0x6c>)
 80081ba:	f7fe fc1e 	bl	80069fa <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80081be:	480c      	ldr	r0, [pc, #48]	@ (80081f0 <prvInitialiseTaskLists+0x70>)
 80081c0:	f7fe fc1b 	bl	80069fa <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80081c4:	480b      	ldr	r0, [pc, #44]	@ (80081f4 <prvInitialiseTaskLists+0x74>)
 80081c6:	f7fe fc18 	bl	80069fa <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80081ca:	4b0b      	ldr	r3, [pc, #44]	@ (80081f8 <prvInitialiseTaskLists+0x78>)
 80081cc:	4a05      	ldr	r2, [pc, #20]	@ (80081e4 <prvInitialiseTaskLists+0x64>)
 80081ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081d0:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <prvInitialiseTaskLists+0x7c>)
 80081d2:	4a05      	ldr	r2, [pc, #20]	@ (80081e8 <prvInitialiseTaskLists+0x68>)
 80081d4:	601a      	str	r2, [r3, #0]
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	200003d4 	.word	0x200003d4
 80081e4:	20000438 	.word	0x20000438
 80081e8:	2000044c 	.word	0x2000044c
 80081ec:	20000468 	.word	0x20000468
 80081f0:	2000047c 	.word	0x2000047c
 80081f4:	20000494 	.word	0x20000494
 80081f8:	20000460 	.word	0x20000460
 80081fc:	20000464 	.word	0x20000464

08008200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008206:	e019      	b.n	800823c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008208:	f000 ff1e 	bl	8009048 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800820c:	4b10      	ldr	r3, [pc, #64]	@ (8008250 <prvCheckTasksWaitingTermination+0x50>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3304      	adds	r3, #4
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe fc54 	bl	8006ac6 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800821e:	4b0d      	ldr	r3, [pc, #52]	@ (8008254 <prvCheckTasksWaitingTermination+0x54>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3b01      	subs	r3, #1
 8008224:	4a0b      	ldr	r2, [pc, #44]	@ (8008254 <prvCheckTasksWaitingTermination+0x54>)
 8008226:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008228:	4b0b      	ldr	r3, [pc, #44]	@ (8008258 <prvCheckTasksWaitingTermination+0x58>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3b01      	subs	r3, #1
 800822e:	4a0a      	ldr	r2, [pc, #40]	@ (8008258 <prvCheckTasksWaitingTermination+0x58>)
 8008230:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8008232:	f000 ff23 	bl	800907c <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f810 	bl	800825c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800823c:	4b06      	ldr	r3, [pc, #24]	@ (8008258 <prvCheckTasksWaitingTermination+0x58>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e1      	bne.n	8008208 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	2000047c 	.word	0x2000047c
 8008254:	200004a8 	.word	0x200004a8
 8008258:	20000490 	.word	0x20000490

0800825c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	4618      	mov	r0, r3
 800826a:	f001 f857 	bl	800931c <vPortFree>
            vPortFree( pxTCB );
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 f854 	bl	800931c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008280:	4b0a      	ldr	r3, [pc, #40]	@ (80082ac <prvResetNextTaskUnblockTime+0x30>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d104      	bne.n	8008294 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800828a:	4b09      	ldr	r3, [pc, #36]	@ (80082b0 <prvResetNextTaskUnblockTime+0x34>)
 800828c:	f04f 32ff 	mov.w	r2, #4294967295
 8008290:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008292:	e005      	b.n	80082a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008294:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <prvResetNextTaskUnblockTime+0x30>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a04      	ldr	r2, [pc, #16]	@ (80082b0 <prvResetNextTaskUnblockTime+0x34>)
 800829e:	6013      	str	r3, [r2, #0]
}
 80082a0:	bf00      	nop
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000460 	.word	0x20000460
 80082b0:	200004c8 	.word	0x200004c8

080082b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 8087 	beq.w	80083da <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d0:	4b44      	ldr	r3, [pc, #272]	@ (80083e4 <xTaskPriorityInherit+0x130>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d276      	bcs.n	80083c8 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	db06      	blt.n	80082f0 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e2:	4b40      	ldr	r3, [pc, #256]	@ (80083e4 <xTaskPriorityInherit+0x130>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	f1c3 0205 	rsb	r2, r3, #5
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	6959      	ldr	r1, [r3, #20]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4a39      	ldr	r2, [pc, #228]	@ (80083e8 <xTaskPriorityInherit+0x134>)
 8008302:	4413      	add	r3, r2
 8008304:	4299      	cmp	r1, r3
 8008306:	d157      	bne.n	80083b8 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fbda 	bl	8006ac6 <uxListRemove>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831c:	2201      	movs	r2, #1
 800831e:	fa02 f303 	lsl.w	r3, r2, r3
 8008322:	43da      	mvns	r2, r3
 8008324:	4b31      	ldr	r3, [pc, #196]	@ (80083ec <xTaskPriorityInherit+0x138>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4013      	ands	r3, r2
 800832a:	4a30      	ldr	r2, [pc, #192]	@ (80083ec <xTaskPriorityInherit+0x138>)
 800832c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800832e:	4b2d      	ldr	r3, [pc, #180]	@ (80083e4 <xTaskPriorityInherit+0x130>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	2201      	movs	r2, #1
 800833e:	409a      	lsls	r2, r3
 8008340:	4b2a      	ldr	r3, [pc, #168]	@ (80083ec <xTaskPriorityInherit+0x138>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4313      	orrs	r3, r2
 8008346:	4a29      	ldr	r2, [pc, #164]	@ (80083ec <xTaskPriorityInherit+0x138>)
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800834e:	4926      	ldr	r1, [pc, #152]	@ (80083e8 <xTaskPriorityInherit+0x134>)
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	3304      	adds	r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	609a      	str	r2, [r3, #8]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	3204      	adds	r2, #4
 8008376:	605a      	str	r2, [r3, #4]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	1d1a      	adds	r2, r3, #4
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	609a      	str	r2, [r3, #8]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008384:	4613      	mov	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4a16      	ldr	r2, [pc, #88]	@ (80083e8 <xTaskPriorityInherit+0x134>)
 800838e:	441a      	add	r2, r3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	615a      	str	r2, [r3, #20]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008398:	4913      	ldr	r1, [pc, #76]	@ (80083e8 <xTaskPriorityInherit+0x134>)
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	440b      	add	r3, r1
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	1c59      	adds	r1, r3, #1
 80083a8:	480f      	ldr	r0, [pc, #60]	@ (80083e8 <xTaskPriorityInherit+0x134>)
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4403      	add	r3, r0
 80083b4:	6019      	str	r1, [r3, #0]
 80083b6:	e004      	b.n	80083c2 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083b8:	4b0a      	ldr	r3, [pc, #40]	@ (80083e4 <xTaskPriorityInherit+0x130>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80083c2:	2301      	movs	r3, #1
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	e008      	b.n	80083da <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <xTaskPriorityInherit+0x130>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d201      	bcs.n	80083da <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80083d6:	2301      	movs	r3, #1
 80083d8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80083da:	697b      	ldr	r3, [r7, #20]
    }
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	200003d0 	.word	0x200003d0
 80083e8:	200003d4 	.word	0x200003d4
 80083ec:	200004b0 	.word	0x200004b0

080083f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d06c      	beq.n	80084e0 <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800840a:	1e5a      	subs	r2, r3, #1
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008418:	429a      	cmp	r2, r3
 800841a:	d061      	beq.n	80084e0 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d15d      	bne.n	80084e0 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	3304      	adds	r3, #4
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fb4c 	bl	8006ac6 <uxListRemove>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008438:	2201      	movs	r2, #1
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	43da      	mvns	r2, r3
 8008440:	4b2a      	ldr	r3, [pc, #168]	@ (80084ec <xTaskPriorityDisinherit+0xfc>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4013      	ands	r3, r2
 8008446:	4a29      	ldr	r2, [pc, #164]	@ (80084ec <xTaskPriorityDisinherit+0xfc>)
 8008448:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008456:	f1c3 0205 	rsb	r2, r3, #5
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008462:	2201      	movs	r2, #1
 8008464:	409a      	lsls	r2, r3
 8008466:	4b21      	ldr	r3, [pc, #132]	@ (80084ec <xTaskPriorityDisinherit+0xfc>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4313      	orrs	r3, r2
 800846c:	4a1f      	ldr	r2, [pc, #124]	@ (80084ec <xTaskPriorityDisinherit+0xfc>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008474:	491e      	ldr	r1, [pc, #120]	@ (80084f0 <xTaskPriorityDisinherit+0x100>)
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	3304      	adds	r3, #4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	60da      	str	r2, [r3, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	3204      	adds	r2, #4
 800849c:	605a      	str	r2, [r3, #4]
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1d1a      	adds	r2, r3, #4
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	609a      	str	r2, [r3, #8]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084aa:	4613      	mov	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4a0f      	ldr	r2, [pc, #60]	@ (80084f0 <xTaskPriorityDisinherit+0x100>)
 80084b4:	441a      	add	r2, r3
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	615a      	str	r2, [r3, #20]
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	490c      	ldr	r1, [pc, #48]	@ (80084f0 <xTaskPriorityDisinherit+0x100>)
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	1c59      	adds	r1, r3, #1
 80084ce:	4808      	ldr	r0, [pc, #32]	@ (80084f0 <xTaskPriorityDisinherit+0x100>)
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4403      	add	r3, r0
 80084da:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80084e0:	697b      	ldr	r3, [r7, #20]
    }
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200004b0 	.word	0x200004b0
 80084f0:	200003d4 	.word	0x200003d4

080084f4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008502:	2301      	movs	r3, #1
 8008504:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8081 	beq.w	8008610 <vTaskPriorityDisinheritAfterTimeout+0x11c>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d902      	bls.n	800851e <vTaskPriorityDisinheritAfterTimeout+0x2a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	e002      	b.n	8008524 <vTaskPriorityDisinheritAfterTimeout+0x30>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008522:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	429a      	cmp	r2, r3
 800852c:	d070      	beq.n	8008610 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	d16b      	bne.n	8008610 <vTaskPriorityDisinheritAfterTimeout+0x11c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	db04      	blt.n	8008556 <vTaskPriorityDisinheritAfterTimeout+0x62>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	f1c3 0205 	rsb	r2, r3, #5
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	6959      	ldr	r1, [r3, #20]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4a2c      	ldr	r2, [pc, #176]	@ (8008618 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8008566:	4413      	add	r3, r2
 8008568:	4299      	cmp	r1, r3
 800856a:	d151      	bne.n	8008610 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	3304      	adds	r3, #4
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe faa8 	bl	8006ac6 <uxListRemove>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	2201      	movs	r2, #1
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43da      	mvns	r2, r3
 8008588:	4b24      	ldr	r3, [pc, #144]	@ (800861c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4013      	ands	r3, r2
 800858e:	4a23      	ldr	r2, [pc, #140]	@ (800861c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008590:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	2201      	movs	r2, #1
 8008598:	409a      	lsls	r2, r3
 800859a:	4b20      	ldr	r3, [pc, #128]	@ (800861c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4313      	orrs	r3, r2
 80085a0:	4a1e      	ldr	r2, [pc, #120]	@ (800861c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a8:	491b      	ldr	r1, [pc, #108]	@ (8008618 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80085aa:	4613      	mov	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	3304      	adds	r3, #4
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	609a      	str	r2, [r3, #8]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	60da      	str	r2, [r3, #12]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	3204      	adds	r2, #4
 80085d0:	605a      	str	r2, [r3, #4]
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	609a      	str	r2, [r3, #8]
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008618 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80085e8:	441a      	add	r2, r3
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	615a      	str	r2, [r3, #20]
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f2:	4909      	ldr	r1, [pc, #36]	@ (8008618 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	1c59      	adds	r1, r3, #1
 8008602:	4805      	ldr	r0, [pc, #20]	@ (8008618 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8008604:	4613      	mov	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4403      	add	r3, r0
 800860e:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008610:	bf00      	nop
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200003d4 	.word	0x200003d4
 800861c:	200004b0 	.word	0x200004b0

08008620 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8008624:	4b07      	ldr	r3, [pc, #28]	@ (8008644 <pvTaskIncrementMutexHeldCount+0x24>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800862c:	4b05      	ldr	r3, [pc, #20]	@ (8008644 <pvTaskIncrementMutexHeldCount+0x24>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008632:	3201      	adds	r2, #1
 8008634:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8008636:	4b03      	ldr	r3, [pc, #12]	@ (8008644 <pvTaskIncrementMutexHeldCount+0x24>)
 8008638:	681b      	ldr	r3, [r3, #0]
    }
 800863a:	4618      	mov	r0, r3
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	200003d0 	.word	0x200003d0

08008648 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        taskENTER_CRITICAL();
 8008654:	f000 fcf8 	bl	8009048 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8008658:	4b26      	ldr	r3, [pc, #152]	@ (80086f4 <ulTaskGenericNotifyTake+0xac>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	3214      	adds	r2, #20
 8008660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d115      	bne.n	8008694 <ulTaskGenericNotifyTake+0x4c>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8008668:	4b22      	ldr	r3, [pc, #136]	@ (80086f4 <ulTaskGenericNotifyTake+0xac>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4413      	add	r3, r2
 8008670:	3354      	adds	r3, #84	@ 0x54
 8008672:	2201      	movs	r2, #1
 8008674:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <ulTaskGenericNotifyTake+0x4c>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800867c:	2101      	movs	r1, #1
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f916 	bl	80088b0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8008684:	4b1c      	ldr	r3, [pc, #112]	@ (80086f8 <ulTaskGenericNotifyTake+0xb0>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008694:	f000 fcf2 	bl	800907c <vPortExitCritical>

        taskENTER_CRITICAL();
 8008698:	f000 fcd6 	bl	8009048 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800869c:	4b15      	ldr	r3, [pc, #84]	@ (80086f4 <ulTaskGenericNotifyTake+0xac>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	3214      	adds	r2, #20
 80086a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a8:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d012      	beq.n	80086d6 <ulTaskGenericNotifyTake+0x8e>
            {
                if( xClearCountOnExit != pdFALSE )
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <ulTaskGenericNotifyTake+0x7e>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 80086b6:	4b0f      	ldr	r3, [pc, #60]	@ (80086f4 <ulTaskGenericNotifyTake+0xac>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	3214      	adds	r2, #20
 80086be:	2100      	movs	r1, #0
 80086c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80086c4:	e007      	b.n	80086d6 <ulTaskGenericNotifyTake+0x8e>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 80086c6:	4b0b      	ldr	r3, [pc, #44]	@ (80086f4 <ulTaskGenericNotifyTake+0xac>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	1e51      	subs	r1, r2, #1
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	3214      	adds	r2, #20
 80086d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80086d6:	4b07      	ldr	r3, [pc, #28]	@ (80086f4 <ulTaskGenericNotifyTake+0xac>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4413      	add	r3, r2
 80086de:	3354      	adds	r3, #84	@ 0x54
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80086e4:	f000 fcca 	bl	800907c <vPortExitCritical>

        return ulReturn;
 80086e8:	697b      	ldr	r3, [r7, #20]
    }
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	200003d0 	.word	0x200003d0
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08e      	sub	sp, #56	@ 0x38
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008708:	f000 fd58 	bl	80091bc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
        __asm volatile
 8008710:	f3ef 8211 	mrs	r2, BASEPRI
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	61fa      	str	r2, [r7, #28]
 8008726:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8008728:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800872a:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800872c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	4413      	add	r3, r2
 8008732:	3354      	adds	r3, #84	@ 0x54
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800873a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4413      	add	r3, r2
 8008740:	3354      	adds	r3, #84	@ 0x54
 8008742:	2202      	movs	r2, #2
 8008744:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8008746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	3214      	adds	r2, #20
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	1c59      	adds	r1, r3, #1
 8008752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	3214      	adds	r2, #20
 8008758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800875c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008760:	2b01      	cmp	r3, #1
 8008762:	f040 808f 	bne.w	8008884 <vTaskGenericNotifyGiveFromISR+0x188>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008766:	4b4c      	ldr	r3, [pc, #304]	@ (8008898 <vTaskGenericNotifyGiveFromISR+0x19c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d15e      	bne.n	800882c <vTaskGenericNotifyGiveFromISR+0x130>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800876e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
 8008774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800877a:	68d2      	ldr	r2, [r2, #12]
 800877c:	609a      	str	r2, [r3, #8]
 800877e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008784:	6892      	ldr	r2, [r2, #8]
 8008786:	605a      	str	r2, [r3, #4]
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878e:	3304      	adds	r3, #4
 8008790:	429a      	cmp	r2, r3
 8008792:	d103      	bne.n	800879c <vTaskGenericNotifyGiveFromISR+0xa0>
 8008794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	605a      	str	r2, [r3, #4]
 800879c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879e:	2200      	movs	r2, #0
 80087a0:	615a      	str	r2, [r3, #20]
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	1e5a      	subs	r2, r3, #1
 80087a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087aa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80087ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	2201      	movs	r2, #1
 80087b2:	409a      	lsls	r2, r3
 80087b4:	4b39      	ldr	r3, [pc, #228]	@ (800889c <vTaskGenericNotifyGiveFromISR+0x1a0>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	4a38      	ldr	r2, [pc, #224]	@ (800889c <vTaskGenericNotifyGiveFromISR+0x1a0>)
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c2:	4937      	ldr	r1, [pc, #220]	@ (80088a0 <vTaskGenericNotifyGiveFromISR+0x1a4>)
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	3304      	adds	r3, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	623b      	str	r3, [r7, #32]
 80087d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d6:	6a3a      	ldr	r2, [r7, #32]
 80087d8:	609a      	str	r2, [r3, #8]
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e0:	60da      	str	r2, [r3, #12]
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087e8:	3204      	adds	r2, #4
 80087ea:	605a      	str	r2, [r3, #4]
 80087ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ee:	1d1a      	adds	r2, r3, #4
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	609a      	str	r2, [r3, #8]
 80087f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4a27      	ldr	r2, [pc, #156]	@ (80088a0 <vTaskGenericNotifyGiveFromISR+0x1a4>)
 8008802:	441a      	add	r2, r3
 8008804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008806:	615a      	str	r2, [r3, #20]
 8008808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880c:	4924      	ldr	r1, [pc, #144]	@ (80088a0 <vTaskGenericNotifyGiveFromISR+0x1a4>)
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	1c59      	adds	r1, r3, #1
 800881c:	4820      	ldr	r0, [pc, #128]	@ (80088a0 <vTaskGenericNotifyGiveFromISR+0x1a4>)
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4403      	add	r3, r0
 8008828:	6019      	str	r1, [r3, #0]
 800882a:	e01b      	b.n	8008864 <vTaskGenericNotifyGiveFromISR+0x168>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800882c:	4b1d      	ldr	r3, [pc, #116]	@ (80088a4 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008836:	61da      	str	r2, [r3, #28]
 8008838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800883e:	621a      	str	r2, [r3, #32]
 8008840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008846:	3218      	adds	r2, #24
 8008848:	605a      	str	r2, [r3, #4]
 800884a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884c:	f103 0218 	add.w	r2, r3, #24
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	609a      	str	r2, [r3, #8]
 8008854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008856:	4a13      	ldr	r2, [pc, #76]	@ (80088a4 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 8008858:	629a      	str	r2, [r3, #40]	@ 0x28
 800885a:	4b12      	ldr	r3, [pc, #72]	@ (80088a4 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3301      	adds	r3, #1
 8008860:	4a10      	ldr	r2, [pc, #64]	@ (80088a4 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 8008862:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008868:	4b0f      	ldr	r3, [pc, #60]	@ (80088a8 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886e:	429a      	cmp	r2, r3
 8008870:	d908      	bls.n	8008884 <vTaskGenericNotifyGiveFromISR+0x188>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <vTaskGenericNotifyGiveFromISR+0x182>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800887e:	4b0b      	ldr	r3, [pc, #44]	@ (80088ac <vTaskGenericNotifyGiveFromISR+0x1b0>)
 8008880:	2201      	movs	r2, #1
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	617b      	str	r3, [r7, #20]
        __asm volatile
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f383 8811 	msr	BASEPRI, r3
    }
 800888e:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8008890:	bf00      	nop
 8008892:	3738      	adds	r7, #56	@ 0x38
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	200004d0 	.word	0x200004d0
 800889c:	200004b0 	.word	0x200004b0
 80088a0:	200003d4 	.word	0x200003d4
 80088a4:	20000468 	.word	0x20000468
 80088a8:	200003d0 	.word	0x200003d0
 80088ac:	200004bc 	.word	0x200004bc

080088b0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80088ba:	4b36      	ldr	r3, [pc, #216]	@ (8008994 <prvAddCurrentTaskToDelayedList+0xe4>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088c0:	4b35      	ldr	r3, [pc, #212]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe f8fd 	bl	8006ac6 <uxListRemove>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10b      	bne.n	80088ea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80088d2:	4b31      	ldr	r3, [pc, #196]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	2201      	movs	r2, #1
 80088da:	fa02 f303 	lsl.w	r3, r2, r3
 80088de:	43da      	mvns	r2, r3
 80088e0:	4b2e      	ldr	r3, [pc, #184]	@ (800899c <prvAddCurrentTaskToDelayedList+0xec>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4013      	ands	r3, r2
 80088e6:	4a2d      	ldr	r2, [pc, #180]	@ (800899c <prvAddCurrentTaskToDelayedList+0xec>)
 80088e8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d124      	bne.n	800893c <prvAddCurrentTaskToDelayedList+0x8c>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d021      	beq.n	800893c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f8:	4b29      	ldr	r3, [pc, #164]	@ (80089a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	4b26      	ldr	r3, [pc, #152]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	609a      	str	r2, [r3, #8]
 8008906:	4b24      	ldr	r3, [pc, #144]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	6892      	ldr	r2, [r2, #8]
 800890e:	60da      	str	r2, [r3, #12]
 8008910:	4b21      	ldr	r3, [pc, #132]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	3204      	adds	r2, #4
 800891a:	605a      	str	r2, [r3, #4]
 800891c:	4b1e      	ldr	r3, [pc, #120]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	1d1a      	adds	r2, r3, #4
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	609a      	str	r2, [r3, #8]
 8008926:	4b1c      	ldr	r3, [pc, #112]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a1d      	ldr	r2, [pc, #116]	@ (80089a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800892c:	615a      	str	r2, [r3, #20]
 800892e:	4b1c      	ldr	r3, [pc, #112]	@ (80089a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3301      	adds	r3, #1
 8008934:	4a1a      	ldr	r2, [pc, #104]	@ (80089a0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800893a:	e026      	b.n	800898a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008944:	4b14      	ldr	r3, [pc, #80]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	429a      	cmp	r2, r3
 8008952:	d209      	bcs.n	8008968 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008954:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	4b0f      	ldr	r3, [pc, #60]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3304      	adds	r3, #4
 800895e:	4619      	mov	r1, r3
 8008960:	4610      	mov	r0, r2
 8008962:	f7fe f877 	bl	8006a54 <vListInsert>
}
 8008966:	e010      	b.n	800898a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008968:	4b0f      	ldr	r3, [pc, #60]	@ (80089a8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	4b0a      	ldr	r3, [pc, #40]	@ (8008998 <prvAddCurrentTaskToDelayedList+0xe8>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3304      	adds	r3, #4
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f7fe f86d 	bl	8006a54 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800897a:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <prvAddCurrentTaskToDelayedList+0xfc>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	429a      	cmp	r2, r3
 8008982:	d202      	bcs.n	800898a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8008984:	4a09      	ldr	r2, [pc, #36]	@ (80089ac <prvAddCurrentTaskToDelayedList+0xfc>)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6013      	str	r3, [r2, #0]
}
 800898a:	bf00      	nop
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200004ac 	.word	0x200004ac
 8008998:	200003d0 	.word	0x200003d0
 800899c:	200004b0 	.word	0x200004b0
 80089a0:	20000494 	.word	0x20000494
 80089a4:	20000464 	.word	0x20000464
 80089a8:	20000460 	.word	0x20000460
 80089ac:	200004c8 	.word	0x200004c8

080089b0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80089ba:	f000 fa2d 	bl	8008e18 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80089be:	4b0a      	ldr	r3, [pc, #40]	@ (80089e8 <xTimerCreateTimerTask+0x38>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00b      	beq.n	80089de <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80089c6:	4b09      	ldr	r3, [pc, #36]	@ (80089ec <xTimerCreateTimerTask+0x3c>)
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	2302      	movs	r3, #2
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	2300      	movs	r3, #0
 80089d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80089d4:	4906      	ldr	r1, [pc, #24]	@ (80089f0 <xTimerCreateTimerTask+0x40>)
 80089d6:	4807      	ldr	r0, [pc, #28]	@ (80089f4 <xTimerCreateTimerTask+0x44>)
 80089d8:	f7fe fe24 	bl	8007624 <xTaskCreate>
 80089dc:	6078      	str	r0, [r7, #4]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
 80089de:	687b      	ldr	r3, [r7, #4]
    }
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	20000504 	.word	0x20000504
 80089ec:	20000508 	.word	0x20000508
 80089f0:	0800c964 	.word	0x0800c964
 80089f4:	08008a9d 	.word	0x08008a9d

080089f8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008a04:	e008      	b.n	8008a18 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	699a      	ldr	r2, [r3, #24]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	18d1      	adds	r1, r2, r3
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f8df 	bl	8008be8 <prvInsertTimerInActiveList>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1ea      	bne.n	8008a06 <prvReloadTimer+0xe>
        }
    }
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a46:	4b14      	ldr	r3, [pc, #80]	@ (8008a98 <prvProcessExpiredTimer+0x5c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe f836 	bl	8006ac6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d005      	beq.n	8008a74 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f7ff ffc3 	bl	80089f8 <prvReloadTimer>
 8008a72:	e008      	b.n	8008a86 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a7a:	f023 0301 	bic.w	r3, r3, #1
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	4798      	blx	r3
    }
 8008a8e:	bf00      	nop
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200004fc 	.word	0x200004fc

08008a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008aa4:	f107 0308 	add.w	r3, r7, #8
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f859 	bl	8008b60 <prvGetNextExpireTime>
 8008aae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 f805 	bl	8008ac4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008aba:	f000 f8d7 	bl	8008c6c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008abe:	bf00      	nop
 8008ac0:	e7f0      	b.n	8008aa4 <prvTimerTask+0x8>
	...

08008ac4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8008ace:	f7fe ff5b 	bl	8007988 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f866 	bl	8008ba8 <prvSampleTimeNow>
 8008adc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d130      	bne.n	8008b46 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <prvProcessTimerOrBlockTask+0x3c>
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d806      	bhi.n	8008b00 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8008af2:	f7fe ff57 	bl	80079a4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f7ff ff9f 	bl	8008a3c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8008afe:	e024      	b.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b06:	4b13      	ldr	r3, [pc, #76]	@ (8008b54 <prvProcessTimerOrBlockTask+0x90>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <prvProcessTimerOrBlockTask+0x50>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <prvProcessTimerOrBlockTask+0x52>
 8008b14:	2300      	movs	r3, #0
 8008b16:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b18:	4b0f      	ldr	r3, [pc, #60]	@ (8008b58 <prvProcessTimerOrBlockTask+0x94>)
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4619      	mov	r1, r3
 8008b26:	f7fe fd49 	bl	80075bc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008b2a:	f7fe ff3b 	bl	80079a4 <xTaskResumeAll>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008b34:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <prvProcessTimerOrBlockTask+0x98>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
    }
 8008b44:	e001      	b.n	8008b4a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008b46:	f7fe ff2d 	bl	80079a4 <xTaskResumeAll>
    }
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000500 	.word	0x20000500
 8008b58:	20000504 	.word	0x20000504
 8008b5c:	e000ed04 	.word	0xe000ed04

08008b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba4 <prvGetNextExpireTime+0x44>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <prvGetNextExpireTime+0x16>
 8008b72:	2201      	movs	r2, #1
 8008b74:	e000      	b.n	8008b78 <prvGetNextExpireTime+0x18>
 8008b76:	2200      	movs	r2, #0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b84:	4b07      	ldr	r3, [pc, #28]	@ (8008ba4 <prvGetNextExpireTime+0x44>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e001      	b.n	8008b94 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008b94:	68fb      	ldr	r3, [r7, #12]
    }
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	200004fc 	.word	0x200004fc

08008ba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008bb0:	f7fe ffe4 	bl	8007b7c <xTaskGetTickCount>
 8008bb4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8008be4 <prvSampleTimeNow+0x3c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d205      	bcs.n	8008bcc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008bc0:	f000 f904 	bl	8008dcc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008bd2:	4a04      	ldr	r2, [pc, #16]	@ (8008be4 <prvSampleTimeNow+0x3c>)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
    }
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	2000050c 	.word	0x2000050c

08008be8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d812      	bhi.n	8008c34 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	e01b      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c22:	4b10      	ldr	r3, [pc, #64]	@ (8008c64 <prvInsertTimerInActiveList+0x7c>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	f7fd ff11 	bl	8006a54 <vListInsert>
 8008c32:	e012      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d206      	bcs.n	8008c4a <prvInsertTimerInActiveList+0x62>
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d302      	bcc.n	8008c4a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e007      	b.n	8008c5a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c4a:	4b07      	ldr	r3, [pc, #28]	@ (8008c68 <prvInsertTimerInActiveList+0x80>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3304      	adds	r3, #4
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f7fd fefd 	bl	8006a54 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008c5a:	697b      	ldr	r3, [r7, #20]
    }
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000500 	.word	0x20000500
 8008c68:	200004fc 	.word	0x200004fc

08008c6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c72:	e099      	b.n	8008da8 <prvProcessReceivedCommands+0x13c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f2c0 8096 	blt.w	8008da8 <prvProcessReceivedCommands+0x13c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fd ff1a 	bl	8006ac6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c92:	463b      	mov	r3, r7
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff ff87 	bl	8008ba8 <prvSampleTimeNow>
 8008c9a:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d87e      	bhi.n	8008da2 <prvProcessReceivedCommands+0x136>
 8008ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <prvProcessReceivedCommands+0x40>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008cd1 	.word	0x08008cd1
 8008cb0:	08008cd1 	.word	0x08008cd1
 8008cb4:	08008d39 	.word	0x08008d39
 8008cb8:	08008d4d 	.word	0x08008d4d
 8008cbc:	08008d79 	.word	0x08008d79
 8008cc0:	08008cd1 	.word	0x08008cd1
 8008cc4:	08008cd1 	.word	0x08008cd1
 8008cc8:	08008d39 	.word	0x08008d39
 8008ccc:	08008d4d 	.word	0x08008d4d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cd6:	f043 0301 	orr.w	r3, r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	18d1      	adds	r1, r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	6978      	ldr	r0, [r7, #20]
 8008cf0:	f7ff ff7a 	bl	8008be8 <prvInsertTimerInActiveList>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d055      	beq.n	8008da6 <prvProcessReceivedCommands+0x13a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d009      	beq.n	8008d1c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	4413      	add	r3, r2
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6978      	ldr	r0, [r7, #20]
 8008d16:	f7ff fe6f 	bl	80089f8 <prvReloadTimer>
 8008d1a:	e008      	b.n	8008d2e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d22:	f023 0301 	bic.w	r3, r3, #1
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	6978      	ldr	r0, [r7, #20]
 8008d34:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8008d36:	e036      	b.n	8008da6 <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d3e:	f023 0301 	bic.w	r3, r3, #1
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008d4a:	e02d      	b.n	8008da8 <prvProcessReceivedCommands+0x13c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d52:	f043 0301 	orr.w	r3, r3, #1
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	619a      	str	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	699a      	ldr	r2, [r3, #24]
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	18d1      	adds	r1, r2, r3
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	6978      	ldr	r0, [r7, #20]
 8008d72:	f7ff ff39 	bl	8008be8 <prvInsertTimerInActiveList>
                        break;
 8008d76:	e017      	b.n	8008da8 <prvProcessReceivedCommands+0x13c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <prvProcessReceivedCommands+0x122>
                            {
                                vPortFree( pxTimer );
 8008d86:	6978      	ldr	r0, [r7, #20]
 8008d88:	f000 fac8 	bl	800931c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008d8c:	e00c      	b.n	8008da8 <prvProcessReceivedCommands+0x13c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008da0:	e002      	b.n	8008da8 <prvProcessReceivedCommands+0x13c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008da2:	bf00      	nop
 8008da4:	e000      	b.n	8008da8 <prvProcessReceivedCommands+0x13c>
                        break;
 8008da6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008da8:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <prvProcessReceivedCommands+0x15c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	1d39      	adds	r1, r7, #4
 8008dae:	2200      	movs	r2, #0
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fe f8cd 	bl	8006f50 <xQueueReceive>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f47f af5b 	bne.w	8008c74 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000504 	.word	0x20000504

08008dcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dd2:	e009      	b.n	8008de8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <prvSwitchTimerLists+0x44>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8008dde:	f04f 31ff 	mov.w	r1, #4294967295
 8008de2:	6838      	ldr	r0, [r7, #0]
 8008de4:	f7ff fe2a 	bl	8008a3c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008de8:	4b09      	ldr	r3, [pc, #36]	@ (8008e10 <prvSwitchTimerLists+0x44>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1f0      	bne.n	8008dd4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8008df2:	4b07      	ldr	r3, [pc, #28]	@ (8008e10 <prvSwitchTimerLists+0x44>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8008df8:	4b06      	ldr	r3, [pc, #24]	@ (8008e14 <prvSwitchTimerLists+0x48>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a04      	ldr	r2, [pc, #16]	@ (8008e10 <prvSwitchTimerLists+0x44>)
 8008dfe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008e00:	4a04      	ldr	r2, [pc, #16]	@ (8008e14 <prvSwitchTimerLists+0x48>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6013      	str	r3, [r2, #0]
    }
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	200004fc 	.word	0x200004fc
 8008e14:	20000500 	.word	0x20000500

08008e18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008e1c:	f000 f914 	bl	8009048 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008e20:	4b12      	ldr	r3, [pc, #72]	@ (8008e6c <prvCheckForValidListAndQueue+0x54>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d11d      	bne.n	8008e64 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008e28:	4811      	ldr	r0, [pc, #68]	@ (8008e70 <prvCheckForValidListAndQueue+0x58>)
 8008e2a:	f7fd fde6 	bl	80069fa <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008e2e:	4811      	ldr	r0, [pc, #68]	@ (8008e74 <prvCheckForValidListAndQueue+0x5c>)
 8008e30:	f7fd fde3 	bl	80069fa <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008e34:	4b10      	ldr	r3, [pc, #64]	@ (8008e78 <prvCheckForValidListAndQueue+0x60>)
 8008e36:	4a0e      	ldr	r2, [pc, #56]	@ (8008e70 <prvCheckForValidListAndQueue+0x58>)
 8008e38:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008e3a:	4b10      	ldr	r3, [pc, #64]	@ (8008e7c <prvCheckForValidListAndQueue+0x64>)
 8008e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8008e74 <prvCheckForValidListAndQueue+0x5c>)
 8008e3e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008e40:	2200      	movs	r2, #0
 8008e42:	210c      	movs	r1, #12
 8008e44:	200a      	movs	r0, #10
 8008e46:	f7fd fedd 	bl	8006c04 <xQueueGenericCreate>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4a07      	ldr	r2, [pc, #28]	@ (8008e6c <prvCheckForValidListAndQueue+0x54>)
 8008e4e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8008e50:	4b06      	ldr	r3, [pc, #24]	@ (8008e6c <prvCheckForValidListAndQueue+0x54>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e58:	4b04      	ldr	r3, [pc, #16]	@ (8008e6c <prvCheckForValidListAndQueue+0x54>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4908      	ldr	r1, [pc, #32]	@ (8008e80 <prvCheckForValidListAndQueue+0x68>)
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fb6c 	bl	800753c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008e64:	f000 f90a 	bl	800907c <vPortExitCritical>
    }
 8008e68:	bf00      	nop
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000504 	.word	0x20000504
 8008e70:	200004d4 	.word	0x200004d4
 8008e74:	200004e8 	.word	0x200004e8
 8008e78:	200004fc 	.word	0x200004fc
 8008e7c:	20000500 	.word	0x20000500
 8008e80:	0800c96c 	.word	0x0800c96c

08008e84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3b04      	subs	r3, #4
 8008e94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3b04      	subs	r3, #4
 8008ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f023 0201 	bic.w	r2, r3, #1
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3b04      	subs	r3, #4
 8008eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee8 <pxPortInitialiseStack+0x64>)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3b14      	subs	r3, #20
 8008ebe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3b04      	subs	r3, #4
 8008eca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f06f 0202 	mvn.w	r2, #2
 8008ed2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3b20      	subs	r3, #32
 8008ed8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008eda:	68fb      	ldr	r3, [r7, #12]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	08008eed 	.word	0x08008eed

08008eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	607b      	str	r3, [r7, #4]
    }
 8008f08:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008f0a:	bf00      	nop
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0fc      	beq.n	8008f0c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008f12:	bf00      	nop
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008f20:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <pxCurrentTCBConst2>)
 8008f22:	6819      	ldr	r1, [r3, #0]
 8008f24:	6808      	ldr	r0, [r1, #0]
 8008f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	f380 8809 	msr	PSP, r0
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8811 	msr	BASEPRI, r0
 8008f3a:	4770      	bx	lr
 8008f3c:	f3af 8000 	nop.w

08008f40 <pxCurrentTCBConst2>:
 8008f40:	200003d0 	.word	0x200003d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008f48:	4808      	ldr	r0, [pc, #32]	@ (8008f6c <prvPortStartFirstTask+0x24>)
 8008f4a:	6800      	ldr	r0, [r0, #0]
 8008f4c:	6800      	ldr	r0, [r0, #0]
 8008f4e:	f380 8808 	msr	MSP, r0
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f380 8814 	msr	CONTROL, r0
 8008f5a:	b662      	cpsie	i
 8008f5c:	b661      	cpsie	f
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	df00      	svc	0
 8008f68:	bf00      	nop
 8008f6a:	0000      	.short	0x0000
 8008f6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop

08008f74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8009030 <xPortStartScheduler+0xbc>)
 8008f7c:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	60bb      	str	r3, [r7, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	22ff      	movs	r2, #255	@ 0xff
 8008f8a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	4b25      	ldr	r3, [pc, #148]	@ (8009034 <xPortStartScheduler+0xc0>)
 8008fa0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fa2:	4b25      	ldr	r3, [pc, #148]	@ (8009038 <xPortStartScheduler+0xc4>)
 8008fa4:	2207      	movs	r2, #7
 8008fa6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fa8:	e009      	b.n	8008fbe <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8008faa:	4b23      	ldr	r3, [pc, #140]	@ (8009038 <xPortStartScheduler+0xc4>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	4a21      	ldr	r2, [pc, #132]	@ (8009038 <xPortStartScheduler+0xc4>)
 8008fb2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fbe:	79fb      	ldrb	r3, [r7, #7]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fc6:	2b80      	cmp	r3, #128	@ 0x80
 8008fc8:	d0ef      	beq.n	8008faa <xPortStartScheduler+0x36>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fca:	4b1b      	ldr	r3, [pc, #108]	@ (8009038 <xPortStartScheduler+0xc4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	021b      	lsls	r3, r3, #8
 8008fd0:	4a19      	ldr	r2, [pc, #100]	@ (8009038 <xPortStartScheduler+0xc4>)
 8008fd2:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fd4:	4b18      	ldr	r3, [pc, #96]	@ (8009038 <xPortStartScheduler+0xc4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fdc:	4a16      	ldr	r2, [pc, #88]	@ (8009038 <xPortStartScheduler+0xc4>)
 8008fde:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008fe8:	4b14      	ldr	r3, [pc, #80]	@ (800903c <xPortStartScheduler+0xc8>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a13      	ldr	r2, [pc, #76]	@ (800903c <xPortStartScheduler+0xc8>)
 8008fee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008ff2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008ff4:	4b11      	ldr	r3, [pc, #68]	@ (800903c <xPortStartScheduler+0xc8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a10      	ldr	r2, [pc, #64]	@ (800903c <xPortStartScheduler+0xc8>)
 8008ffa:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ffe:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009000:	f000 f8ac 	bl	800915c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009004:	4b0e      	ldr	r3, [pc, #56]	@ (8009040 <xPortStartScheduler+0xcc>)
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800900a:	f000 f8cb 	bl	80091a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800900e:	4b0d      	ldr	r3, [pc, #52]	@ (8009044 <xPortStartScheduler+0xd0>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a0c      	ldr	r2, [pc, #48]	@ (8009044 <xPortStartScheduler+0xd0>)
 8009014:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009018:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800901a:	f7ff ff95 	bl	8008f48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800901e:	f7fe fecf 	bl	8007dc0 <vTaskSwitchContext>
    prvTaskExitError();
 8009022:	f7ff ff63 	bl	8008eec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	e000e400 	.word	0xe000e400
 8009034:	20000510 	.word	0x20000510
 8009038:	20000514 	.word	0x20000514
 800903c:	e000ed20 	.word	0xe000ed20
 8009040:	20000010 	.word	0x20000010
 8009044:	e000ef34 	.word	0xe000ef34

08009048 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
        __asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
    }
 8009060:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009062:	4b05      	ldr	r3, [pc, #20]	@ (8009078 <vPortEnterCritical+0x30>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3301      	adds	r3, #1
 8009068:	4a03      	ldr	r2, [pc, #12]	@ (8009078 <vPortEnterCritical+0x30>)
 800906a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20000010 	.word	0x20000010

0800907c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8009082:	4b0a      	ldr	r3, [pc, #40]	@ (80090ac <vPortExitCritical+0x30>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3b01      	subs	r3, #1
 8009088:	4a08      	ldr	r2, [pc, #32]	@ (80090ac <vPortExitCritical+0x30>)
 800908a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800908c:	4b07      	ldr	r3, [pc, #28]	@ (80090ac <vPortExitCritical+0x30>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d105      	bne.n	80090a0 <vPortExitCritical+0x24>
 8009094:	2300      	movs	r3, #0
 8009096:	607b      	str	r3, [r7, #4]
        __asm volatile
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f383 8811 	msr	BASEPRI, r3
    }
 800909e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	20000010 	.word	0x20000010

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b15      	ldr	r3, [pc, #84]	@ (8009110 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	f01e 0f10 	tst.w	lr, #16
 80090c0:	bf08      	it	eq
 80090c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	6010      	str	r0, [r2, #0]
 80090cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80090d4:	f380 8811 	msr	BASEPRI, r0
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f7fe fe6e 	bl	8007dc0 <vTaskSwitchContext>
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f380 8811 	msr	BASEPRI, r0
 80090ec:	bc09      	pop	{r0, r3}
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	6808      	ldr	r0, [r1, #0]
 80090f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f6:	f01e 0f10 	tst.w	lr, #16
 80090fa:	bf08      	it	eq
 80090fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009100:	f380 8809 	msr	PSP, r0
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst>:
 8009110:	200003d0 	.word	0x200003d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
        __asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	607b      	str	r3, [r7, #4]
    }
 8009130:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009132:	f7fe fd3f 	bl	8007bb4 <xTaskIncrementTick>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800913c:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <SysTick_Handler+0x40>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
    }
 800914e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009160:	4b0b      	ldr	r3, [pc, #44]	@ (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009166:	4b0b      	ldr	r3, [pc, #44]	@ (8009194 <vPortSetupTimerInterrupt+0x38>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800916c:	4b0a      	ldr	r3, [pc, #40]	@ (8009198 <vPortSetupTimerInterrupt+0x3c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0a      	ldr	r2, [pc, #40]	@ (800919c <vPortSetupTimerInterrupt+0x40>)
 8009172:	fba2 2303 	umull	r2, r3, r2, r3
 8009176:	099b      	lsrs	r3, r3, #6
 8009178:	4a09      	ldr	r2, [pc, #36]	@ (80091a0 <vPortSetupTimerInterrupt+0x44>)
 800917a:	3b01      	subs	r3, #1
 800917c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800917e:	4b04      	ldr	r3, [pc, #16]	@ (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009180:	2207      	movs	r2, #7
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	e000e010 	.word	0xe000e010
 8009194:	e000e018 	.word	0xe000e018
 8009198:	20000000 	.word	0x20000000
 800919c:	10624dd3 	.word	0x10624dd3
 80091a0:	e000e014 	.word	0xe000e014

080091a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80091a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80091b4 <vPortEnableVFP+0x10>
 80091a8:	6801      	ldr	r1, [r0, #0]
 80091aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091ae:	6001      	str	r1, [r0, #0]
 80091b0:	4770      	bx	lr
 80091b2:	0000      	.short	0x0000
 80091b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop

080091bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80091c2:	f3ef 8305 	mrs	r3, IPSR
 80091c6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	d904      	bls.n	80091d8 <vPortValidateInterruptPriority+0x1c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ce:	4a05      	ldr	r2, [pc, #20]	@ (80091e4 <vPortValidateInterruptPriority+0x28>)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4413      	add	r3, r2
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	70fb      	strb	r3, [r7, #3]
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    }
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	e000e3f0 	.word	0xe000e3f0

080091e8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b088      	sub	sp, #32
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80091f4:	f7fe fbc8 	bl	8007988 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80091f8:	4b43      	ldr	r3, [pc, #268]	@ (8009308 <pvPortMalloc+0x120>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009200:	f000 f8ca 	bl	8009398 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d012      	beq.n	8009230 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800920a:	2208      	movs	r2, #8
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	3308      	adds	r3, #8
 8009216:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	43db      	mvns	r3, r3
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	429a      	cmp	r2, r3
 8009220:	d804      	bhi.n	800922c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	4413      	add	r3, r2
 8009228:	607b      	str	r3, [r7, #4]
 800922a:	e001      	b.n	8009230 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	db60      	blt.n	80092f8 <pvPortMalloc+0x110>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d05d      	beq.n	80092f8 <pvPortMalloc+0x110>
 800923c:	4b33      	ldr	r3, [pc, #204]	@ (800930c <pvPortMalloc+0x124>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	429a      	cmp	r2, r3
 8009244:	d858      	bhi.n	80092f8 <pvPortMalloc+0x110>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009246:	4b32      	ldr	r3, [pc, #200]	@ (8009310 <pvPortMalloc+0x128>)
 8009248:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800924a:	4b31      	ldr	r3, [pc, #196]	@ (8009310 <pvPortMalloc+0x128>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009250:	e004      	b.n	800925c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	429a      	cmp	r2, r3
 8009264:	d903      	bls.n	800926e <pvPortMalloc+0x86>
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1f1      	bne.n	8009252 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800926e:	4b26      	ldr	r3, [pc, #152]	@ (8009308 <pvPortMalloc+0x120>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	429a      	cmp	r2, r3
 8009276:	d03f      	beq.n	80092f8 <pvPortMalloc+0x110>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2208      	movs	r2, #8
 800927e:	4413      	add	r3, r2
 8009280:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	1ad2      	subs	r2, r2, r3
 8009292:	2308      	movs	r3, #8
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	429a      	cmp	r2, r3
 8009298:	d90f      	bls.n	80092ba <pvPortMalloc+0xd2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4413      	add	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f8cb 	bl	8009450 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092ba:	4b14      	ldr	r3, [pc, #80]	@ (800930c <pvPortMalloc+0x124>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	4a11      	ldr	r2, [pc, #68]	@ (800930c <pvPortMalloc+0x124>)
 80092c6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092c8:	4b10      	ldr	r3, [pc, #64]	@ (800930c <pvPortMalloc+0x124>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	4b11      	ldr	r3, [pc, #68]	@ (8009314 <pvPortMalloc+0x12c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d203      	bcs.n	80092dc <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092d4:	4b0d      	ldr	r3, [pc, #52]	@ (800930c <pvPortMalloc+0x124>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009314 <pvPortMalloc+0x12c>)
 80092da:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	2200      	movs	r2, #0
 80092ec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80092ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009318 <pvPortMalloc+0x130>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3301      	adds	r3, #1
 80092f4:	4a08      	ldr	r2, [pc, #32]	@ (8009318 <pvPortMalloc+0x130>)
 80092f6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80092f8:	f7fe fb54 	bl	80079a4 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80092fc:	697b      	ldr	r3, [r7, #20]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3720      	adds	r7, #32
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20013120 	.word	0x20013120
 800930c:	20013124 	.word	0x20013124
 8009310:	20013118 	.word	0x20013118
 8009314:	20013128 	.word	0x20013128
 8009318:	2001312c 	.word	0x2001312c

0800931c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d02b      	beq.n	8009386 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800932e:	2308      	movs	r3, #8
 8009330:	425b      	negs	r3, r3
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4413      	add	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	0fdb      	lsrs	r3, r3, #31
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01c      	beq.n	8009386 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d118      	bne.n	8009386 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8009360:	f7fe fb12 	bl	8007988 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	4b09      	ldr	r3, [pc, #36]	@ (8009390 <vPortFree+0x74>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4413      	add	r3, r2
 800936e:	4a08      	ldr	r2, [pc, #32]	@ (8009390 <vPortFree+0x74>)
 8009370:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009372:	68b8      	ldr	r0, [r7, #8]
 8009374:	f000 f86c 	bl	8009450 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009378:	4b06      	ldr	r3, [pc, #24]	@ (8009394 <vPortFree+0x78>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3301      	adds	r3, #1
 800937e:	4a05      	ldr	r2, [pc, #20]	@ (8009394 <vPortFree+0x78>)
 8009380:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009382:	f7fe fb0f 	bl	80079a4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20013124 	.word	0x20013124
 8009394:	20013130 	.word	0x20013130

08009398 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800939e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80093a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80093a4:	4b25      	ldr	r3, [pc, #148]	@ (800943c <prvHeapInit+0xa4>)
 80093a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f003 0307 	and.w	r3, r3, #7
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00c      	beq.n	80093cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3307      	adds	r3, #7
 80093b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f023 0307 	bic.w	r3, r3, #7
 80093be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	4a1d      	ldr	r2, [pc, #116]	@ (800943c <prvHeapInit+0xa4>)
 80093c8:	4413      	add	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009440 <prvHeapInit+0xa8>)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80093d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009440 <prvHeapInit+0xa8>)
 80093d8:	2200      	movs	r2, #0
 80093da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4413      	add	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80093e4:	2208      	movs	r2, #8
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	1a9b      	subs	r3, r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0307 	bic.w	r3, r3, #7
 80093f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4a13      	ldr	r2, [pc, #76]	@ (8009444 <prvHeapInit+0xac>)
 80093f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80093fa:	4b12      	ldr	r3, [pc, #72]	@ (8009444 <prvHeapInit+0xac>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2200      	movs	r2, #0
 8009400:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8009402:	4b10      	ldr	r3, [pc, #64]	@ (8009444 <prvHeapInit+0xac>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	1ad2      	subs	r2, r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009418:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <prvHeapInit+0xac>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4a08      	ldr	r2, [pc, #32]	@ (8009448 <prvHeapInit+0xb0>)
 8009426:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	4a07      	ldr	r2, [pc, #28]	@ (800944c <prvHeapInit+0xb4>)
 800942e:	6013      	str	r3, [r2, #0]
}
 8009430:	bf00      	nop
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	20000518 	.word	0x20000518
 8009440:	20013118 	.word	0x20013118
 8009444:	20013120 	.word	0x20013120
 8009448:	20013128 	.word	0x20013128
 800944c:	20013124 	.word	0x20013124

08009450 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009458:	4b28      	ldr	r3, [pc, #160]	@ (80094fc <prvInsertBlockIntoFreeList+0xac>)
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	e002      	b.n	8009464 <prvInsertBlockIntoFreeList+0x14>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	429a      	cmp	r2, r3
 800946c:	d8f7      	bhi.n	800945e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	4413      	add	r3, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	429a      	cmp	r2, r3
 800947e:	d108      	bne.n	8009492 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	441a      	add	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	441a      	add	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d118      	bne.n	80094d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b15      	ldr	r3, [pc, #84]	@ (8009500 <prvInsertBlockIntoFreeList+0xb0>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d00d      	beq.n	80094ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	441a      	add	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	e008      	b.n	80094e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009500 <prvInsertBlockIntoFreeList+0xb0>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	e003      	b.n	80094e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d002      	beq.n	80094ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80094ee:	bf00      	nop
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	20013118 	.word	0x20013118
 8009500:	20013120 	.word	0x20013120

08009504 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009510:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009514:	f002 fccc 	bl	800beb0 <USBD_static_malloc>
 8009518:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d109      	bne.n	8009534 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	32b0      	adds	r2, #176	@ 0xb0
 800952a:	2100      	movs	r1, #0
 800952c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009530:	2302      	movs	r3, #2
 8009532:	e0d4      	b.n	80096de <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009534:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009538:	2100      	movs	r1, #0
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f002 ff04 	bl	800c348 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	32b0      	adds	r2, #176	@ 0xb0
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	32b0      	adds	r2, #176	@ 0xb0
 800955a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7c1b      	ldrb	r3, [r3, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d138      	bne.n	80095de <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800956c:	4b5e      	ldr	r3, [pc, #376]	@ (80096e8 <USBD_CDC_Init+0x1e4>)
 800956e:	7819      	ldrb	r1, [r3, #0]
 8009570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009574:	2202      	movs	r2, #2
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f002 fb77 	bl	800bc6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800957c:	4b5a      	ldr	r3, [pc, #360]	@ (80096e8 <USBD_CDC_Init+0x1e4>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	f003 020f 	and.w	r2, r3, #15
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	440b      	add	r3, r1
 8009590:	3324      	adds	r3, #36	@ 0x24
 8009592:	2201      	movs	r2, #1
 8009594:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009596:	4b55      	ldr	r3, [pc, #340]	@ (80096ec <USBD_CDC_Init+0x1e8>)
 8009598:	7819      	ldrb	r1, [r3, #0]
 800959a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800959e:	2202      	movs	r2, #2
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f002 fb62 	bl	800bc6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80095a6:	4b51      	ldr	r3, [pc, #324]	@ (80096ec <USBD_CDC_Init+0x1e8>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	f003 020f 	and.w	r2, r3, #15
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80095be:	2201      	movs	r2, #1
 80095c0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80095c2:	4b4b      	ldr	r3, [pc, #300]	@ (80096f0 <USBD_CDC_Init+0x1ec>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 020f 	and.w	r2, r3, #15
 80095ca:	6879      	ldr	r1, [r7, #4]
 80095cc:	4613      	mov	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	3326      	adds	r3, #38	@ 0x26
 80095d8:	2210      	movs	r2, #16
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e035      	b.n	800964a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80095de:	4b42      	ldr	r3, [pc, #264]	@ (80096e8 <USBD_CDC_Init+0x1e4>)
 80095e0:	7819      	ldrb	r1, [r3, #0]
 80095e2:	2340      	movs	r3, #64	@ 0x40
 80095e4:	2202      	movs	r2, #2
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f002 fb3f 	bl	800bc6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80095ec:	4b3e      	ldr	r3, [pc, #248]	@ (80096e8 <USBD_CDC_Init+0x1e4>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f003 020f 	and.w	r2, r3, #15
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	440b      	add	r3, r1
 8009600:	3324      	adds	r3, #36	@ 0x24
 8009602:	2201      	movs	r2, #1
 8009604:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009606:	4b39      	ldr	r3, [pc, #228]	@ (80096ec <USBD_CDC_Init+0x1e8>)
 8009608:	7819      	ldrb	r1, [r3, #0]
 800960a:	2340      	movs	r3, #64	@ 0x40
 800960c:	2202      	movs	r2, #2
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f002 fb2b 	bl	800bc6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009614:	4b35      	ldr	r3, [pc, #212]	@ (80096ec <USBD_CDC_Init+0x1e8>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800962c:	2201      	movs	r2, #1
 800962e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009630:	4b2f      	ldr	r3, [pc, #188]	@ (80096f0 <USBD_CDC_Init+0x1ec>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	f003 020f 	and.w	r2, r3, #15
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	4613      	mov	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	3326      	adds	r3, #38	@ 0x26
 8009646:	2210      	movs	r2, #16
 8009648:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800964a:	4b29      	ldr	r3, [pc, #164]	@ (80096f0 <USBD_CDC_Init+0x1ec>)
 800964c:	7819      	ldrb	r1, [r3, #0]
 800964e:	2308      	movs	r3, #8
 8009650:	2203      	movs	r2, #3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f002 fb09 	bl	800bc6a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009658:	4b25      	ldr	r3, [pc, #148]	@ (80096f0 <USBD_CDC_Init+0x1ec>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	f003 020f 	and.w	r2, r3, #15
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	3324      	adds	r3, #36	@ 0x24
 800966e:	2201      	movs	r2, #1
 8009670:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	33b0      	adds	r3, #176	@ 0xb0
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80096a8:	2302      	movs	r3, #2
 80096aa:	e018      	b.n	80096de <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7c1b      	ldrb	r3, [r3, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80096b4:	4b0d      	ldr	r3, [pc, #52]	@ (80096ec <USBD_CDC_Init+0x1e8>)
 80096b6:	7819      	ldrb	r1, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80096be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f002 fbc0 	bl	800be48 <USBD_LL_PrepareReceive>
 80096c8:	e008      	b.n	80096dc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80096ca:	4b08      	ldr	r3, [pc, #32]	@ (80096ec <USBD_CDC_Init+0x1e8>)
 80096cc:	7819      	ldrb	r1, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80096d4:	2340      	movs	r3, #64	@ 0x40
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f002 fbb6 	bl	800be48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	2000009b 	.word	0x2000009b
 80096ec:	2000009c 	.word	0x2000009c
 80096f0:	2000009d 	.word	0x2000009d

080096f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009700:	4b3a      	ldr	r3, [pc, #232]	@ (80097ec <USBD_CDC_DeInit+0xf8>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f002 fad5 	bl	800bcb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800970c:	4b37      	ldr	r3, [pc, #220]	@ (80097ec <USBD_CDC_DeInit+0xf8>)
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 020f 	and.w	r2, r3, #15
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3324      	adds	r3, #36	@ 0x24
 8009722:	2200      	movs	r2, #0
 8009724:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009726:	4b32      	ldr	r3, [pc, #200]	@ (80097f0 <USBD_CDC_DeInit+0xfc>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f002 fac2 	bl	800bcb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009732:	4b2f      	ldr	r3, [pc, #188]	@ (80097f0 <USBD_CDC_DeInit+0xfc>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	f003 020f 	and.w	r2, r3, #15
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	440b      	add	r3, r1
 8009746:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800974a:	2200      	movs	r2, #0
 800974c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800974e:	4b29      	ldr	r3, [pc, #164]	@ (80097f4 <USBD_CDC_DeInit+0x100>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f002 faae 	bl	800bcb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800975a:	4b26      	ldr	r3, [pc, #152]	@ (80097f4 <USBD_CDC_DeInit+0x100>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	f003 020f 	and.w	r2, r3, #15
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	3324      	adds	r3, #36	@ 0x24
 8009770:	2200      	movs	r2, #0
 8009772:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009774:	4b1f      	ldr	r3, [pc, #124]	@ (80097f4 <USBD_CDC_DeInit+0x100>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	f003 020f 	and.w	r2, r3, #15
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	4613      	mov	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	3326      	adds	r3, #38	@ 0x26
 800978a:	2200      	movs	r2, #0
 800978c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	32b0      	adds	r2, #176	@ 0xb0
 8009798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d01f      	beq.n	80097e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	33b0      	adds	r3, #176	@ 0xb0
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	32b0      	adds	r2, #176	@ 0xb0
 80097be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f002 fb82 	bl	800becc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	32b0      	adds	r2, #176	@ 0xb0
 80097d2:	2100      	movs	r1, #0
 80097d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	2000009b 	.word	0x2000009b
 80097f0:	2000009c 	.word	0x2000009c
 80097f4:	2000009d 	.word	0x2000009d

080097f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	32b0      	adds	r2, #176	@ 0xb0
 800980c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009810:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009824:	2303      	movs	r3, #3
 8009826:	e0bf      	b.n	80099a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009830:	2b00      	cmp	r3, #0
 8009832:	d050      	beq.n	80098d6 <USBD_CDC_Setup+0xde>
 8009834:	2b20      	cmp	r3, #32
 8009836:	f040 80af 	bne.w	8009998 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	88db      	ldrh	r3, [r3, #6]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d03a      	beq.n	80098b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b25b      	sxtb	r3, r3
 8009848:	2b00      	cmp	r3, #0
 800984a:	da1b      	bge.n	8009884 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	33b0      	adds	r3, #176	@ 0xb0
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009862:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	88d2      	ldrh	r2, [r2, #6]
 8009868:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	88db      	ldrh	r3, [r3, #6]
 800986e:	2b07      	cmp	r3, #7
 8009870:	bf28      	it	cs
 8009872:	2307      	movcs	r3, #7
 8009874:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	89fa      	ldrh	r2, [r7, #14]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f001 fd93 	bl	800b3a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009882:	e090      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	785a      	ldrb	r2, [r3, #1]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	88db      	ldrh	r3, [r3, #6]
 8009892:	2b3f      	cmp	r3, #63	@ 0x3f
 8009894:	d803      	bhi.n	800989e <USBD_CDC_Setup+0xa6>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	88db      	ldrh	r3, [r3, #6]
 800989a:	b2da      	uxtb	r2, r3
 800989c:	e000      	b.n	80098a0 <USBD_CDC_Setup+0xa8>
 800989e:	2240      	movs	r2, #64	@ 0x40
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80098a6:	6939      	ldr	r1, [r7, #16]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80098ae:	461a      	mov	r2, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 fda5 	bl	800b400 <USBD_CtlPrepareRx>
      break;
 80098b6:	e076      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	33b0      	adds	r3, #176	@ 0xb0
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	7850      	ldrb	r0, [r2, #1]
 80098ce:	2200      	movs	r2, #0
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	4798      	blx	r3
      break;
 80098d4:	e067      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b0b      	cmp	r3, #11
 80098dc:	d851      	bhi.n	8009982 <USBD_CDC_Setup+0x18a>
 80098de:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <USBD_CDC_Setup+0xec>)
 80098e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e4:	08009915 	.word	0x08009915
 80098e8:	08009991 	.word	0x08009991
 80098ec:	08009983 	.word	0x08009983
 80098f0:	08009983 	.word	0x08009983
 80098f4:	08009983 	.word	0x08009983
 80098f8:	08009983 	.word	0x08009983
 80098fc:	08009983 	.word	0x08009983
 8009900:	08009983 	.word	0x08009983
 8009904:	08009983 	.word	0x08009983
 8009908:	08009983 	.word	0x08009983
 800990c:	0800993f 	.word	0x0800993f
 8009910:	08009969 	.word	0x08009969
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b03      	cmp	r3, #3
 800991e:	d107      	bne.n	8009930 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009920:	f107 030a 	add.w	r3, r7, #10
 8009924:	2202      	movs	r2, #2
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f001 fd3d 	bl	800b3a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800992e:	e032      	b.n	8009996 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 fcbb 	bl	800b2ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009938:	2303      	movs	r3, #3
 800993a:	75fb      	strb	r3, [r7, #23]
          break;
 800993c:	e02b      	b.n	8009996 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b03      	cmp	r3, #3
 8009948:	d107      	bne.n	800995a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800994a:	f107 030d 	add.w	r3, r7, #13
 800994e:	2201      	movs	r2, #1
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 fd28 	bl	800b3a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009958:	e01d      	b.n	8009996 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 fca6 	bl	800b2ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009962:	2303      	movs	r3, #3
 8009964:	75fb      	strb	r3, [r7, #23]
          break;
 8009966:	e016      	b.n	8009996 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b03      	cmp	r3, #3
 8009972:	d00f      	beq.n	8009994 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fc99 	bl	800b2ae <USBD_CtlError>
            ret = USBD_FAIL;
 800997c:	2303      	movs	r3, #3
 800997e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009980:	e008      	b.n	8009994 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 fc92 	bl	800b2ae <USBD_CtlError>
          ret = USBD_FAIL;
 800998a:	2303      	movs	r3, #3
 800998c:	75fb      	strb	r3, [r7, #23]
          break;
 800998e:	e002      	b.n	8009996 <USBD_CDC_Setup+0x19e>
          break;
 8009990:	bf00      	nop
 8009992:	e008      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>
          break;
 8009994:	bf00      	nop
      }
      break;
 8009996:	e006      	b.n	80099a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f001 fc87 	bl	800b2ae <USBD_CtlError>
      ret = USBD_FAIL;
 80099a0:	2303      	movs	r3, #3
 80099a2:	75fb      	strb	r3, [r7, #23]
      break;
 80099a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	460b      	mov	r3, r1
 80099ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32b0      	adds	r2, #176	@ 0xb0
 80099ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e065      	b.n	8009aa6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	32b0      	adds	r2, #176	@ 0xb0
 80099e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	f003 020f 	and.w	r2, r3, #15
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	440b      	add	r3, r1
 80099fc:	3318      	adds	r3, #24
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d02f      	beq.n	8009a64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	f003 020f 	and.w	r2, r3, #15
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	440b      	add	r3, r1
 8009a16:	3318      	adds	r3, #24
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	78fb      	ldrb	r3, [r7, #3]
 8009a1c:	f003 010f 	and.w	r1, r3, #15
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	460b      	mov	r3, r1
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	440b      	add	r3, r1
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4403      	add	r3, r0
 8009a2c:	331c      	adds	r3, #28
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a34:	fb01 f303 	mul.w	r3, r1, r3
 8009a38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d112      	bne.n	8009a64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	f003 020f 	and.w	r2, r3, #15
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	4613      	mov	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4413      	add	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	3318      	adds	r3, #24
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a56:	78f9      	ldrb	r1, [r7, #3]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f002 f9d2 	bl	800be06 <USBD_LL_Transmit>
 8009a62:	e01f      	b.n	8009aa4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	33b0      	adds	r3, #176	@ 0xb0
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d010      	beq.n	8009aa4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	33b0      	adds	r3, #176	@ 0xb0
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009aa0:	78fa      	ldrb	r2, [r7, #3]
 8009aa2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	32b0      	adds	r2, #176	@ 0xb0
 8009ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	32b0      	adds	r2, #176	@ 0xb0
 8009ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e01a      	b.n	8009b16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f002 f9d0 	bl	800be8a <USBD_LL_GetRxDataSize>
 8009aea:	4602      	mov	r2, r0
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	33b0      	adds	r3, #176	@ 0xb0
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009b10:	4611      	mov	r1, r2
 8009b12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b084      	sub	sp, #16
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	32b0      	adds	r2, #176	@ 0xb0
 8009b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e024      	b.n	8009b8a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	33b0      	adds	r3, #176	@ 0xb0
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d019      	beq.n	8009b88 <USBD_CDC_EP0_RxReady+0x6a>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009b5a:	2bff      	cmp	r3, #255	@ 0xff
 8009b5c:	d014      	beq.n	8009b88 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	33b0      	adds	r3, #176	@ 0xb0
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009b76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b7e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	22ff      	movs	r2, #255	@ 0xff
 8009b84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b9c:	2182      	movs	r1, #130	@ 0x82
 8009b9e:	4818      	ldr	r0, [pc, #96]	@ (8009c00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ba0:	f000 fd4f 	bl	800a642 <USBD_GetEpDesc>
 8009ba4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	4815      	ldr	r0, [pc, #84]	@ (8009c00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009baa:	f000 fd4a 	bl	800a642 <USBD_GetEpDesc>
 8009bae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bb0:	2181      	movs	r1, #129	@ 0x81
 8009bb2:	4813      	ldr	r0, [pc, #76]	@ (8009c00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009bb4:	f000 fd45 	bl	800a642 <USBD_GetEpDesc>
 8009bb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2210      	movs	r2, #16
 8009bc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bd4:	711a      	strb	r2, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d006      	beq.n	8009bee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009be8:	711a      	strb	r2, [r3, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2243      	movs	r2, #67	@ 0x43
 8009bf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009bf4:	4b02      	ldr	r3, [pc, #8]	@ (8009c00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000058 	.word	0x20000058

08009c04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c0c:	2182      	movs	r1, #130	@ 0x82
 8009c0e:	4818      	ldr	r0, [pc, #96]	@ (8009c70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c10:	f000 fd17 	bl	800a642 <USBD_GetEpDesc>
 8009c14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c16:	2101      	movs	r1, #1
 8009c18:	4815      	ldr	r0, [pc, #84]	@ (8009c70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c1a:	f000 fd12 	bl	800a642 <USBD_GetEpDesc>
 8009c1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c20:	2181      	movs	r1, #129	@ 0x81
 8009c22:	4813      	ldr	r0, [pc, #76]	@ (8009c70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c24:	f000 fd0d 	bl	800a642 <USBD_GetEpDesc>
 8009c28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2210      	movs	r2, #16
 8009c34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d006      	beq.n	8009c4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	711a      	strb	r2, [r3, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f042 0202 	orr.w	r2, r2, #2
 8009c48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d006      	beq.n	8009c5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	711a      	strb	r2, [r3, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f042 0202 	orr.w	r2, r2, #2
 8009c5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2243      	movs	r2, #67	@ 0x43
 8009c62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c64:	4b02      	ldr	r3, [pc, #8]	@ (8009c70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20000058 	.word	0x20000058

08009c74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c7c:	2182      	movs	r1, #130	@ 0x82
 8009c7e:	4818      	ldr	r0, [pc, #96]	@ (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c80:	f000 fcdf 	bl	800a642 <USBD_GetEpDesc>
 8009c84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c86:	2101      	movs	r1, #1
 8009c88:	4815      	ldr	r0, [pc, #84]	@ (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c8a:	f000 fcda 	bl	800a642 <USBD_GetEpDesc>
 8009c8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c90:	2181      	movs	r1, #129	@ 0x81
 8009c92:	4813      	ldr	r0, [pc, #76]	@ (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c94:	f000 fcd5 	bl	800a642 <USBD_GetEpDesc>
 8009c98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	2210      	movs	r2, #16
 8009ca4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d006      	beq.n	8009cba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cb4:	711a      	strb	r2, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d006      	beq.n	8009cce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cc8:	711a      	strb	r2, [r3, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2243      	movs	r2, #67	@ 0x43
 8009cd2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cd4:	4b02      	ldr	r3, [pc, #8]	@ (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	20000058 	.word	0x20000058

08009ce4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	220a      	movs	r2, #10
 8009cf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cf2:	4b03      	ldr	r3, [pc, #12]	@ (8009d00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	20000014 	.word	0x20000014

08009d04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e009      	b.n	8009d2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	33b0      	adds	r3, #176	@ 0xb0
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b087      	sub	sp, #28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	32b0      	adds	r2, #176	@ 0xb0
 8009d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d52:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d101      	bne.n	8009d5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e008      	b.n	8009d70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	371c      	adds	r7, #28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	32b0      	adds	r2, #176	@ 0xb0
 8009d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e004      	b.n	8009daa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
	...

08009db8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	32b0      	adds	r2, #176	@ 0xb0
 8009dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e025      	b.n	8009e2a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d11f      	bne.n	8009e28 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009df0:	4b10      	ldr	r3, [pc, #64]	@ (8009e34 <USBD_CDC_TransmitPacket+0x7c>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	4613      	mov	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4403      	add	r3, r0
 8009e0a:	3318      	adds	r3, #24
 8009e0c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009e0e:	4b09      	ldr	r3, [pc, #36]	@ (8009e34 <USBD_CDC_TransmitPacket+0x7c>)
 8009e10:	7819      	ldrb	r1, [r3, #0]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f001 fff1 	bl	800be06 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	2000009b 	.word	0x2000009b

08009e38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	32b0      	adds	r2, #176	@ 0xb0
 8009e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	32b0      	adds	r2, #176	@ 0xb0
 8009e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e018      	b.n	8009e98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	7c1b      	ldrb	r3, [r3, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10a      	bne.n	8009e84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea0 <USBD_CDC_ReceivePacket+0x68>)
 8009e70:	7819      	ldrb	r1, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 ffe3 	bl	800be48 <USBD_LL_PrepareReceive>
 8009e82:	e008      	b.n	8009e96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e84:	4b06      	ldr	r3, [pc, #24]	@ (8009ea0 <USBD_CDC_ReceivePacket+0x68>)
 8009e86:	7819      	ldrb	r1, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e8e:	2340      	movs	r3, #64	@ 0x40
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 ffd9 	bl	800be48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	2000009c 	.word	0x2000009c

08009ea4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e01f      	b.n	8009efc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	79fa      	ldrb	r2, [r7, #7]
 8009eee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f001 fe53 	bl	800bb9c <USBD_LL_Init>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e025      	b.n	8009f68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	32ae      	adds	r2, #174	@ 0xae
 8009f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00f      	beq.n	8009f58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	32ae      	adds	r2, #174	@ 0xae
 8009f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f48:	f107 020e 	add.w	r2, r7, #14
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4798      	blx	r3
 8009f50:	4602      	mov	r2, r0
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009f5e:	1c5a      	adds	r2, r3, #1
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f001 fe5b 	bl	800bc34 <USBD_LL_Start>
 8009f7e:	4603      	mov	r3, r0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d009      	beq.n	8009fcc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	78fa      	ldrb	r2, [r7, #3]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	4798      	blx	r3
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b084      	sub	sp, #16
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	78fa      	ldrb	r2, [r7, #3]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a000:	7bfb      	ldrb	r3, [r7, #15]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f001 f90c 	bl	800b23a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a030:	461a      	mov	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a03e:	f003 031f 	and.w	r3, r3, #31
 800a042:	2b02      	cmp	r3, #2
 800a044:	d01a      	beq.n	800a07c <USBD_LL_SetupStage+0x72>
 800a046:	2b02      	cmp	r3, #2
 800a048:	d822      	bhi.n	800a090 <USBD_LL_SetupStage+0x86>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <USBD_LL_SetupStage+0x4a>
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d00a      	beq.n	800a068 <USBD_LL_SetupStage+0x5e>
 800a052:	e01d      	b.n	800a090 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fb63 	bl	800a728 <USBD_StdDevReq>
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]
      break;
 800a066:	e020      	b.n	800a0aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fbcb 	bl	800a80c <USBD_StdItfReq>
 800a076:	4603      	mov	r3, r0
 800a078:	73fb      	strb	r3, [r7, #15]
      break;
 800a07a:	e016      	b.n	800a0aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fc2d 	bl	800a8e4 <USBD_StdEPReq>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73fb      	strb	r3, [r7, #15]
      break;
 800a08e:	e00c      	b.n	800a0aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a096:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 fe28 	bl	800bcf4 <USBD_LL_StallEP>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a8:	bf00      	nop
  }

  return ret;
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d16e      	bne.n	800a1aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a0d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a0da:	2b03      	cmp	r3, #3
 800a0dc:	f040 8098 	bne.w	800a210 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d913      	bls.n	800a114 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	689a      	ldr	r2, [r3, #8]
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	1ad2      	subs	r2, r2, r3
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	4293      	cmp	r3, r2
 800a104:	bf28      	it	cs
 800a106:	4613      	movcs	r3, r2
 800a108:	461a      	mov	r2, r3
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f001 f994 	bl	800b43a <USBD_CtlContinueRx>
 800a112:	e07d      	b.n	800a210 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a11a:	f003 031f 	and.w	r3, r3, #31
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d014      	beq.n	800a14c <USBD_LL_DataOutStage+0x98>
 800a122:	2b02      	cmp	r3, #2
 800a124:	d81d      	bhi.n	800a162 <USBD_LL_DataOutStage+0xae>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <USBD_LL_DataOutStage+0x7c>
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d003      	beq.n	800a136 <USBD_LL_DataOutStage+0x82>
 800a12e:	e018      	b.n	800a162 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a130:	2300      	movs	r3, #0
 800a132:	75bb      	strb	r3, [r7, #22]
            break;
 800a134:	e018      	b.n	800a168 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	4619      	mov	r1, r3
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 fa64 	bl	800a60e <USBD_CoreFindIF>
 800a146:	4603      	mov	r3, r0
 800a148:	75bb      	strb	r3, [r7, #22]
            break;
 800a14a:	e00d      	b.n	800a168 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a152:	b2db      	uxtb	r3, r3
 800a154:	4619      	mov	r1, r3
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 fa66 	bl	800a628 <USBD_CoreFindEP>
 800a15c:	4603      	mov	r3, r0
 800a15e:	75bb      	strb	r3, [r7, #22]
            break;
 800a160:	e002      	b.n	800a168 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a162:	2300      	movs	r3, #0
 800a164:	75bb      	strb	r3, [r7, #22]
            break;
 800a166:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a168:	7dbb      	ldrb	r3, [r7, #22]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d119      	bne.n	800a1a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b03      	cmp	r3, #3
 800a178:	d113      	bne.n	800a1a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a17a:	7dba      	ldrb	r2, [r7, #22]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	32ae      	adds	r2, #174	@ 0xae
 800a180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00b      	beq.n	800a1a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a18a:	7dba      	ldrb	r2, [r7, #22]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a192:	7dba      	ldrb	r2, [r7, #22]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	32ae      	adds	r2, #174	@ 0xae
 800a198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f001 f95a 	bl	800b45c <USBD_CtlSendStatus>
 800a1a8:	e032      	b.n	800a210 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 fa37 	bl	800a628 <USBD_CoreFindEP>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1be:	7dbb      	ldrb	r3, [r7, #22]
 800a1c0:	2bff      	cmp	r3, #255	@ 0xff
 800a1c2:	d025      	beq.n	800a210 <USBD_LL_DataOutStage+0x15c>
 800a1c4:	7dbb      	ldrb	r3, [r7, #22]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d122      	bne.n	800a210 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d117      	bne.n	800a206 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a1d6:	7dba      	ldrb	r2, [r7, #22]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	32ae      	adds	r2, #174	@ 0xae
 800a1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00f      	beq.n	800a206 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a1e6:	7dba      	ldrb	r2, [r7, #22]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a1ee:	7dba      	ldrb	r2, [r7, #22]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	32ae      	adds	r2, #174	@ 0xae
 800a1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	7afa      	ldrb	r2, [r7, #11]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	4798      	blx	r3
 800a202:	4603      	mov	r3, r0
 800a204:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	e000      	b.n	800a212 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b086      	sub	sp, #24
 800a21e:	af00      	add	r7, sp, #0
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	460b      	mov	r3, r1
 800a224:	607a      	str	r2, [r7, #4]
 800a226:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a228:	7afb      	ldrb	r3, [r7, #11]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d16f      	bne.n	800a30e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3314      	adds	r3, #20
 800a232:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d15a      	bne.n	800a2f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	429a      	cmp	r2, r3
 800a248:	d914      	bls.n	800a274 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	1ad2      	subs	r2, r2, r3
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	461a      	mov	r2, r3
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f001 f8bc 	bl	800b3de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a266:	2300      	movs	r3, #0
 800a268:	2200      	movs	r2, #0
 800a26a:	2100      	movs	r1, #0
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f001 fdeb 	bl	800be48 <USBD_LL_PrepareReceive>
 800a272:	e03f      	b.n	800a2f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	68da      	ldr	r2, [r3, #12]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d11c      	bne.n	800a2ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a288:	429a      	cmp	r2, r3
 800a28a:	d316      	bcc.n	800a2ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a296:	429a      	cmp	r2, r3
 800a298:	d20f      	bcs.n	800a2ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a29a:	2200      	movs	r2, #0
 800a29c:	2100      	movs	r1, #0
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f001 f89d 	bl	800b3de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f001 fdc8 	bl	800be48 <USBD_LL_PrepareReceive>
 800a2b8:	e01c      	b.n	800a2f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d10f      	bne.n	800a2e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2e6:	2180      	movs	r1, #128	@ 0x80
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f001 fd03 	bl	800bcf4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f001 f8c7 	bl	800b482 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d03a      	beq.n	800a374 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f7ff fe42 	bl	8009f88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a30c:	e032      	b.n	800a374 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a30e:	7afb      	ldrb	r3, [r7, #11]
 800a310:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a314:	b2db      	uxtb	r3, r3
 800a316:	4619      	mov	r1, r3
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f985 	bl	800a628 <USBD_CoreFindEP>
 800a31e:	4603      	mov	r3, r0
 800a320:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	2bff      	cmp	r3, #255	@ 0xff
 800a326:	d025      	beq.n	800a374 <USBD_LL_DataInStage+0x15a>
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d122      	bne.n	800a374 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b03      	cmp	r3, #3
 800a338:	d11c      	bne.n	800a374 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a33a:	7dfa      	ldrb	r2, [r7, #23]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	32ae      	adds	r2, #174	@ 0xae
 800a340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d014      	beq.n	800a374 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a34a:	7dfa      	ldrb	r2, [r7, #23]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a352:	7dfa      	ldrb	r2, [r7, #23]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	32ae      	adds	r2, #174	@ 0xae
 800a358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	7afa      	ldrb	r2, [r7, #11]
 800a360:	4611      	mov	r1, r2
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	4798      	blx	r3
 800a366:	4603      	mov	r3, r0
 800a368:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a36a:	7dbb      	ldrb	r3, [r7, #22]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a370:	7dbb      	ldrb	r3, [r7, #22]
 800a372:	e000      	b.n	800a376 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d014      	beq.n	800a3e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00e      	beq.n	800a3e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	6852      	ldr	r2, [r2, #4]
 800a3d2:	b2d2      	uxtb	r2, r2
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4798      	blx	r3
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3e4:	2340      	movs	r3, #64	@ 0x40
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 fc3d 	bl	800bc6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2240      	movs	r2, #64	@ 0x40
 800a3fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a400:	2340      	movs	r3, #64	@ 0x40
 800a402:	2200      	movs	r2, #0
 800a404:	2180      	movs	r1, #128	@ 0x80
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f001 fc2f 	bl	800bc6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2240      	movs	r2, #64	@ 0x40
 800a416:	621a      	str	r2, [r3, #32]

  return ret;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b04      	cmp	r3, #4
 800a454:	d006      	beq.n	800a464 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2204      	movs	r2, #4
 800a468:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d106      	bne.n	800a49c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a494:	b2da      	uxtb	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d110      	bne.n	800a4e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00b      	beq.n	800a4e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4da:	69db      	ldr	r3, [r3, #28]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	32ae      	adds	r2, #174	@ 0xae
 800a500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a508:	2303      	movs	r3, #3
 800a50a:	e01c      	b.n	800a546 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b03      	cmp	r3, #3
 800a516:	d115      	bne.n	800a544 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	32ae      	adds	r2, #174	@ 0xae
 800a522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	32ae      	adds	r2, #174	@ 0xae
 800a536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	78fa      	ldrb	r2, [r7, #3]
 800a53e:	4611      	mov	r1, r2
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	32ae      	adds	r2, #174	@ 0xae
 800a564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e01c      	b.n	800a5aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d115      	bne.n	800a5a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	32ae      	adds	r2, #174	@ 0xae
 800a586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00b      	beq.n	800a5a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	32ae      	adds	r2, #174	@ 0xae
 800a59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a0:	78fa      	ldrb	r2, [r7, #3]
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b083      	sub	sp, #12
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00e      	beq.n	800a604 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	6852      	ldr	r2, [r2, #4]
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	4798      	blx	r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a600:	2303      	movs	r3, #3
 800a602:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a604:	7bfb      	ldrb	r3, [r7, #15]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
 800a616:	460b      	mov	r3, r1
 800a618:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a61a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a634:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b086      	sub	sp, #24
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	460b      	mov	r3, r1
 800a64c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a656:	2300      	movs	r3, #0
 800a658:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	885b      	ldrh	r3, [r3, #2]
 800a65e:	b29b      	uxth	r3, r3
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	4293      	cmp	r3, r2
 800a666:	d91f      	bls.n	800a6a8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a66e:	e013      	b.n	800a698 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a670:	f107 030a 	add.w	r3, r7, #10
 800a674:	4619      	mov	r1, r3
 800a676:	6978      	ldr	r0, [r7, #20]
 800a678:	f000 f81b 	bl	800a6b2 <USBD_GetNextDesc>
 800a67c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	2b05      	cmp	r3, #5
 800a684:	d108      	bne.n	800a698 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	789b      	ldrb	r3, [r3, #2]
 800a68e:	78fa      	ldrb	r2, [r7, #3]
 800a690:	429a      	cmp	r2, r3
 800a692:	d008      	beq.n	800a6a6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a694:	2300      	movs	r3, #0
 800a696:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	885b      	ldrh	r3, [r3, #2]
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	897b      	ldrh	r3, [r7, #10]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d8e5      	bhi.n	800a670 <USBD_GetEpDesc+0x2e>
 800a6a4:	e000      	b.n	800a6a8 <USBD_GetEpDesc+0x66>
          break;
 800a6a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a6a8:	693b      	ldr	r3, [r7, #16]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3718      	adds	r7, #24
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b085      	sub	sp, #20
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	7812      	ldrb	r2, [r2, #0]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4413      	add	r3, r2
 800a6da:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b087      	sub	sp, #28
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	3301      	adds	r3, #1
 800a700:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a708:	8a3b      	ldrh	r3, [r7, #16]
 800a70a:	021b      	lsls	r3, r3, #8
 800a70c:	b21a      	sxth	r2, r3
 800a70e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a712:	4313      	orrs	r3, r2
 800a714:	b21b      	sxth	r3, r3
 800a716:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a718:	89fb      	ldrh	r3, [r7, #14]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	371c      	adds	r7, #28
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
	...

0800a728 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a73e:	2b40      	cmp	r3, #64	@ 0x40
 800a740:	d005      	beq.n	800a74e <USBD_StdDevReq+0x26>
 800a742:	2b40      	cmp	r3, #64	@ 0x40
 800a744:	d857      	bhi.n	800a7f6 <USBD_StdDevReq+0xce>
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00f      	beq.n	800a76a <USBD_StdDevReq+0x42>
 800a74a:	2b20      	cmp	r3, #32
 800a74c:	d153      	bne.n	800a7f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	32ae      	adds	r2, #174	@ 0xae
 800a758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	4798      	blx	r3
 800a764:	4603      	mov	r3, r0
 800a766:	73fb      	strb	r3, [r7, #15]
      break;
 800a768:	e04a      	b.n	800a800 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	2b09      	cmp	r3, #9
 800a770:	d83b      	bhi.n	800a7ea <USBD_StdDevReq+0xc2>
 800a772:	a201      	add	r2, pc, #4	@ (adr r2, 800a778 <USBD_StdDevReq+0x50>)
 800a774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a778:	0800a7cd 	.word	0x0800a7cd
 800a77c:	0800a7e1 	.word	0x0800a7e1
 800a780:	0800a7eb 	.word	0x0800a7eb
 800a784:	0800a7d7 	.word	0x0800a7d7
 800a788:	0800a7eb 	.word	0x0800a7eb
 800a78c:	0800a7ab 	.word	0x0800a7ab
 800a790:	0800a7a1 	.word	0x0800a7a1
 800a794:	0800a7eb 	.word	0x0800a7eb
 800a798:	0800a7c3 	.word	0x0800a7c3
 800a79c:	0800a7b5 	.word	0x0800a7b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fa3c 	bl	800ac20 <USBD_GetDescriptor>
          break;
 800a7a8:	e024      	b.n	800a7f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fba1 	bl	800aef4 <USBD_SetAddress>
          break;
 800a7b2:	e01f      	b.n	800a7f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fbe0 	bl	800af7c <USBD_SetConfig>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73fb      	strb	r3, [r7, #15]
          break;
 800a7c0:	e018      	b.n	800a7f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fc83 	bl	800b0d0 <USBD_GetConfig>
          break;
 800a7ca:	e013      	b.n	800a7f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fcb4 	bl	800b13c <USBD_GetStatus>
          break;
 800a7d4:	e00e      	b.n	800a7f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fce3 	bl	800b1a4 <USBD_SetFeature>
          break;
 800a7de:	e009      	b.n	800a7f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fd07 	bl	800b1f6 <USBD_ClrFeature>
          break;
 800a7e8:	e004      	b.n	800a7f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fd5e 	bl	800b2ae <USBD_CtlError>
          break;
 800a7f2:	bf00      	nop
      }
      break;
 800a7f4:	e004      	b.n	800a800 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fd58 	bl	800b2ae <USBD_CtlError>
      break;
 800a7fe:	bf00      	nop
  }

  return ret;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop

0800a80c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a822:	2b40      	cmp	r3, #64	@ 0x40
 800a824:	d005      	beq.n	800a832 <USBD_StdItfReq+0x26>
 800a826:	2b40      	cmp	r3, #64	@ 0x40
 800a828:	d852      	bhi.n	800a8d0 <USBD_StdItfReq+0xc4>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <USBD_StdItfReq+0x26>
 800a82e:	2b20      	cmp	r3, #32
 800a830:	d14e      	bne.n	800a8d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	3b01      	subs	r3, #1
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d840      	bhi.n	800a8c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	889b      	ldrh	r3, [r3, #4]
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b01      	cmp	r3, #1
 800a848:	d836      	bhi.n	800a8b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	889b      	ldrh	r3, [r3, #4]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff fedb 	bl	800a60e <USBD_CoreFindIF>
 800a858:	4603      	mov	r3, r0
 800a85a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	2bff      	cmp	r3, #255	@ 0xff
 800a860:	d01d      	beq.n	800a89e <USBD_StdItfReq+0x92>
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d11a      	bne.n	800a89e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a868:	7bba      	ldrb	r2, [r7, #14]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	32ae      	adds	r2, #174	@ 0xae
 800a86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00f      	beq.n	800a898 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a878:	7bba      	ldrb	r2, [r7, #14]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a880:	7bba      	ldrb	r2, [r7, #14]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	32ae      	adds	r2, #174	@ 0xae
 800a886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	4798      	blx	r3
 800a892:	4603      	mov	r3, r0
 800a894:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a896:	e004      	b.n	800a8a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a898:	2303      	movs	r3, #3
 800a89a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a89c:	e001      	b.n	800a8a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	88db      	ldrh	r3, [r3, #6]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d110      	bne.n	800a8cc <USBD_StdItfReq+0xc0>
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10d      	bne.n	800a8cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fdd3 	bl	800b45c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8b6:	e009      	b.n	800a8cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a8b8:	6839      	ldr	r1, [r7, #0]
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fcf7 	bl	800b2ae <USBD_CtlError>
          break;
 800a8c0:	e004      	b.n	800a8cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fcf2 	bl	800b2ae <USBD_CtlError>
          break;
 800a8ca:	e000      	b.n	800a8ce <USBD_StdItfReq+0xc2>
          break;
 800a8cc:	bf00      	nop
      }
      break;
 800a8ce:	e004      	b.n	800a8da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fceb 	bl	800b2ae <USBD_CtlError>
      break;
 800a8d8:	bf00      	nop
  }

  return ret;
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	889b      	ldrh	r3, [r3, #4]
 800a8f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a900:	2b40      	cmp	r3, #64	@ 0x40
 800a902:	d007      	beq.n	800a914 <USBD_StdEPReq+0x30>
 800a904:	2b40      	cmp	r3, #64	@ 0x40
 800a906:	f200 817f 	bhi.w	800ac08 <USBD_StdEPReq+0x324>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d02a      	beq.n	800a964 <USBD_StdEPReq+0x80>
 800a90e:	2b20      	cmp	r3, #32
 800a910:	f040 817a 	bne.w	800ac08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff fe85 	bl	800a628 <USBD_CoreFindEP>
 800a91e:	4603      	mov	r3, r0
 800a920:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a922:	7b7b      	ldrb	r3, [r7, #13]
 800a924:	2bff      	cmp	r3, #255	@ 0xff
 800a926:	f000 8174 	beq.w	800ac12 <USBD_StdEPReq+0x32e>
 800a92a:	7b7b      	ldrb	r3, [r7, #13]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f040 8170 	bne.w	800ac12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a932:	7b7a      	ldrb	r2, [r7, #13]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a93a:	7b7a      	ldrb	r2, [r7, #13]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	32ae      	adds	r2, #174	@ 0xae
 800a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 8163 	beq.w	800ac12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a94c:	7b7a      	ldrb	r2, [r7, #13]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	32ae      	adds	r2, #174	@ 0xae
 800a952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	4798      	blx	r3
 800a95e:	4603      	mov	r3, r0
 800a960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a962:	e156      	b.n	800ac12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	785b      	ldrb	r3, [r3, #1]
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d008      	beq.n	800a97e <USBD_StdEPReq+0x9a>
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	f300 8145 	bgt.w	800abfc <USBD_StdEPReq+0x318>
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 809b 	beq.w	800aaae <USBD_StdEPReq+0x1ca>
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d03c      	beq.n	800a9f6 <USBD_StdEPReq+0x112>
 800a97c:	e13e      	b.n	800abfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b02      	cmp	r3, #2
 800a988:	d002      	beq.n	800a990 <USBD_StdEPReq+0xac>
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d016      	beq.n	800a9bc <USBD_StdEPReq+0xd8>
 800a98e:	e02c      	b.n	800a9ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00d      	beq.n	800a9b2 <USBD_StdEPReq+0xce>
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	2b80      	cmp	r3, #128	@ 0x80
 800a99a:	d00a      	beq.n	800a9b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f001 f9a7 	bl	800bcf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9a6:	2180      	movs	r1, #128	@ 0x80
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 f9a3 	bl	800bcf4 <USBD_LL_StallEP>
 800a9ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9b0:	e020      	b.n	800a9f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fc7a 	bl	800b2ae <USBD_CtlError>
              break;
 800a9ba:	e01b      	b.n	800a9f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	885b      	ldrh	r3, [r3, #2]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10e      	bne.n	800a9e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00b      	beq.n	800a9e2 <USBD_StdEPReq+0xfe>
 800a9ca:	7bbb      	ldrb	r3, [r7, #14]
 800a9cc:	2b80      	cmp	r3, #128	@ 0x80
 800a9ce:	d008      	beq.n	800a9e2 <USBD_StdEPReq+0xfe>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	88db      	ldrh	r3, [r3, #6]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d104      	bne.n	800a9e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 f989 	bl	800bcf4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fd3a 	bl	800b45c <USBD_CtlSendStatus>

              break;
 800a9e8:	e004      	b.n	800a9f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fc5e 	bl	800b2ae <USBD_CtlError>
              break;
 800a9f2:	bf00      	nop
          }
          break;
 800a9f4:	e107      	b.n	800ac06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d002      	beq.n	800aa08 <USBD_StdEPReq+0x124>
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d016      	beq.n	800aa34 <USBD_StdEPReq+0x150>
 800aa06:	e04b      	b.n	800aaa0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00d      	beq.n	800aa2a <USBD_StdEPReq+0x146>
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	2b80      	cmp	r3, #128	@ 0x80
 800aa12:	d00a      	beq.n	800aa2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa14:	7bbb      	ldrb	r3, [r7, #14]
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 f96b 	bl	800bcf4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa1e:	2180      	movs	r1, #128	@ 0x80
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 f967 	bl	800bcf4 <USBD_LL_StallEP>
 800aa26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa28:	e040      	b.n	800aaac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fc3e 	bl	800b2ae <USBD_CtlError>
              break;
 800aa32:	e03b      	b.n	800aaac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	885b      	ldrh	r3, [r3, #2]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d136      	bne.n	800aaaa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d004      	beq.n	800aa50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 f971 	bl	800bd32 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fd03 	bl	800b45c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7ff fde4 	bl	800a628 <USBD_CoreFindEP>
 800aa60:	4603      	mov	r3, r0
 800aa62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa64:	7b7b      	ldrb	r3, [r7, #13]
 800aa66:	2bff      	cmp	r3, #255	@ 0xff
 800aa68:	d01f      	beq.n	800aaaa <USBD_StdEPReq+0x1c6>
 800aa6a:	7b7b      	ldrb	r3, [r7, #13]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d11c      	bne.n	800aaaa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa70:	7b7a      	ldrb	r2, [r7, #13]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa78:	7b7a      	ldrb	r2, [r7, #13]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	32ae      	adds	r2, #174	@ 0xae
 800aa7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d010      	beq.n	800aaaa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa88:	7b7a      	ldrb	r2, [r7, #13]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	32ae      	adds	r2, #174	@ 0xae
 800aa8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	4798      	blx	r3
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa9e:	e004      	b.n	800aaaa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fc03 	bl	800b2ae <USBD_CtlError>
              break;
 800aaa8:	e000      	b.n	800aaac <USBD_StdEPReq+0x1c8>
              break;
 800aaaa:	bf00      	nop
          }
          break;
 800aaac:	e0ab      	b.n	800ac06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d002      	beq.n	800aac0 <USBD_StdEPReq+0x1dc>
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d032      	beq.n	800ab24 <USBD_StdEPReq+0x240>
 800aabe:	e097      	b.n	800abf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d007      	beq.n	800aad6 <USBD_StdEPReq+0x1f2>
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b80      	cmp	r3, #128	@ 0x80
 800aaca:	d004      	beq.n	800aad6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fbed 	bl	800b2ae <USBD_CtlError>
                break;
 800aad4:	e091      	b.n	800abfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	da0b      	bge.n	800aaf6 <USBD_StdEPReq+0x212>
 800aade:	7bbb      	ldrb	r3, [r7, #14]
 800aae0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	3310      	adds	r3, #16
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	3304      	adds	r3, #4
 800aaf4:	e00b      	b.n	800ab0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aafc:	4613      	mov	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2202      	movs	r2, #2
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc43 	bl	800b3a8 <USBD_CtlSendData>
              break;
 800ab22:	e06a      	b.n	800abfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	da11      	bge.n	800ab50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab2c:	7bbb      	ldrb	r3, [r7, #14]
 800ab2e:	f003 020f 	and.w	r2, r3, #15
 800ab32:	6879      	ldr	r1, [r7, #4]
 800ab34:	4613      	mov	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	440b      	add	r3, r1
 800ab3e:	3324      	adds	r3, #36	@ 0x24
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d117      	bne.n	800ab76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fbb0 	bl	800b2ae <USBD_CtlError>
                  break;
 800ab4e:	e054      	b.n	800abfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab50:	7bbb      	ldrb	r3, [r7, #14]
 800ab52:	f003 020f 	and.w	r2, r3, #15
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	4613      	mov	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	440b      	add	r3, r1
 800ab62:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d104      	bne.n	800ab76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fb9d 	bl	800b2ae <USBD_CtlError>
                  break;
 800ab74:	e041      	b.n	800abfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	da0b      	bge.n	800ab96 <USBD_StdEPReq+0x2b2>
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	3310      	adds	r3, #16
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	4413      	add	r3, r2
 800ab92:	3304      	adds	r3, #4
 800ab94:	e00b      	b.n	800abae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	4413      	add	r3, r2
 800abac:	3304      	adds	r3, #4
 800abae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abb0:	7bbb      	ldrb	r3, [r7, #14]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <USBD_StdEPReq+0x2d8>
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	2b80      	cmp	r3, #128	@ 0x80
 800abba:	d103      	bne.n	800abc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2200      	movs	r2, #0
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	e00e      	b.n	800abe2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 f8d1 	bl	800bd70 <USBD_LL_IsStallEP>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d003      	beq.n	800abdc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2201      	movs	r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	e002      	b.n	800abe2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2200      	movs	r2, #0
 800abe0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2202      	movs	r2, #2
 800abe6:	4619      	mov	r1, r3
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fbdd 	bl	800b3a8 <USBD_CtlSendData>
              break;
 800abee:	e004      	b.n	800abfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fb5b 	bl	800b2ae <USBD_CtlError>
              break;
 800abf8:	bf00      	nop
          }
          break;
 800abfa:	e004      	b.n	800ac06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fb55 	bl	800b2ae <USBD_CtlError>
          break;
 800ac04:	bf00      	nop
      }
      break;
 800ac06:	e005      	b.n	800ac14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fb4f 	bl	800b2ae <USBD_CtlError>
      break;
 800ac10:	e000      	b.n	800ac14 <USBD_StdEPReq+0x330>
      break;
 800ac12:	bf00      	nop
  }

  return ret;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	885b      	ldrh	r3, [r3, #2]
 800ac3a:	0a1b      	lsrs	r3, r3, #8
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	2b06      	cmp	r3, #6
 800ac42:	f200 8128 	bhi.w	800ae96 <USBD_GetDescriptor+0x276>
 800ac46:	a201      	add	r2, pc, #4	@ (adr r2, 800ac4c <USBD_GetDescriptor+0x2c>)
 800ac48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4c:	0800ac69 	.word	0x0800ac69
 800ac50:	0800ac81 	.word	0x0800ac81
 800ac54:	0800acc1 	.word	0x0800acc1
 800ac58:	0800ae97 	.word	0x0800ae97
 800ac5c:	0800ae97 	.word	0x0800ae97
 800ac60:	0800ae37 	.word	0x0800ae37
 800ac64:	0800ae63 	.word	0x0800ae63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	7c12      	ldrb	r2, [r2, #16]
 800ac74:	f107 0108 	add.w	r1, r7, #8
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4798      	blx	r3
 800ac7c:	60f8      	str	r0, [r7, #12]
      break;
 800ac7e:	e112      	b.n	800aea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	7c1b      	ldrb	r3, [r3, #16]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10d      	bne.n	800aca4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac90:	f107 0208 	add.w	r2, r7, #8
 800ac94:	4610      	mov	r0, r2
 800ac96:	4798      	blx	r3
 800ac98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	2202      	movs	r2, #2
 800aca0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aca2:	e100      	b.n	800aea6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acac:	f107 0208 	add.w	r2, r7, #8
 800acb0:	4610      	mov	r0, r2
 800acb2:	4798      	blx	r3
 800acb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	3301      	adds	r3, #1
 800acba:	2202      	movs	r2, #2
 800acbc:	701a      	strb	r2, [r3, #0]
      break;
 800acbe:	e0f2      	b.n	800aea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	885b      	ldrh	r3, [r3, #2]
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b05      	cmp	r3, #5
 800acc8:	f200 80ac 	bhi.w	800ae24 <USBD_GetDescriptor+0x204>
 800accc:	a201      	add	r2, pc, #4	@ (adr r2, 800acd4 <USBD_GetDescriptor+0xb4>)
 800acce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd2:	bf00      	nop
 800acd4:	0800aced 	.word	0x0800aced
 800acd8:	0800ad21 	.word	0x0800ad21
 800acdc:	0800ad55 	.word	0x0800ad55
 800ace0:	0800ad89 	.word	0x0800ad89
 800ace4:	0800adbd 	.word	0x0800adbd
 800ace8:	0800adf1 	.word	0x0800adf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00b      	beq.n	800ad10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	7c12      	ldrb	r2, [r2, #16]
 800ad04:	f107 0108 	add.w	r1, r7, #8
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
 800ad0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0e:	e091      	b.n	800ae34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 facb 	bl	800b2ae <USBD_CtlError>
            err++;
 800ad18:	7afb      	ldrb	r3, [r7, #11]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1e:	e089      	b.n	800ae34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	7c12      	ldrb	r2, [r2, #16]
 800ad38:	f107 0108 	add.w	r1, r7, #8
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
 800ad40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad42:	e077      	b.n	800ae34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fab1 	bl	800b2ae <USBD_CtlError>
            err++;
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	72fb      	strb	r3, [r7, #11]
          break;
 800ad52:	e06f      	b.n	800ae34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7c12      	ldrb	r2, [r2, #16]
 800ad6c:	f107 0108 	add.w	r1, r7, #8
 800ad70:	4610      	mov	r0, r2
 800ad72:	4798      	blx	r3
 800ad74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad76:	e05d      	b.n	800ae34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fa97 	bl	800b2ae <USBD_CtlError>
            err++;
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	3301      	adds	r3, #1
 800ad84:	72fb      	strb	r3, [r7, #11]
          break;
 800ad86:	e055      	b.n	800ae34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00b      	beq.n	800adac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	7c12      	ldrb	r2, [r2, #16]
 800ada0:	f107 0108 	add.w	r1, r7, #8
 800ada4:	4610      	mov	r0, r2
 800ada6:	4798      	blx	r3
 800ada8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adaa:	e043      	b.n	800ae34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fa7d 	bl	800b2ae <USBD_CtlError>
            err++;
 800adb4:	7afb      	ldrb	r3, [r7, #11]
 800adb6:	3301      	adds	r3, #1
 800adb8:	72fb      	strb	r3, [r7, #11]
          break;
 800adba:	e03b      	b.n	800ae34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	7c12      	ldrb	r2, [r2, #16]
 800add4:	f107 0108 	add.w	r1, r7, #8
 800add8:	4610      	mov	r0, r2
 800adda:	4798      	blx	r3
 800addc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adde:	e029      	b.n	800ae34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa63 	bl	800b2ae <USBD_CtlError>
            err++;
 800ade8:	7afb      	ldrb	r3, [r7, #11]
 800adea:	3301      	adds	r3, #1
 800adec:	72fb      	strb	r3, [r7, #11]
          break;
 800adee:	e021      	b.n	800ae34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00b      	beq.n	800ae14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	7c12      	ldrb	r2, [r2, #16]
 800ae08:	f107 0108 	add.w	r1, r7, #8
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	4798      	blx	r3
 800ae10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae12:	e00f      	b.n	800ae34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa49 	bl	800b2ae <USBD_CtlError>
            err++;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	72fb      	strb	r3, [r7, #11]
          break;
 800ae22:	e007      	b.n	800ae34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fa41 	bl	800b2ae <USBD_CtlError>
          err++;
 800ae2c:	7afb      	ldrb	r3, [r7, #11]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ae32:	bf00      	nop
      }
      break;
 800ae34:	e037      	b.n	800aea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7c1b      	ldrb	r3, [r3, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d109      	bne.n	800ae52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae46:	f107 0208 	add.w	r2, r7, #8
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	4798      	blx	r3
 800ae4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae50:	e029      	b.n	800aea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fa2a 	bl	800b2ae <USBD_CtlError>
        err++;
 800ae5a:	7afb      	ldrb	r3, [r7, #11]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae60:	e021      	b.n	800aea6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	7c1b      	ldrb	r3, [r3, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10d      	bne.n	800ae86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae72:	f107 0208 	add.w	r2, r7, #8
 800ae76:	4610      	mov	r0, r2
 800ae78:	4798      	blx	r3
 800ae7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	2207      	movs	r2, #7
 800ae82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae84:	e00f      	b.n	800aea6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fa10 	bl	800b2ae <USBD_CtlError>
        err++;
 800ae8e:	7afb      	ldrb	r3, [r7, #11]
 800ae90:	3301      	adds	r3, #1
 800ae92:	72fb      	strb	r3, [r7, #11]
      break;
 800ae94:	e007      	b.n	800aea6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fa08 	bl	800b2ae <USBD_CtlError>
      err++;
 800ae9e:	7afb      	ldrb	r3, [r7, #11]
 800aea0:	3301      	adds	r3, #1
 800aea2:	72fb      	strb	r3, [r7, #11]
      break;
 800aea4:	bf00      	nop
  }

  if (err != 0U)
 800aea6:	7afb      	ldrb	r3, [r7, #11]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d11e      	bne.n	800aeea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	88db      	ldrh	r3, [r3, #6]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d016      	beq.n	800aee2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aeb4:	893b      	ldrh	r3, [r7, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00e      	beq.n	800aed8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	88da      	ldrh	r2, [r3, #6]
 800aebe:	893b      	ldrh	r3, [r7, #8]
 800aec0:	4293      	cmp	r3, r2
 800aec2:	bf28      	it	cs
 800aec4:	4613      	movcs	r3, r2
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aeca:	893b      	ldrh	r3, [r7, #8]
 800aecc:	461a      	mov	r2, r3
 800aece:	68f9      	ldr	r1, [r7, #12]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fa69 	bl	800b3a8 <USBD_CtlSendData>
 800aed6:	e009      	b.n	800aeec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f9e7 	bl	800b2ae <USBD_CtlError>
 800aee0:	e004      	b.n	800aeec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 faba 	bl	800b45c <USBD_CtlSendStatus>
 800aee8:	e000      	b.n	800aeec <USBD_GetDescriptor+0x2cc>
    return;
 800aeea:	bf00      	nop
  }
}
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop

0800aef4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	889b      	ldrh	r3, [r3, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d131      	bne.n	800af6a <USBD_SetAddress+0x76>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	88db      	ldrh	r3, [r3, #6]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d12d      	bne.n	800af6a <USBD_SetAddress+0x76>
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	885b      	ldrh	r3, [r3, #2]
 800af12:	2b7f      	cmp	r3, #127	@ 0x7f
 800af14:	d829      	bhi.n	800af6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	885b      	ldrh	r3, [r3, #2]
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d104      	bne.n	800af38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f9bc 	bl	800b2ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af36:	e01d      	b.n	800af74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7bfa      	ldrb	r2, [r7, #15]
 800af3c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af40:	7bfb      	ldrb	r3, [r7, #15]
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 ff3f 	bl	800bdc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fa86 	bl	800b45c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d004      	beq.n	800af60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2202      	movs	r2, #2
 800af5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af5e:	e009      	b.n	800af74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af68:	e004      	b.n	800af74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f99e 	bl	800b2ae <USBD_CtlError>
  }
}
 800af72:	bf00      	nop
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	885b      	ldrh	r3, [r3, #2]
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	4b4e      	ldr	r3, [pc, #312]	@ (800b0cc <USBD_SetConfig+0x150>)
 800af92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af94:	4b4d      	ldr	r3, [pc, #308]	@ (800b0cc <USBD_SetConfig+0x150>)
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d905      	bls.n	800afa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f985 	bl	800b2ae <USBD_CtlError>
    return USBD_FAIL;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e08c      	b.n	800b0c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d002      	beq.n	800afba <USBD_SetConfig+0x3e>
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d029      	beq.n	800b00c <USBD_SetConfig+0x90>
 800afb8:	e075      	b.n	800b0a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afba:	4b44      	ldr	r3, [pc, #272]	@ (800b0cc <USBD_SetConfig+0x150>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d020      	beq.n	800b004 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800afc2:	4b42      	ldr	r3, [pc, #264]	@ (800b0cc <USBD_SetConfig+0x150>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	461a      	mov	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afcc:	4b3f      	ldr	r3, [pc, #252]	@ (800b0cc <USBD_SetConfig+0x150>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7fe ffe3 	bl	8009f9e <USBD_SetClassConfig>
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f962 	bl	800b2ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2202      	movs	r2, #2
 800afee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aff2:	e065      	b.n	800b0c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fa31 	bl	800b45c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2203      	movs	r2, #3
 800affe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b002:	e05d      	b.n	800b0c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fa29 	bl	800b45c <USBD_CtlSendStatus>
      break;
 800b00a:	e059      	b.n	800b0c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b00c:	4b2f      	ldr	r3, [pc, #188]	@ (800b0cc <USBD_SetConfig+0x150>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d112      	bne.n	800b03a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b01c:	4b2b      	ldr	r3, [pc, #172]	@ (800b0cc <USBD_SetConfig+0x150>)
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b026:	4b29      	ldr	r3, [pc, #164]	@ (800b0cc <USBD_SetConfig+0x150>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f7fe ffd2 	bl	8009fd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fa12 	bl	800b45c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b038:	e042      	b.n	800b0c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b03a:	4b24      	ldr	r3, [pc, #144]	@ (800b0cc <USBD_SetConfig+0x150>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	429a      	cmp	r2, r3
 800b046:	d02a      	beq.n	800b09e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7fe ffc0 	bl	8009fd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b056:	4b1d      	ldr	r3, [pc, #116]	@ (800b0cc <USBD_SetConfig+0x150>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b060:	4b1a      	ldr	r3, [pc, #104]	@ (800b0cc <USBD_SetConfig+0x150>)
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7fe ff99 	bl	8009f9e <USBD_SetClassConfig>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00f      	beq.n	800b096 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f918 	bl	800b2ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7fe ffa5 	bl	8009fd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b094:	e014      	b.n	800b0c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f9e0 	bl	800b45c <USBD_CtlSendStatus>
      break;
 800b09c:	e010      	b.n	800b0c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f9dc 	bl	800b45c <USBD_CtlSendStatus>
      break;
 800b0a4:	e00c      	b.n	800b0c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f900 	bl	800b2ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0ae:	4b07      	ldr	r3, [pc, #28]	@ (800b0cc <USBD_SetConfig+0x150>)
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7fe ff8e 	bl	8009fd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0ba:	2303      	movs	r3, #3
 800b0bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b0be:	bf00      	nop
  }

  return ret;
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20013134 	.word	0x20013134

0800b0d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	88db      	ldrh	r3, [r3, #6]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d004      	beq.n	800b0ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f8e2 	bl	800b2ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0ea:	e023      	b.n	800b134 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	dc02      	bgt.n	800b0fe <USBD_GetConfig+0x2e>
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	dc03      	bgt.n	800b104 <USBD_GetConfig+0x34>
 800b0fc:	e015      	b.n	800b12a <USBD_GetConfig+0x5a>
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d00b      	beq.n	800b11a <USBD_GetConfig+0x4a>
 800b102:	e012      	b.n	800b12a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3308      	adds	r3, #8
 800b10e:	2201      	movs	r2, #1
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f948 	bl	800b3a8 <USBD_CtlSendData>
        break;
 800b118:	e00c      	b.n	800b134 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3304      	adds	r3, #4
 800b11e:	2201      	movs	r2, #1
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f940 	bl	800b3a8 <USBD_CtlSendData>
        break;
 800b128:	e004      	b.n	800b134 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f8be 	bl	800b2ae <USBD_CtlError>
        break;
 800b132:	bf00      	nop
}
 800b134:	bf00      	nop
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	3b01      	subs	r3, #1
 800b150:	2b02      	cmp	r3, #2
 800b152:	d81e      	bhi.n	800b192 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	88db      	ldrh	r3, [r3, #6]
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d004      	beq.n	800b166 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f8a5 	bl	800b2ae <USBD_CtlError>
        break;
 800b164:	e01a      	b.n	800b19c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	f043 0202 	orr.w	r2, r3, #2
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	330c      	adds	r3, #12
 800b186:	2202      	movs	r2, #2
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f90c 	bl	800b3a8 <USBD_CtlSendData>
      break;
 800b190:	e004      	b.n	800b19c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f88a 	bl	800b2ae <USBD_CtlError>
      break;
 800b19a:	bf00      	nop
  }
}
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	885b      	ldrh	r3, [r3, #2]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d107      	bne.n	800b1c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f94c 	bl	800b45c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b1c4:	e013      	b.n	800b1ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	885b      	ldrh	r3, [r3, #2]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d10b      	bne.n	800b1e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	889b      	ldrh	r3, [r3, #4]
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f93c 	bl	800b45c <USBD_CtlSendStatus>
}
 800b1e4:	e003      	b.n	800b1ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f860 	bl	800b2ae <USBD_CtlError>
}
 800b1ee:	bf00      	nop
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b206:	b2db      	uxtb	r3, r3
 800b208:	3b01      	subs	r3, #1
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d80b      	bhi.n	800b226 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	885b      	ldrh	r3, [r3, #2]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d10c      	bne.n	800b230 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f91c 	bl	800b45c <USBD_CtlSendStatus>
      }
      break;
 800b224:	e004      	b.n	800b230 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f840 	bl	800b2ae <USBD_CtlError>
      break;
 800b22e:	e000      	b.n	800b232 <USBD_ClrFeature+0x3c>
      break;
 800b230:	bf00      	nop
  }
}
 800b232:	bf00      	nop
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	781a      	ldrb	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3301      	adds	r3, #1
 800b254:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	781a      	ldrb	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3301      	adds	r3, #1
 800b262:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7ff fa40 	bl	800a6ea <SWAPBYTE>
 800b26a:	4603      	mov	r3, r0
 800b26c:	461a      	mov	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	3301      	adds	r3, #1
 800b276:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	3301      	adds	r3, #1
 800b27c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f7ff fa33 	bl	800a6ea <SWAPBYTE>
 800b284:	4603      	mov	r3, r0
 800b286:	461a      	mov	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3301      	adds	r3, #1
 800b290:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3301      	adds	r3, #1
 800b296:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f7ff fa26 	bl	800a6ea <SWAPBYTE>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	80da      	strh	r2, [r3, #6]
}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2b8:	2180      	movs	r1, #128	@ 0x80
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fd1a 	bl	800bcf4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fd16 	bl	800bcf4 <USBD_LL_StallEP>
}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d042      	beq.n	800b36c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b2ea:	6938      	ldr	r0, [r7, #16]
 800b2ec:	f000 f842 	bl	800b374 <USBD_GetLen>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	005b      	lsls	r3, r3, #1
 800b2f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2fa:	d808      	bhi.n	800b30e <USBD_GetString+0x3e>
 800b2fc:	6938      	ldr	r0, [r7, #16]
 800b2fe:	f000 f839 	bl	800b374 <USBD_GetLen>
 800b302:	4603      	mov	r3, r0
 800b304:	3301      	adds	r3, #1
 800b306:	b29b      	uxth	r3, r3
 800b308:	005b      	lsls	r3, r3, #1
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	e001      	b.n	800b312 <USBD_GetString+0x42>
 800b30e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b316:	7dfb      	ldrb	r3, [r7, #23]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	4413      	add	r3, r2
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	7812      	ldrb	r2, [r2, #0]
 800b320:	701a      	strb	r2, [r3, #0]
  idx++;
 800b322:	7dfb      	ldrb	r3, [r7, #23]
 800b324:	3301      	adds	r3, #1
 800b326:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	4413      	add	r3, r2
 800b32e:	2203      	movs	r2, #3
 800b330:	701a      	strb	r2, [r3, #0]
  idx++;
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	3301      	adds	r3, #1
 800b336:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b338:	e013      	b.n	800b362 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b33a:	7dfb      	ldrb	r3, [r7, #23]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	4413      	add	r3, r2
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	7812      	ldrb	r2, [r2, #0]
 800b344:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	3301      	adds	r3, #1
 800b34a:	613b      	str	r3, [r7, #16]
    idx++;
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	3301      	adds	r3, #1
 800b350:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	4413      	add	r3, r2
 800b358:	2200      	movs	r2, #0
 800b35a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	3301      	adds	r3, #1
 800b360:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1e7      	bne.n	800b33a <USBD_GetString+0x6a>
 800b36a:	e000      	b.n	800b36e <USBD_GetString+0x9e>
    return;
 800b36c:	bf00      	nop
  }
}
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b37c:	2300      	movs	r3, #0
 800b37e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b384:	e005      	b.n	800b392 <USBD_GetLen+0x1e>
  {
    len++;
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	3301      	adds	r3, #1
 800b38a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	3301      	adds	r3, #1
 800b390:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1f5      	bne.n	800b386 <USBD_GetLen+0x12>
  }

  return len;
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 fd19 	bl	800be06 <USBD_LL_Transmit>

  return USBD_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	60f8      	str	r0, [r7, #12]
 800b3e6:	60b9      	str	r1, [r7, #8]
 800b3e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f000 fd08 	bl	800be06 <USBD_LL_Transmit>

  return USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2203      	movs	r2, #3
 800b410:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	2100      	movs	r1, #0
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 fd0c 	bl	800be48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b084      	sub	sp, #16
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	2100      	movs	r1, #0
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 fcfb 	bl	800be48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2204      	movs	r2, #4
 800b468:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b46c:	2300      	movs	r3, #0
 800b46e:	2200      	movs	r2, #0
 800b470:	2100      	movs	r1, #0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fcc7 	bl	800be06 <USBD_LL_Transmit>

  return USBD_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b082      	sub	sp, #8
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2205      	movs	r2, #5
 800b48e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b492:	2300      	movs	r3, #0
 800b494:	2200      	movs	r2, #0
 800b496:	2100      	movs	r1, #0
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fcd5 	bl	800be48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4912      	ldr	r1, [pc, #72]	@ (800b4f8 <MX_USB_DEVICE_Init+0x50>)
 800b4b0:	4812      	ldr	r0, [pc, #72]	@ (800b4fc <MX_USB_DEVICE_Init+0x54>)
 800b4b2:	f7fe fcf7 	bl	8009ea4 <USBD_Init>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b4bc:	f7f5 fdc8 	bl	8001050 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b4c0:	490f      	ldr	r1, [pc, #60]	@ (800b500 <MX_USB_DEVICE_Init+0x58>)
 800b4c2:	480e      	ldr	r0, [pc, #56]	@ (800b4fc <MX_USB_DEVICE_Init+0x54>)
 800b4c4:	f7fe fd1e 	bl	8009f04 <USBD_RegisterClass>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b4ce:	f7f5 fdbf 	bl	8001050 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b4d2:	490c      	ldr	r1, [pc, #48]	@ (800b504 <MX_USB_DEVICE_Init+0x5c>)
 800b4d4:	4809      	ldr	r0, [pc, #36]	@ (800b4fc <MX_USB_DEVICE_Init+0x54>)
 800b4d6:	f7fe fc15 	bl	8009d04 <USBD_CDC_RegisterInterface>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b4e0:	f7f5 fdb6 	bl	8001050 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b4e4:	4805      	ldr	r0, [pc, #20]	@ (800b4fc <MX_USB_DEVICE_Init+0x54>)
 800b4e6:	f7fe fd43 	bl	8009f70 <USBD_Start>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b4f0:	f7f5 fdae 	bl	8001050 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b4f4:	bf00      	nop
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	200000b4 	.word	0x200000b4
 800b4fc:	20013138 	.word	0x20013138
 800b500:	20000020 	.word	0x20000020
 800b504:	200000a0 	.word	0x200000a0

0800b508 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b50c:	2200      	movs	r2, #0
 800b50e:	4905      	ldr	r1, [pc, #20]	@ (800b524 <CDC_Init_FS+0x1c>)
 800b510:	4805      	ldr	r0, [pc, #20]	@ (800b528 <CDC_Init_FS+0x20>)
 800b512:	f7fe fc11 	bl	8009d38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b516:	4905      	ldr	r1, [pc, #20]	@ (800b52c <CDC_Init_FS+0x24>)
 800b518:	4803      	ldr	r0, [pc, #12]	@ (800b528 <CDC_Init_FS+0x20>)
 800b51a:	f7fe fc2f 	bl	8009d7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b51e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b520:	4618      	mov	r0, r3
 800b522:	bd80      	pop	{r7, pc}
 800b524:	20013c38 	.word	0x20013c38
 800b528:	20013138 	.word	0x20013138
 800b52c:	20013438 	.word	0x20013438

0800b530 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b534:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b536:	4618      	mov	r0, r3
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	6039      	str	r1, [r7, #0]
 800b54a:	71fb      	strb	r3, [r7, #7]
 800b54c:	4613      	mov	r3, r2
 800b54e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	2b23      	cmp	r3, #35	@ 0x23
 800b554:	d84a      	bhi.n	800b5ec <CDC_Control_FS+0xac>
 800b556:	a201      	add	r2, pc, #4	@ (adr r2, 800b55c <CDC_Control_FS+0x1c>)
 800b558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55c:	0800b5ed 	.word	0x0800b5ed
 800b560:	0800b5ed 	.word	0x0800b5ed
 800b564:	0800b5ed 	.word	0x0800b5ed
 800b568:	0800b5ed 	.word	0x0800b5ed
 800b56c:	0800b5ed 	.word	0x0800b5ed
 800b570:	0800b5ed 	.word	0x0800b5ed
 800b574:	0800b5ed 	.word	0x0800b5ed
 800b578:	0800b5ed 	.word	0x0800b5ed
 800b57c:	0800b5ed 	.word	0x0800b5ed
 800b580:	0800b5ed 	.word	0x0800b5ed
 800b584:	0800b5ed 	.word	0x0800b5ed
 800b588:	0800b5ed 	.word	0x0800b5ed
 800b58c:	0800b5ed 	.word	0x0800b5ed
 800b590:	0800b5ed 	.word	0x0800b5ed
 800b594:	0800b5ed 	.word	0x0800b5ed
 800b598:	0800b5ed 	.word	0x0800b5ed
 800b59c:	0800b5ed 	.word	0x0800b5ed
 800b5a0:	0800b5ed 	.word	0x0800b5ed
 800b5a4:	0800b5ed 	.word	0x0800b5ed
 800b5a8:	0800b5ed 	.word	0x0800b5ed
 800b5ac:	0800b5ed 	.word	0x0800b5ed
 800b5b0:	0800b5ed 	.word	0x0800b5ed
 800b5b4:	0800b5ed 	.word	0x0800b5ed
 800b5b8:	0800b5ed 	.word	0x0800b5ed
 800b5bc:	0800b5ed 	.word	0x0800b5ed
 800b5c0:	0800b5ed 	.word	0x0800b5ed
 800b5c4:	0800b5ed 	.word	0x0800b5ed
 800b5c8:	0800b5ed 	.word	0x0800b5ed
 800b5cc:	0800b5ed 	.word	0x0800b5ed
 800b5d0:	0800b5ed 	.word	0x0800b5ed
 800b5d4:	0800b5ed 	.word	0x0800b5ed
 800b5d8:	0800b5ed 	.word	0x0800b5ed
 800b5dc:	0800b5ed 	.word	0x0800b5ed
 800b5e0:	0800b5ed 	.word	0x0800b5ed
 800b5e4:	0800b5ed 	.word	0x0800b5ed
 800b5e8:	0800b5ed 	.word	0x0800b5ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b5ec:	bf00      	nop
  }

  return (USBD_OK);
 800b5ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	for (uint32_t i = 0; i < *Len; i++) {
 800b606:	2300      	movs	r3, #0
 800b608:	60fb      	str	r3, [r7, #12]
 800b60a:	e01b      	b.n	800b644 <CDC_Receive_FS+0x48>
		packetBuffer[packetIndex++] = Buf[i];
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	441a      	add	r2, r3
 800b612:	4b15      	ldr	r3, [pc, #84]	@ (800b668 <CDC_Receive_FS+0x6c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	1c59      	adds	r1, r3, #1
 800b618:	4813      	ldr	r0, [pc, #76]	@ (800b668 <CDC_Receive_FS+0x6c>)
 800b61a:	6001      	str	r1, [r0, #0]
 800b61c:	7811      	ldrb	r1, [r2, #0]
 800b61e:	4a13      	ldr	r2, [pc, #76]	@ (800b66c <CDC_Receive_FS+0x70>)
 800b620:	54d1      	strb	r1, [r2, r3]

		// If a full packet is received
		if (packetIndex == 32) {
 800b622:	4b11      	ldr	r3, [pc, #68]	@ (800b668 <CDC_Receive_FS+0x6c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b20      	cmp	r3, #32
 800b628:	d109      	bne.n	800b63e <CDC_Receive_FS+0x42>
			// Push the complete packet into the queue
			xQueueSendToBackFromISR(usbRxQueue, packetBuffer, NULL);
 800b62a:	4b11      	ldr	r3, [pc, #68]	@ (800b670 <CDC_Receive_FS+0x74>)
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	2300      	movs	r3, #0
 800b630:	2200      	movs	r2, #0
 800b632:	490e      	ldr	r1, [pc, #56]	@ (800b66c <CDC_Receive_FS+0x70>)
 800b634:	f7fb fc24 	bl	8006e80 <xQueueGenericSendFromISR>

			// Reset the packet index
			packetIndex = 0;
 800b638:	4b0b      	ldr	r3, [pc, #44]	@ (800b668 <CDC_Receive_FS+0x6c>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < *Len; i++) {
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d3de      	bcc.n	800b60c <CDC_Receive_FS+0x10>
		}
	}

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	4808      	ldr	r0, [pc, #32]	@ (800b674 <CDC_Receive_FS+0x78>)
 800b652:	f7fe fb93 	bl	8009d7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b656:	4807      	ldr	r0, [pc, #28]	@ (800b674 <CDC_Receive_FS+0x78>)
 800b658:	f7fe fbee 	bl	8009e38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b65c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20013434 	.word	0x20013434
 800b66c:	20013414 	.word	0x20013414
 800b670:	200002ac 	.word	0x200002ac
 800b674:	20013138 	.word	0x20013138

0800b678 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	460b      	mov	r3, r1
 800b682:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b684:	2300      	movs	r3, #0
 800b686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b688:	4b0d      	ldr	r3, [pc, #52]	@ (800b6c0 <CDC_Transmit_FS+0x48>)
 800b68a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b68e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e00b      	b.n	800b6b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b69e:	887b      	ldrh	r3, [r7, #2]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	6879      	ldr	r1, [r7, #4]
 800b6a4:	4806      	ldr	r0, [pc, #24]	@ (800b6c0 <CDC_Transmit_FS+0x48>)
 800b6a6:	f7fe fb47 	bl	8009d38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b6aa:	4805      	ldr	r0, [pc, #20]	@ (800b6c0 <CDC_Transmit_FS+0x48>)
 800b6ac:	f7fe fb84 	bl	8009db8 <USBD_CDC_TransmitPacket>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20013138 	.word	0x20013138

0800b6c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b087      	sub	sp, #28
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b6d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	6039      	str	r1, [r7, #0]
 800b6f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2212      	movs	r2, #18
 800b6f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6fa:	4b03      	ldr	r3, [pc, #12]	@ (800b708 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	200000d0 	.word	0x200000d0

0800b70c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	6039      	str	r1, [r7, #0]
 800b716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	2204      	movs	r2, #4
 800b71c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b71e:	4b03      	ldr	r3, [pc, #12]	@ (800b72c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b720:	4618      	mov	r0, r3
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	200000e4 	.word	0x200000e4

0800b730 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	6039      	str	r1, [r7, #0]
 800b73a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b73c:	79fb      	ldrb	r3, [r7, #7]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d105      	bne.n	800b74e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	4907      	ldr	r1, [pc, #28]	@ (800b764 <USBD_FS_ProductStrDescriptor+0x34>)
 800b746:	4808      	ldr	r0, [pc, #32]	@ (800b768 <USBD_FS_ProductStrDescriptor+0x38>)
 800b748:	f7ff fdc2 	bl	800b2d0 <USBD_GetString>
 800b74c:	e004      	b.n	800b758 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	4904      	ldr	r1, [pc, #16]	@ (800b764 <USBD_FS_ProductStrDescriptor+0x34>)
 800b752:	4805      	ldr	r0, [pc, #20]	@ (800b768 <USBD_FS_ProductStrDescriptor+0x38>)
 800b754:	f7ff fdbc 	bl	800b2d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b758:	4b02      	ldr	r3, [pc, #8]	@ (800b764 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20014438 	.word	0x20014438
 800b768:	0800c974 	.word	0x0800c974

0800b76c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	6039      	str	r1, [r7, #0]
 800b776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	4904      	ldr	r1, [pc, #16]	@ (800b78c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b77c:	4804      	ldr	r0, [pc, #16]	@ (800b790 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b77e:	f7ff fda7 	bl	800b2d0 <USBD_GetString>
  return USBD_StrDesc;
 800b782:	4b02      	ldr	r3, [pc, #8]	@ (800b78c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20014438 	.word	0x20014438
 800b790:	0800c980 	.word	0x0800c980

0800b794 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	6039      	str	r1, [r7, #0]
 800b79e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	221a      	movs	r2, #26
 800b7a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b7a6:	f000 f843 	bl	800b830 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b7aa:	4b02      	ldr	r3, [pc, #8]	@ (800b7b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	200000e8 	.word	0x200000e8

0800b7b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	6039      	str	r1, [r7, #0]
 800b7c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7c4:	79fb      	ldrb	r3, [r7, #7]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d105      	bne.n	800b7d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	4907      	ldr	r1, [pc, #28]	@ (800b7ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7ce:	4808      	ldr	r0, [pc, #32]	@ (800b7f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7d0:	f7ff fd7e 	bl	800b2d0 <USBD_GetString>
 800b7d4:	e004      	b.n	800b7e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	4904      	ldr	r1, [pc, #16]	@ (800b7ec <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7da:	4805      	ldr	r0, [pc, #20]	@ (800b7f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7dc:	f7ff fd78 	bl	800b2d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7e0:	4b02      	ldr	r3, [pc, #8]	@ (800b7ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20014438 	.word	0x20014438
 800b7f0:	0800c994 	.word	0x0800c994

0800b7f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	6039      	str	r1, [r7, #0]
 800b7fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b800:	79fb      	ldrb	r3, [r7, #7]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d105      	bne.n	800b812 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	4907      	ldr	r1, [pc, #28]	@ (800b828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b80a:	4808      	ldr	r0, [pc, #32]	@ (800b82c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b80c:	f7ff fd60 	bl	800b2d0 <USBD_GetString>
 800b810:	e004      	b.n	800b81c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	4904      	ldr	r1, [pc, #16]	@ (800b828 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b816:	4805      	ldr	r0, [pc, #20]	@ (800b82c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b818:	f7ff fd5a 	bl	800b2d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b81c:	4b02      	ldr	r3, [pc, #8]	@ (800b828 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20014438 	.word	0x20014438
 800b82c:	0800c9a0 	.word	0x0800c9a0

0800b830 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b836:	4b0f      	ldr	r3, [pc, #60]	@ (800b874 <Get_SerialNum+0x44>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b83c:	4b0e      	ldr	r3, [pc, #56]	@ (800b878 <Get_SerialNum+0x48>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b842:	4b0e      	ldr	r3, [pc, #56]	@ (800b87c <Get_SerialNum+0x4c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d009      	beq.n	800b86a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b856:	2208      	movs	r2, #8
 800b858:	4909      	ldr	r1, [pc, #36]	@ (800b880 <Get_SerialNum+0x50>)
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f000 f814 	bl	800b888 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b860:	2204      	movs	r2, #4
 800b862:	4908      	ldr	r1, [pc, #32]	@ (800b884 <Get_SerialNum+0x54>)
 800b864:	68b8      	ldr	r0, [r7, #8]
 800b866:	f000 f80f 	bl	800b888 <IntToUnicode>
  }
}
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	1fff7a10 	.word	0x1fff7a10
 800b878:	1fff7a14 	.word	0x1fff7a14
 800b87c:	1fff7a18 	.word	0x1fff7a18
 800b880:	200000ea 	.word	0x200000ea
 800b884:	200000fa 	.word	0x200000fa

0800b888 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	4613      	mov	r3, r2
 800b894:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b89a:	2300      	movs	r3, #0
 800b89c:	75fb      	strb	r3, [r7, #23]
 800b89e:	e027      	b.n	800b8f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	0f1b      	lsrs	r3, r3, #28
 800b8a4:	2b09      	cmp	r3, #9
 800b8a6:	d80b      	bhi.n	800b8c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	0f1b      	lsrs	r3, r3, #28
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	440b      	add	r3, r1
 800b8b8:	3230      	adds	r2, #48	@ 0x30
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	701a      	strb	r2, [r3, #0]
 800b8be:	e00a      	b.n	800b8d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	0f1b      	lsrs	r3, r3, #28
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	005b      	lsls	r3, r3, #1
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	440b      	add	r3, r1
 800b8d0:	3237      	adds	r2, #55	@ 0x37
 800b8d2:	b2d2      	uxtb	r2, r2
 800b8d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	005b      	lsls	r3, r3, #1
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	75fb      	strb	r3, [r7, #23]
 800b8f0:	7dfa      	ldrb	r2, [r7, #23]
 800b8f2:	79fb      	ldrb	r3, [r7, #7]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d3d3      	bcc.n	800b8a0 <IntToUnicode+0x18>
  }
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	371c      	adds	r7, #28
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
	...

0800b908 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08a      	sub	sp, #40	@ 0x28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b910:	f107 0314 	add.w	r3, r7, #20
 800b914:	2200      	movs	r2, #0
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	605a      	str	r2, [r3, #4]
 800b91a:	609a      	str	r2, [r3, #8]
 800b91c:	60da      	str	r2, [r3, #12]
 800b91e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b928:	d147      	bne.n	800b9ba <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b92a:	2300      	movs	r3, #0
 800b92c:	613b      	str	r3, [r7, #16]
 800b92e:	4b25      	ldr	r3, [pc, #148]	@ (800b9c4 <HAL_PCD_MspInit+0xbc>)
 800b930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b932:	4a24      	ldr	r2, [pc, #144]	@ (800b9c4 <HAL_PCD_MspInit+0xbc>)
 800b934:	f043 0301 	orr.w	r3, r3, #1
 800b938:	6313      	str	r3, [r2, #48]	@ 0x30
 800b93a:	4b22      	ldr	r3, [pc, #136]	@ (800b9c4 <HAL_PCD_MspInit+0xbc>)
 800b93c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	613b      	str	r3, [r7, #16]
 800b944:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b946:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b94a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b94c:	2300      	movs	r3, #0
 800b94e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b950:	2300      	movs	r3, #0
 800b952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b954:	f107 0314 	add.w	r3, r7, #20
 800b958:	4619      	mov	r1, r3
 800b95a:	481b      	ldr	r0, [pc, #108]	@ (800b9c8 <HAL_PCD_MspInit+0xc0>)
 800b95c:	f7f5 ff42 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b960:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b966:	2302      	movs	r3, #2
 800b968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b96e:	2303      	movs	r3, #3
 800b970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b972:	230a      	movs	r3, #10
 800b974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b976:	f107 0314 	add.w	r3, r7, #20
 800b97a:	4619      	mov	r1, r3
 800b97c:	4812      	ldr	r0, [pc, #72]	@ (800b9c8 <HAL_PCD_MspInit+0xc0>)
 800b97e:	f7f5 ff31 	bl	80017e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b982:	4b10      	ldr	r3, [pc, #64]	@ (800b9c4 <HAL_PCD_MspInit+0xbc>)
 800b984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b986:	4a0f      	ldr	r2, [pc, #60]	@ (800b9c4 <HAL_PCD_MspInit+0xbc>)
 800b988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b98c:	6353      	str	r3, [r2, #52]	@ 0x34
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
 800b992:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c4 <HAL_PCD_MspInit+0xbc>)
 800b994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b996:	4a0b      	ldr	r2, [pc, #44]	@ (800b9c4 <HAL_PCD_MspInit+0xbc>)
 800b998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b99c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b99e:	4b09      	ldr	r3, [pc, #36]	@ (800b9c4 <HAL_PCD_MspInit+0xbc>)
 800b9a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	2043      	movs	r0, #67	@ 0x43
 800b9b0:	f7f5 feee 	bl	8001790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b9b4:	2043      	movs	r0, #67	@ 0x43
 800b9b6:	f7f5 ff07 	bl	80017c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b9ba:	bf00      	nop
 800b9bc:	3728      	adds	r7, #40	@ 0x28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	40023800 	.word	0x40023800
 800b9c8:	40020000 	.word	0x40020000

0800b9cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	f7fe fb11 	bl	800a00a <USBD_LL_SetupStage>
}
 800b9e8:	bf00      	nop
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ba02:	78fa      	ldrb	r2, [r7, #3]
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4613      	mov	r3, r2
 800ba08:	00db      	lsls	r3, r3, #3
 800ba0a:	4413      	add	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	440b      	add	r3, r1
 800ba10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	78fb      	ldrb	r3, [r7, #3]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f7fe fb4b 	bl	800a0b4 <USBD_LL_DataOutStage>
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b082      	sub	sp, #8
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ba38:	78fa      	ldrb	r2, [r7, #3]
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	4413      	add	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	440b      	add	r3, r1
 800ba46:	3320      	adds	r3, #32
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	78fb      	ldrb	r3, [r7, #3]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	f7fe fbe4 	bl	800a21a <USBD_LL_DataInStage>
}
 800ba52:	bf00      	nop
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b082      	sub	sp, #8
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fe fd1e 	bl	800a4aa <USBD_LL_SOF>
}
 800ba6e:	bf00      	nop
 800ba70:	3708      	adds	r7, #8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	79db      	ldrb	r3, [r3, #7]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d001      	beq.n	800ba8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba8a:	f7f5 fae1 	bl	8001050 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba94:	7bfa      	ldrb	r2, [r7, #15]
 800ba96:	4611      	mov	r1, r2
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fe fcc2 	bl	800a422 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe fc6a 	bl	800a37e <USBD_LL_Reset>
}
 800baaa:	bf00      	nop
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
	...

0800bab4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fe fcbd 	bl	800a442 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	6812      	ldr	r2, [r2, #0]
 800bad6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bada:	f043 0301 	orr.w	r3, r3, #1
 800bade:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	7adb      	ldrb	r3, [r3, #11]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d005      	beq.n	800baf4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bae8:	4b04      	ldr	r3, [pc, #16]	@ (800bafc <HAL_PCD_SuspendCallback+0x48>)
 800baea:	691b      	ldr	r3, [r3, #16]
 800baec:	4a03      	ldr	r2, [pc, #12]	@ (800bafc <HAL_PCD_SuspendCallback+0x48>)
 800baee:	f043 0306 	orr.w	r3, r3, #6
 800baf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	e000ed00 	.word	0xe000ed00

0800bb00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fe fcb3 	bl	800a47a <USBD_LL_Resume>
}
 800bb14:	bf00      	nop
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb2e:	78fa      	ldrb	r2, [r7, #3]
 800bb30:	4611      	mov	r1, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fe fd0b 	bl	800a54e <USBD_LL_IsoOUTIncomplete>
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb52:	78fa      	ldrb	r2, [r7, #3]
 800bb54:	4611      	mov	r1, r2
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe fcc7 	bl	800a4ea <USBD_LL_IsoINIncomplete>
}
 800bb5c:	bf00      	nop
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fd1d 	bl	800a5b2 <USBD_LL_DevConnected>
}
 800bb78:	bf00      	nop
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe fd1a 	bl	800a5c8 <USBD_LL_DevDisconnected>
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d13c      	bne.n	800bc26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bbac:	4a20      	ldr	r2, [pc, #128]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a1e      	ldr	r2, [pc, #120]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbb8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bbbc:	4b1c      	ldr	r3, [pc, #112]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbbe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bbc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbc6:	2204      	movs	r2, #4
 800bbc8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bbca:	4b19      	ldr	r3, [pc, #100]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbcc:	2202      	movs	r2, #2
 800bbce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bbd0:	4b17      	ldr	r3, [pc, #92]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bbd6:	4b16      	ldr	r3, [pc, #88]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbd8:	2202      	movs	r2, #2
 800bbda:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bbdc:	4b14      	ldr	r3, [pc, #80]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bbe2:	4b13      	ldr	r3, [pc, #76]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bbe8:	4b11      	ldr	r3, [pc, #68]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bbee:	4b10      	ldr	r3, [pc, #64]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bbf4:	4b0e      	ldr	r3, [pc, #56]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bbfa:	480d      	ldr	r0, [pc, #52]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bbfc:	f7f6 fc47 	bl	800248e <HAL_PCD_Init>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bc06:	f7f5 fa23 	bl	8001050 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bc0a:	2180      	movs	r1, #128	@ 0x80
 800bc0c:	4808      	ldr	r0, [pc, #32]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bc0e:	f7f7 fe74 	bl	80038fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bc12:	2240      	movs	r2, #64	@ 0x40
 800bc14:	2100      	movs	r1, #0
 800bc16:	4806      	ldr	r0, [pc, #24]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bc18:	f7f7 fe28 	bl	800386c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bc1c:	2280      	movs	r2, #128	@ 0x80
 800bc1e:	2101      	movs	r1, #1
 800bc20:	4803      	ldr	r0, [pc, #12]	@ (800bc30 <USBD_LL_Init+0x94>)
 800bc22:	f7f7 fe23 	bl	800386c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	20014638 	.word	0x20014638

0800bc34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7f6 fd2e 	bl	80026ac <HAL_PCD_Start>
 800bc50:	4603      	mov	r3, r0
 800bc52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f000 f942 	bl	800bee0 <USBD_Get_USB_Status>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc60:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b084      	sub	sp, #16
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	4608      	mov	r0, r1
 800bc74:	4611      	mov	r1, r2
 800bc76:	461a      	mov	r2, r3
 800bc78:	4603      	mov	r3, r0
 800bc7a:	70fb      	strb	r3, [r7, #3]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70bb      	strb	r3, [r7, #2]
 800bc80:	4613      	mov	r3, r2
 800bc82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc92:	78bb      	ldrb	r3, [r7, #2]
 800bc94:	883a      	ldrh	r2, [r7, #0]
 800bc96:	78f9      	ldrb	r1, [r7, #3]
 800bc98:	f7f7 fa02 	bl	80030a0 <HAL_PCD_EP_Open>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f000 f91c 	bl	800bee0 <USBD_Get_USB_Status>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b084      	sub	sp, #16
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcd0:	78fa      	ldrb	r2, [r7, #3]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7f7 fa4d 	bl	8003174 <HAL_PCD_EP_Close>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 f8fd 	bl	800bee0 <USBD_Get_USB_Status>
 800bce6:	4603      	mov	r3, r0
 800bce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd0e:	78fa      	ldrb	r2, [r7, #3]
 800bd10:	4611      	mov	r1, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7f7 fb05 	bl	8003322 <HAL_PCD_EP_SetStall>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 f8de 	bl	800bee0 <USBD_Get_USB_Status>
 800bd24:	4603      	mov	r3, r0
 800bd26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd28:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd4c:	78fa      	ldrb	r2, [r7, #3]
 800bd4e:	4611      	mov	r1, r2
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7f7 fb49 	bl	80033e8 <HAL_PCD_EP_ClrStall>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 f8bf 	bl	800bee0 <USBD_Get_USB_Status>
 800bd62:	4603      	mov	r3, r0
 800bd64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd66:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3710      	adds	r7, #16
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bd84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	da0b      	bge.n	800bda4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd8c:	78fb      	ldrb	r3, [r7, #3]
 800bd8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd92:	68f9      	ldr	r1, [r7, #12]
 800bd94:	4613      	mov	r3, r2
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	4413      	add	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	440b      	add	r3, r1
 800bd9e:	3316      	adds	r3, #22
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	e00b      	b.n	800bdbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bda4:	78fb      	ldrb	r3, [r7, #3]
 800bda6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdaa:	68f9      	ldr	r1, [r7, #12]
 800bdac:	4613      	mov	r3, r2
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	4413      	add	r3, r2
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	440b      	add	r3, r1
 800bdb6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bdba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bde2:	78fa      	ldrb	r2, [r7, #3]
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7f7 f936 	bl	8003058 <HAL_PCD_SetAddress>
 800bdec:	4603      	mov	r3, r0
 800bdee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdf0:	7bfb      	ldrb	r3, [r7, #15]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 f874 	bl	800bee0 <USBD_Get_USB_Status>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b086      	sub	sp, #24
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	603b      	str	r3, [r7, #0]
 800be12:	460b      	mov	r3, r1
 800be14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be24:	7af9      	ldrb	r1, [r7, #11]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	f7f7 fa40 	bl	80032ae <HAL_PCD_EP_Transmit>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	4618      	mov	r0, r3
 800be36:	f000 f853 	bl	800bee0 <USBD_Get_USB_Status>
 800be3a:	4603      	mov	r3, r0
 800be3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	607a      	str	r2, [r7, #4]
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	460b      	mov	r3, r1
 800be56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800be66:	7af9      	ldrb	r1, [r7, #11]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	f7f7 f9cc 	bl	8003208 <HAL_PCD_EP_Receive>
 800be70:	4603      	mov	r3, r0
 800be72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be74:	7dfb      	ldrb	r3, [r7, #23]
 800be76:	4618      	mov	r0, r3
 800be78:	f000 f832 	bl	800bee0 <USBD_Get_USB_Status>
 800be7c:	4603      	mov	r3, r0
 800be7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800be80:	7dbb      	ldrb	r3, [r7, #22]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3718      	adds	r7, #24
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b082      	sub	sp, #8
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be9c:	78fa      	ldrb	r2, [r7, #3]
 800be9e:	4611      	mov	r1, r2
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7f7 f9ec 	bl	800327e <HAL_PCD_EP_GetRxCount>
 800bea6:	4603      	mov	r3, r0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800beb8:	4b03      	ldr	r3, [pc, #12]	@ (800bec8 <USBD_static_malloc+0x18>)
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	20014b1c 	.word	0x20014b1c

0800becc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]

}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beea:	2300      	movs	r3, #0
 800beec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800beee:	79fb      	ldrb	r3, [r7, #7]
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d817      	bhi.n	800bf24 <USBD_Get_USB_Status+0x44>
 800bef4:	a201      	add	r2, pc, #4	@ (adr r2, 800befc <USBD_Get_USB_Status+0x1c>)
 800bef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befa:	bf00      	nop
 800befc:	0800bf0d 	.word	0x0800bf0d
 800bf00:	0800bf13 	.word	0x0800bf13
 800bf04:	0800bf19 	.word	0x0800bf19
 800bf08:	0800bf1f 	.word	0x0800bf1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf10:	e00b      	b.n	800bf2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf12:	2303      	movs	r3, #3
 800bf14:	73fb      	strb	r3, [r7, #15]
    break;
 800bf16:	e008      	b.n	800bf2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf1c:	e005      	b.n	800bf2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	73fb      	strb	r3, [r7, #15]
    break;
 800bf22:	e002      	b.n	800bf2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bf24:	2303      	movs	r3, #3
 800bf26:	73fb      	strb	r3, [r7, #15]
    break;
 800bf28:	bf00      	nop
  }
  return usb_status;
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3714      	adds	r7, #20
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <std>:
 800bf38:	2300      	movs	r3, #0
 800bf3a:	b510      	push	{r4, lr}
 800bf3c:	4604      	mov	r4, r0
 800bf3e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf46:	6083      	str	r3, [r0, #8]
 800bf48:	8181      	strh	r1, [r0, #12]
 800bf4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf4c:	81c2      	strh	r2, [r0, #14]
 800bf4e:	6183      	str	r3, [r0, #24]
 800bf50:	4619      	mov	r1, r3
 800bf52:	2208      	movs	r2, #8
 800bf54:	305c      	adds	r0, #92	@ 0x5c
 800bf56:	f000 f9f7 	bl	800c348 <memset>
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf90 <std+0x58>)
 800bf5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf5e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf94 <std+0x5c>)
 800bf60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf62:	4b0d      	ldr	r3, [pc, #52]	@ (800bf98 <std+0x60>)
 800bf64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf66:	4b0d      	ldr	r3, [pc, #52]	@ (800bf9c <std+0x64>)
 800bf68:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf6a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa0 <std+0x68>)
 800bf6c:	6224      	str	r4, [r4, #32]
 800bf6e:	429c      	cmp	r4, r3
 800bf70:	d006      	beq.n	800bf80 <std+0x48>
 800bf72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf76:	4294      	cmp	r4, r2
 800bf78:	d002      	beq.n	800bf80 <std+0x48>
 800bf7a:	33d0      	adds	r3, #208	@ 0xd0
 800bf7c:	429c      	cmp	r4, r3
 800bf7e:	d105      	bne.n	800bf8c <std+0x54>
 800bf80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf88:	f000 ba56 	b.w	800c438 <__retarget_lock_init_recursive>
 800bf8c:	bd10      	pop	{r4, pc}
 800bf8e:	bf00      	nop
 800bf90:	0800c179 	.word	0x0800c179
 800bf94:	0800c19b 	.word	0x0800c19b
 800bf98:	0800c1d3 	.word	0x0800c1d3
 800bf9c:	0800c1f7 	.word	0x0800c1f7
 800bfa0:	20014d3c 	.word	0x20014d3c

0800bfa4 <stdio_exit_handler>:
 800bfa4:	4a02      	ldr	r2, [pc, #8]	@ (800bfb0 <stdio_exit_handler+0xc>)
 800bfa6:	4903      	ldr	r1, [pc, #12]	@ (800bfb4 <stdio_exit_handler+0x10>)
 800bfa8:	4803      	ldr	r0, [pc, #12]	@ (800bfb8 <stdio_exit_handler+0x14>)
 800bfaa:	f000 b869 	b.w	800c080 <_fwalk_sglue>
 800bfae:	bf00      	nop
 800bfb0:	20000104 	.word	0x20000104
 800bfb4:	0800c755 	.word	0x0800c755
 800bfb8:	20000114 	.word	0x20000114

0800bfbc <cleanup_stdio>:
 800bfbc:	6841      	ldr	r1, [r0, #4]
 800bfbe:	4b0c      	ldr	r3, [pc, #48]	@ (800bff0 <cleanup_stdio+0x34>)
 800bfc0:	4299      	cmp	r1, r3
 800bfc2:	b510      	push	{r4, lr}
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	d001      	beq.n	800bfcc <cleanup_stdio+0x10>
 800bfc8:	f000 fbc4 	bl	800c754 <_fflush_r>
 800bfcc:	68a1      	ldr	r1, [r4, #8]
 800bfce:	4b09      	ldr	r3, [pc, #36]	@ (800bff4 <cleanup_stdio+0x38>)
 800bfd0:	4299      	cmp	r1, r3
 800bfd2:	d002      	beq.n	800bfda <cleanup_stdio+0x1e>
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f000 fbbd 	bl	800c754 <_fflush_r>
 800bfda:	68e1      	ldr	r1, [r4, #12]
 800bfdc:	4b06      	ldr	r3, [pc, #24]	@ (800bff8 <cleanup_stdio+0x3c>)
 800bfde:	4299      	cmp	r1, r3
 800bfe0:	d004      	beq.n	800bfec <cleanup_stdio+0x30>
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe8:	f000 bbb4 	b.w	800c754 <_fflush_r>
 800bfec:	bd10      	pop	{r4, pc}
 800bfee:	bf00      	nop
 800bff0:	20014d3c 	.word	0x20014d3c
 800bff4:	20014da4 	.word	0x20014da4
 800bff8:	20014e0c 	.word	0x20014e0c

0800bffc <global_stdio_init.part.0>:
 800bffc:	b510      	push	{r4, lr}
 800bffe:	4b0b      	ldr	r3, [pc, #44]	@ (800c02c <global_stdio_init.part.0+0x30>)
 800c000:	4c0b      	ldr	r4, [pc, #44]	@ (800c030 <global_stdio_init.part.0+0x34>)
 800c002:	4a0c      	ldr	r2, [pc, #48]	@ (800c034 <global_stdio_init.part.0+0x38>)
 800c004:	601a      	str	r2, [r3, #0]
 800c006:	4620      	mov	r0, r4
 800c008:	2200      	movs	r2, #0
 800c00a:	2104      	movs	r1, #4
 800c00c:	f7ff ff94 	bl	800bf38 <std>
 800c010:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c014:	2201      	movs	r2, #1
 800c016:	2109      	movs	r1, #9
 800c018:	f7ff ff8e 	bl	800bf38 <std>
 800c01c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c020:	2202      	movs	r2, #2
 800c022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c026:	2112      	movs	r1, #18
 800c028:	f7ff bf86 	b.w	800bf38 <std>
 800c02c:	20014e74 	.word	0x20014e74
 800c030:	20014d3c 	.word	0x20014d3c
 800c034:	0800bfa5 	.word	0x0800bfa5

0800c038 <__sfp_lock_acquire>:
 800c038:	4801      	ldr	r0, [pc, #4]	@ (800c040 <__sfp_lock_acquire+0x8>)
 800c03a:	f000 b9fe 	b.w	800c43a <__retarget_lock_acquire_recursive>
 800c03e:	bf00      	nop
 800c040:	20014e7d 	.word	0x20014e7d

0800c044 <__sfp_lock_release>:
 800c044:	4801      	ldr	r0, [pc, #4]	@ (800c04c <__sfp_lock_release+0x8>)
 800c046:	f000 b9f9 	b.w	800c43c <__retarget_lock_release_recursive>
 800c04a:	bf00      	nop
 800c04c:	20014e7d 	.word	0x20014e7d

0800c050 <__sinit>:
 800c050:	b510      	push	{r4, lr}
 800c052:	4604      	mov	r4, r0
 800c054:	f7ff fff0 	bl	800c038 <__sfp_lock_acquire>
 800c058:	6a23      	ldr	r3, [r4, #32]
 800c05a:	b11b      	cbz	r3, 800c064 <__sinit+0x14>
 800c05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c060:	f7ff bff0 	b.w	800c044 <__sfp_lock_release>
 800c064:	4b04      	ldr	r3, [pc, #16]	@ (800c078 <__sinit+0x28>)
 800c066:	6223      	str	r3, [r4, #32]
 800c068:	4b04      	ldr	r3, [pc, #16]	@ (800c07c <__sinit+0x2c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1f5      	bne.n	800c05c <__sinit+0xc>
 800c070:	f7ff ffc4 	bl	800bffc <global_stdio_init.part.0>
 800c074:	e7f2      	b.n	800c05c <__sinit+0xc>
 800c076:	bf00      	nop
 800c078:	0800bfbd 	.word	0x0800bfbd
 800c07c:	20014e74 	.word	0x20014e74

0800c080 <_fwalk_sglue>:
 800c080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c084:	4607      	mov	r7, r0
 800c086:	4688      	mov	r8, r1
 800c088:	4614      	mov	r4, r2
 800c08a:	2600      	movs	r6, #0
 800c08c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c090:	f1b9 0901 	subs.w	r9, r9, #1
 800c094:	d505      	bpl.n	800c0a2 <_fwalk_sglue+0x22>
 800c096:	6824      	ldr	r4, [r4, #0]
 800c098:	2c00      	cmp	r4, #0
 800c09a:	d1f7      	bne.n	800c08c <_fwalk_sglue+0xc>
 800c09c:	4630      	mov	r0, r6
 800c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	89ab      	ldrh	r3, [r5, #12]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d907      	bls.n	800c0b8 <_fwalk_sglue+0x38>
 800c0a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	d003      	beq.n	800c0b8 <_fwalk_sglue+0x38>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	47c0      	blx	r8
 800c0b6:	4306      	orrs	r6, r0
 800c0b8:	3568      	adds	r5, #104	@ 0x68
 800c0ba:	e7e9      	b.n	800c090 <_fwalk_sglue+0x10>

0800c0bc <_puts_r>:
 800c0bc:	6a03      	ldr	r3, [r0, #32]
 800c0be:	b570      	push	{r4, r5, r6, lr}
 800c0c0:	6884      	ldr	r4, [r0, #8]
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	460e      	mov	r6, r1
 800c0c6:	b90b      	cbnz	r3, 800c0cc <_puts_r+0x10>
 800c0c8:	f7ff ffc2 	bl	800c050 <__sinit>
 800c0cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0ce:	07db      	lsls	r3, r3, #31
 800c0d0:	d405      	bmi.n	800c0de <_puts_r+0x22>
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	0598      	lsls	r0, r3, #22
 800c0d6:	d402      	bmi.n	800c0de <_puts_r+0x22>
 800c0d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0da:	f000 f9ae 	bl	800c43a <__retarget_lock_acquire_recursive>
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	0719      	lsls	r1, r3, #28
 800c0e2:	d502      	bpl.n	800c0ea <_puts_r+0x2e>
 800c0e4:	6923      	ldr	r3, [r4, #16]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d135      	bne.n	800c156 <_puts_r+0x9a>
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f000 f8c5 	bl	800c27c <__swsetup_r>
 800c0f2:	b380      	cbz	r0, 800c156 <_puts_r+0x9a>
 800c0f4:	f04f 35ff 	mov.w	r5, #4294967295
 800c0f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0fa:	07da      	lsls	r2, r3, #31
 800c0fc:	d405      	bmi.n	800c10a <_puts_r+0x4e>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	059b      	lsls	r3, r3, #22
 800c102:	d402      	bmi.n	800c10a <_puts_r+0x4e>
 800c104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c106:	f000 f999 	bl	800c43c <__retarget_lock_release_recursive>
 800c10a:	4628      	mov	r0, r5
 800c10c:	bd70      	pop	{r4, r5, r6, pc}
 800c10e:	2b00      	cmp	r3, #0
 800c110:	da04      	bge.n	800c11c <_puts_r+0x60>
 800c112:	69a2      	ldr	r2, [r4, #24]
 800c114:	429a      	cmp	r2, r3
 800c116:	dc17      	bgt.n	800c148 <_puts_r+0x8c>
 800c118:	290a      	cmp	r1, #10
 800c11a:	d015      	beq.n	800c148 <_puts_r+0x8c>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	6022      	str	r2, [r4, #0]
 800c122:	7019      	strb	r1, [r3, #0]
 800c124:	68a3      	ldr	r3, [r4, #8]
 800c126:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c12a:	3b01      	subs	r3, #1
 800c12c:	60a3      	str	r3, [r4, #8]
 800c12e:	2900      	cmp	r1, #0
 800c130:	d1ed      	bne.n	800c10e <_puts_r+0x52>
 800c132:	2b00      	cmp	r3, #0
 800c134:	da11      	bge.n	800c15a <_puts_r+0x9e>
 800c136:	4622      	mov	r2, r4
 800c138:	210a      	movs	r1, #10
 800c13a:	4628      	mov	r0, r5
 800c13c:	f000 f85f 	bl	800c1fe <__swbuf_r>
 800c140:	3001      	adds	r0, #1
 800c142:	d0d7      	beq.n	800c0f4 <_puts_r+0x38>
 800c144:	250a      	movs	r5, #10
 800c146:	e7d7      	b.n	800c0f8 <_puts_r+0x3c>
 800c148:	4622      	mov	r2, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	f000 f857 	bl	800c1fe <__swbuf_r>
 800c150:	3001      	adds	r0, #1
 800c152:	d1e7      	bne.n	800c124 <_puts_r+0x68>
 800c154:	e7ce      	b.n	800c0f4 <_puts_r+0x38>
 800c156:	3e01      	subs	r6, #1
 800c158:	e7e4      	b.n	800c124 <_puts_r+0x68>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	6022      	str	r2, [r4, #0]
 800c160:	220a      	movs	r2, #10
 800c162:	701a      	strb	r2, [r3, #0]
 800c164:	e7ee      	b.n	800c144 <_puts_r+0x88>
	...

0800c168 <puts>:
 800c168:	4b02      	ldr	r3, [pc, #8]	@ (800c174 <puts+0xc>)
 800c16a:	4601      	mov	r1, r0
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f7ff bfa5 	b.w	800c0bc <_puts_r>
 800c172:	bf00      	nop
 800c174:	20000110 	.word	0x20000110

0800c178 <__sread>:
 800c178:	b510      	push	{r4, lr}
 800c17a:	460c      	mov	r4, r1
 800c17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c180:	f000 f90c 	bl	800c39c <_read_r>
 800c184:	2800      	cmp	r0, #0
 800c186:	bfab      	itete	ge
 800c188:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c18a:	89a3      	ldrhlt	r3, [r4, #12]
 800c18c:	181b      	addge	r3, r3, r0
 800c18e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c192:	bfac      	ite	ge
 800c194:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c196:	81a3      	strhlt	r3, [r4, #12]
 800c198:	bd10      	pop	{r4, pc}

0800c19a <__swrite>:
 800c19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19e:	461f      	mov	r7, r3
 800c1a0:	898b      	ldrh	r3, [r1, #12]
 800c1a2:	05db      	lsls	r3, r3, #23
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	4616      	mov	r6, r2
 800c1aa:	d505      	bpl.n	800c1b8 <__swrite+0x1e>
 800c1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f000 f8e0 	bl	800c378 <_lseek_r>
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1c2:	81a3      	strh	r3, [r4, #12]
 800c1c4:	4632      	mov	r2, r6
 800c1c6:	463b      	mov	r3, r7
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ce:	f000 b8f7 	b.w	800c3c0 <_write_r>

0800c1d2 <__sseek>:
 800c1d2:	b510      	push	{r4, lr}
 800c1d4:	460c      	mov	r4, r1
 800c1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1da:	f000 f8cd 	bl	800c378 <_lseek_r>
 800c1de:	1c43      	adds	r3, r0, #1
 800c1e0:	89a3      	ldrh	r3, [r4, #12]
 800c1e2:	bf15      	itete	ne
 800c1e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1ee:	81a3      	strheq	r3, [r4, #12]
 800c1f0:	bf18      	it	ne
 800c1f2:	81a3      	strhne	r3, [r4, #12]
 800c1f4:	bd10      	pop	{r4, pc}

0800c1f6 <__sclose>:
 800c1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1fa:	f000 b8ad 	b.w	800c358 <_close_r>

0800c1fe <__swbuf_r>:
 800c1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c200:	460e      	mov	r6, r1
 800c202:	4614      	mov	r4, r2
 800c204:	4605      	mov	r5, r0
 800c206:	b118      	cbz	r0, 800c210 <__swbuf_r+0x12>
 800c208:	6a03      	ldr	r3, [r0, #32]
 800c20a:	b90b      	cbnz	r3, 800c210 <__swbuf_r+0x12>
 800c20c:	f7ff ff20 	bl	800c050 <__sinit>
 800c210:	69a3      	ldr	r3, [r4, #24]
 800c212:	60a3      	str	r3, [r4, #8]
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	071a      	lsls	r2, r3, #28
 800c218:	d501      	bpl.n	800c21e <__swbuf_r+0x20>
 800c21a:	6923      	ldr	r3, [r4, #16]
 800c21c:	b943      	cbnz	r3, 800c230 <__swbuf_r+0x32>
 800c21e:	4621      	mov	r1, r4
 800c220:	4628      	mov	r0, r5
 800c222:	f000 f82b 	bl	800c27c <__swsetup_r>
 800c226:	b118      	cbz	r0, 800c230 <__swbuf_r+0x32>
 800c228:	f04f 37ff 	mov.w	r7, #4294967295
 800c22c:	4638      	mov	r0, r7
 800c22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c230:	6823      	ldr	r3, [r4, #0]
 800c232:	6922      	ldr	r2, [r4, #16]
 800c234:	1a98      	subs	r0, r3, r2
 800c236:	6963      	ldr	r3, [r4, #20]
 800c238:	b2f6      	uxtb	r6, r6
 800c23a:	4283      	cmp	r3, r0
 800c23c:	4637      	mov	r7, r6
 800c23e:	dc05      	bgt.n	800c24c <__swbuf_r+0x4e>
 800c240:	4621      	mov	r1, r4
 800c242:	4628      	mov	r0, r5
 800c244:	f000 fa86 	bl	800c754 <_fflush_r>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d1ed      	bne.n	800c228 <__swbuf_r+0x2a>
 800c24c:	68a3      	ldr	r3, [r4, #8]
 800c24e:	3b01      	subs	r3, #1
 800c250:	60a3      	str	r3, [r4, #8]
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	1c5a      	adds	r2, r3, #1
 800c256:	6022      	str	r2, [r4, #0]
 800c258:	701e      	strb	r6, [r3, #0]
 800c25a:	6962      	ldr	r2, [r4, #20]
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	429a      	cmp	r2, r3
 800c260:	d004      	beq.n	800c26c <__swbuf_r+0x6e>
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	07db      	lsls	r3, r3, #31
 800c266:	d5e1      	bpl.n	800c22c <__swbuf_r+0x2e>
 800c268:	2e0a      	cmp	r6, #10
 800c26a:	d1df      	bne.n	800c22c <__swbuf_r+0x2e>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4628      	mov	r0, r5
 800c270:	f000 fa70 	bl	800c754 <_fflush_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	d0d9      	beq.n	800c22c <__swbuf_r+0x2e>
 800c278:	e7d6      	b.n	800c228 <__swbuf_r+0x2a>
	...

0800c27c <__swsetup_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4b29      	ldr	r3, [pc, #164]	@ (800c324 <__swsetup_r+0xa8>)
 800c280:	4605      	mov	r5, r0
 800c282:	6818      	ldr	r0, [r3, #0]
 800c284:	460c      	mov	r4, r1
 800c286:	b118      	cbz	r0, 800c290 <__swsetup_r+0x14>
 800c288:	6a03      	ldr	r3, [r0, #32]
 800c28a:	b90b      	cbnz	r3, 800c290 <__swsetup_r+0x14>
 800c28c:	f7ff fee0 	bl	800c050 <__sinit>
 800c290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c294:	0719      	lsls	r1, r3, #28
 800c296:	d422      	bmi.n	800c2de <__swsetup_r+0x62>
 800c298:	06da      	lsls	r2, r3, #27
 800c29a:	d407      	bmi.n	800c2ac <__swsetup_r+0x30>
 800c29c:	2209      	movs	r2, #9
 800c29e:	602a      	str	r2, [r5, #0]
 800c2a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2aa:	e033      	b.n	800c314 <__swsetup_r+0x98>
 800c2ac:	0758      	lsls	r0, r3, #29
 800c2ae:	d512      	bpl.n	800c2d6 <__swsetup_r+0x5a>
 800c2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2b2:	b141      	cbz	r1, 800c2c6 <__swsetup_r+0x4a>
 800c2b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2b8:	4299      	cmp	r1, r3
 800c2ba:	d002      	beq.n	800c2c2 <__swsetup_r+0x46>
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f000 f8cd 	bl	800c45c <_free_r>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2cc:	81a3      	strh	r3, [r4, #12]
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	6063      	str	r3, [r4, #4]
 800c2d2:	6923      	ldr	r3, [r4, #16]
 800c2d4:	6023      	str	r3, [r4, #0]
 800c2d6:	89a3      	ldrh	r3, [r4, #12]
 800c2d8:	f043 0308 	orr.w	r3, r3, #8
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	6923      	ldr	r3, [r4, #16]
 800c2e0:	b94b      	cbnz	r3, 800c2f6 <__swsetup_r+0x7a>
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2ec:	d003      	beq.n	800c2f6 <__swsetup_r+0x7a>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f000 fa7d 	bl	800c7f0 <__smakebuf_r>
 800c2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2fa:	f013 0201 	ands.w	r2, r3, #1
 800c2fe:	d00a      	beq.n	800c316 <__swsetup_r+0x9a>
 800c300:	2200      	movs	r2, #0
 800c302:	60a2      	str	r2, [r4, #8]
 800c304:	6962      	ldr	r2, [r4, #20]
 800c306:	4252      	negs	r2, r2
 800c308:	61a2      	str	r2, [r4, #24]
 800c30a:	6922      	ldr	r2, [r4, #16]
 800c30c:	b942      	cbnz	r2, 800c320 <__swsetup_r+0xa4>
 800c30e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c312:	d1c5      	bne.n	800c2a0 <__swsetup_r+0x24>
 800c314:	bd38      	pop	{r3, r4, r5, pc}
 800c316:	0799      	lsls	r1, r3, #30
 800c318:	bf58      	it	pl
 800c31a:	6962      	ldrpl	r2, [r4, #20]
 800c31c:	60a2      	str	r2, [r4, #8]
 800c31e:	e7f4      	b.n	800c30a <__swsetup_r+0x8e>
 800c320:	2000      	movs	r0, #0
 800c322:	e7f7      	b.n	800c314 <__swsetup_r+0x98>
 800c324:	20000110 	.word	0x20000110

0800c328 <memcmp>:
 800c328:	b510      	push	{r4, lr}
 800c32a:	3901      	subs	r1, #1
 800c32c:	4402      	add	r2, r0
 800c32e:	4290      	cmp	r0, r2
 800c330:	d101      	bne.n	800c336 <memcmp+0xe>
 800c332:	2000      	movs	r0, #0
 800c334:	e005      	b.n	800c342 <memcmp+0x1a>
 800c336:	7803      	ldrb	r3, [r0, #0]
 800c338:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c33c:	42a3      	cmp	r3, r4
 800c33e:	d001      	beq.n	800c344 <memcmp+0x1c>
 800c340:	1b18      	subs	r0, r3, r4
 800c342:	bd10      	pop	{r4, pc}
 800c344:	3001      	adds	r0, #1
 800c346:	e7f2      	b.n	800c32e <memcmp+0x6>

0800c348 <memset>:
 800c348:	4402      	add	r2, r0
 800c34a:	4603      	mov	r3, r0
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d100      	bne.n	800c352 <memset+0xa>
 800c350:	4770      	bx	lr
 800c352:	f803 1b01 	strb.w	r1, [r3], #1
 800c356:	e7f9      	b.n	800c34c <memset+0x4>

0800c358 <_close_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	4d06      	ldr	r5, [pc, #24]	@ (800c374 <_close_r+0x1c>)
 800c35c:	2300      	movs	r3, #0
 800c35e:	4604      	mov	r4, r0
 800c360:	4608      	mov	r0, r1
 800c362:	602b      	str	r3, [r5, #0]
 800c364:	f7f5 f84f 	bl	8001406 <_close>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_close_r+0x1a>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_close_r+0x1a>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	20014e78 	.word	0x20014e78

0800c378 <_lseek_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d07      	ldr	r5, [pc, #28]	@ (800c398 <_lseek_r+0x20>)
 800c37c:	4604      	mov	r4, r0
 800c37e:	4608      	mov	r0, r1
 800c380:	4611      	mov	r1, r2
 800c382:	2200      	movs	r2, #0
 800c384:	602a      	str	r2, [r5, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	f7f5 f864 	bl	8001454 <_lseek>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d102      	bne.n	800c396 <_lseek_r+0x1e>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	b103      	cbz	r3, 800c396 <_lseek_r+0x1e>
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	20014e78 	.word	0x20014e78

0800c39c <_read_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d07      	ldr	r5, [pc, #28]	@ (800c3bc <_read_r+0x20>)
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	602a      	str	r2, [r5, #0]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f7f4 fff2 	bl	8001394 <_read>
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	d102      	bne.n	800c3ba <_read_r+0x1e>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	b103      	cbz	r3, 800c3ba <_read_r+0x1e>
 800c3b8:	6023      	str	r3, [r4, #0]
 800c3ba:	bd38      	pop	{r3, r4, r5, pc}
 800c3bc:	20014e78 	.word	0x20014e78

0800c3c0 <_write_r>:
 800c3c0:	b538      	push	{r3, r4, r5, lr}
 800c3c2:	4d07      	ldr	r5, [pc, #28]	@ (800c3e0 <_write_r+0x20>)
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	602a      	str	r2, [r5, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	f7f4 fffd 	bl	80013ce <_write>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d102      	bne.n	800c3de <_write_r+0x1e>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	b103      	cbz	r3, 800c3de <_write_r+0x1e>
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	20014e78 	.word	0x20014e78

0800c3e4 <__errno>:
 800c3e4:	4b01      	ldr	r3, [pc, #4]	@ (800c3ec <__errno+0x8>)
 800c3e6:	6818      	ldr	r0, [r3, #0]
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	20000110 	.word	0x20000110

0800c3f0 <__libc_init_array>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	4d0d      	ldr	r5, [pc, #52]	@ (800c428 <__libc_init_array+0x38>)
 800c3f4:	4c0d      	ldr	r4, [pc, #52]	@ (800c42c <__libc_init_array+0x3c>)
 800c3f6:	1b64      	subs	r4, r4, r5
 800c3f8:	10a4      	asrs	r4, r4, #2
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	42a6      	cmp	r6, r4
 800c3fe:	d109      	bne.n	800c414 <__libc_init_array+0x24>
 800c400:	4d0b      	ldr	r5, [pc, #44]	@ (800c430 <__libc_init_array+0x40>)
 800c402:	4c0c      	ldr	r4, [pc, #48]	@ (800c434 <__libc_init_array+0x44>)
 800c404:	f000 fa62 	bl	800c8cc <_init>
 800c408:	1b64      	subs	r4, r4, r5
 800c40a:	10a4      	asrs	r4, r4, #2
 800c40c:	2600      	movs	r6, #0
 800c40e:	42a6      	cmp	r6, r4
 800c410:	d105      	bne.n	800c41e <__libc_init_array+0x2e>
 800c412:	bd70      	pop	{r4, r5, r6, pc}
 800c414:	f855 3b04 	ldr.w	r3, [r5], #4
 800c418:	4798      	blx	r3
 800c41a:	3601      	adds	r6, #1
 800c41c:	e7ee      	b.n	800c3fc <__libc_init_array+0xc>
 800c41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c422:	4798      	blx	r3
 800c424:	3601      	adds	r6, #1
 800c426:	e7f2      	b.n	800c40e <__libc_init_array+0x1e>
 800c428:	0800c9d0 	.word	0x0800c9d0
 800c42c:	0800c9d0 	.word	0x0800c9d0
 800c430:	0800c9d0 	.word	0x0800c9d0
 800c434:	0800c9d4 	.word	0x0800c9d4

0800c438 <__retarget_lock_init_recursive>:
 800c438:	4770      	bx	lr

0800c43a <__retarget_lock_acquire_recursive>:
 800c43a:	4770      	bx	lr

0800c43c <__retarget_lock_release_recursive>:
 800c43c:	4770      	bx	lr

0800c43e <memcpy>:
 800c43e:	440a      	add	r2, r1
 800c440:	4291      	cmp	r1, r2
 800c442:	f100 33ff 	add.w	r3, r0, #4294967295
 800c446:	d100      	bne.n	800c44a <memcpy+0xc>
 800c448:	4770      	bx	lr
 800c44a:	b510      	push	{r4, lr}
 800c44c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c450:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c454:	4291      	cmp	r1, r2
 800c456:	d1f9      	bne.n	800c44c <memcpy+0xe>
 800c458:	bd10      	pop	{r4, pc}
	...

0800c45c <_free_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	4605      	mov	r5, r0
 800c460:	2900      	cmp	r1, #0
 800c462:	d041      	beq.n	800c4e8 <_free_r+0x8c>
 800c464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c468:	1f0c      	subs	r4, r1, #4
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	bfb8      	it	lt
 800c46e:	18e4      	addlt	r4, r4, r3
 800c470:	f000 f8e0 	bl	800c634 <__malloc_lock>
 800c474:	4a1d      	ldr	r2, [pc, #116]	@ (800c4ec <_free_r+0x90>)
 800c476:	6813      	ldr	r3, [r2, #0]
 800c478:	b933      	cbnz	r3, 800c488 <_free_r+0x2c>
 800c47a:	6063      	str	r3, [r4, #4]
 800c47c:	6014      	str	r4, [r2, #0]
 800c47e:	4628      	mov	r0, r5
 800c480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c484:	f000 b8dc 	b.w	800c640 <__malloc_unlock>
 800c488:	42a3      	cmp	r3, r4
 800c48a:	d908      	bls.n	800c49e <_free_r+0x42>
 800c48c:	6820      	ldr	r0, [r4, #0]
 800c48e:	1821      	adds	r1, r4, r0
 800c490:	428b      	cmp	r3, r1
 800c492:	bf01      	itttt	eq
 800c494:	6819      	ldreq	r1, [r3, #0]
 800c496:	685b      	ldreq	r3, [r3, #4]
 800c498:	1809      	addeq	r1, r1, r0
 800c49a:	6021      	streq	r1, [r4, #0]
 800c49c:	e7ed      	b.n	800c47a <_free_r+0x1e>
 800c49e:	461a      	mov	r2, r3
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	b10b      	cbz	r3, 800c4a8 <_free_r+0x4c>
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	d9fa      	bls.n	800c49e <_free_r+0x42>
 800c4a8:	6811      	ldr	r1, [r2, #0]
 800c4aa:	1850      	adds	r0, r2, r1
 800c4ac:	42a0      	cmp	r0, r4
 800c4ae:	d10b      	bne.n	800c4c8 <_free_r+0x6c>
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	4401      	add	r1, r0
 800c4b4:	1850      	adds	r0, r2, r1
 800c4b6:	4283      	cmp	r3, r0
 800c4b8:	6011      	str	r1, [r2, #0]
 800c4ba:	d1e0      	bne.n	800c47e <_free_r+0x22>
 800c4bc:	6818      	ldr	r0, [r3, #0]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	6053      	str	r3, [r2, #4]
 800c4c2:	4408      	add	r0, r1
 800c4c4:	6010      	str	r0, [r2, #0]
 800c4c6:	e7da      	b.n	800c47e <_free_r+0x22>
 800c4c8:	d902      	bls.n	800c4d0 <_free_r+0x74>
 800c4ca:	230c      	movs	r3, #12
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	e7d6      	b.n	800c47e <_free_r+0x22>
 800c4d0:	6820      	ldr	r0, [r4, #0]
 800c4d2:	1821      	adds	r1, r4, r0
 800c4d4:	428b      	cmp	r3, r1
 800c4d6:	bf04      	itt	eq
 800c4d8:	6819      	ldreq	r1, [r3, #0]
 800c4da:	685b      	ldreq	r3, [r3, #4]
 800c4dc:	6063      	str	r3, [r4, #4]
 800c4de:	bf04      	itt	eq
 800c4e0:	1809      	addeq	r1, r1, r0
 800c4e2:	6021      	streq	r1, [r4, #0]
 800c4e4:	6054      	str	r4, [r2, #4]
 800c4e6:	e7ca      	b.n	800c47e <_free_r+0x22>
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20014e84 	.word	0x20014e84

0800c4f0 <sbrk_aligned>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	4e0f      	ldr	r6, [pc, #60]	@ (800c530 <sbrk_aligned+0x40>)
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	6831      	ldr	r1, [r6, #0]
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	b911      	cbnz	r1, 800c502 <sbrk_aligned+0x12>
 800c4fc:	f000 f9d6 	bl	800c8ac <_sbrk_r>
 800c500:	6030      	str	r0, [r6, #0]
 800c502:	4621      	mov	r1, r4
 800c504:	4628      	mov	r0, r5
 800c506:	f000 f9d1 	bl	800c8ac <_sbrk_r>
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	d103      	bne.n	800c516 <sbrk_aligned+0x26>
 800c50e:	f04f 34ff 	mov.w	r4, #4294967295
 800c512:	4620      	mov	r0, r4
 800c514:	bd70      	pop	{r4, r5, r6, pc}
 800c516:	1cc4      	adds	r4, r0, #3
 800c518:	f024 0403 	bic.w	r4, r4, #3
 800c51c:	42a0      	cmp	r0, r4
 800c51e:	d0f8      	beq.n	800c512 <sbrk_aligned+0x22>
 800c520:	1a21      	subs	r1, r4, r0
 800c522:	4628      	mov	r0, r5
 800c524:	f000 f9c2 	bl	800c8ac <_sbrk_r>
 800c528:	3001      	adds	r0, #1
 800c52a:	d1f2      	bne.n	800c512 <sbrk_aligned+0x22>
 800c52c:	e7ef      	b.n	800c50e <sbrk_aligned+0x1e>
 800c52e:	bf00      	nop
 800c530:	20014e80 	.word	0x20014e80

0800c534 <_malloc_r>:
 800c534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c538:	1ccd      	adds	r5, r1, #3
 800c53a:	f025 0503 	bic.w	r5, r5, #3
 800c53e:	3508      	adds	r5, #8
 800c540:	2d0c      	cmp	r5, #12
 800c542:	bf38      	it	cc
 800c544:	250c      	movcc	r5, #12
 800c546:	2d00      	cmp	r5, #0
 800c548:	4606      	mov	r6, r0
 800c54a:	db01      	blt.n	800c550 <_malloc_r+0x1c>
 800c54c:	42a9      	cmp	r1, r5
 800c54e:	d904      	bls.n	800c55a <_malloc_r+0x26>
 800c550:	230c      	movs	r3, #12
 800c552:	6033      	str	r3, [r6, #0]
 800c554:	2000      	movs	r0, #0
 800c556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c630 <_malloc_r+0xfc>
 800c55e:	f000 f869 	bl	800c634 <__malloc_lock>
 800c562:	f8d8 3000 	ldr.w	r3, [r8]
 800c566:	461c      	mov	r4, r3
 800c568:	bb44      	cbnz	r4, 800c5bc <_malloc_r+0x88>
 800c56a:	4629      	mov	r1, r5
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff ffbf 	bl	800c4f0 <sbrk_aligned>
 800c572:	1c43      	adds	r3, r0, #1
 800c574:	4604      	mov	r4, r0
 800c576:	d158      	bne.n	800c62a <_malloc_r+0xf6>
 800c578:	f8d8 4000 	ldr.w	r4, [r8]
 800c57c:	4627      	mov	r7, r4
 800c57e:	2f00      	cmp	r7, #0
 800c580:	d143      	bne.n	800c60a <_malloc_r+0xd6>
 800c582:	2c00      	cmp	r4, #0
 800c584:	d04b      	beq.n	800c61e <_malloc_r+0xea>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	4639      	mov	r1, r7
 800c58a:	4630      	mov	r0, r6
 800c58c:	eb04 0903 	add.w	r9, r4, r3
 800c590:	f000 f98c 	bl	800c8ac <_sbrk_r>
 800c594:	4581      	cmp	r9, r0
 800c596:	d142      	bne.n	800c61e <_malloc_r+0xea>
 800c598:	6821      	ldr	r1, [r4, #0]
 800c59a:	1a6d      	subs	r5, r5, r1
 800c59c:	4629      	mov	r1, r5
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f7ff ffa6 	bl	800c4f0 <sbrk_aligned>
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	d03a      	beq.n	800c61e <_malloc_r+0xea>
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	442b      	add	r3, r5
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	bb62      	cbnz	r2, 800c610 <_malloc_r+0xdc>
 800c5b6:	f8c8 7000 	str.w	r7, [r8]
 800c5ba:	e00f      	b.n	800c5dc <_malloc_r+0xa8>
 800c5bc:	6822      	ldr	r2, [r4, #0]
 800c5be:	1b52      	subs	r2, r2, r5
 800c5c0:	d420      	bmi.n	800c604 <_malloc_r+0xd0>
 800c5c2:	2a0b      	cmp	r2, #11
 800c5c4:	d917      	bls.n	800c5f6 <_malloc_r+0xc2>
 800c5c6:	1961      	adds	r1, r4, r5
 800c5c8:	42a3      	cmp	r3, r4
 800c5ca:	6025      	str	r5, [r4, #0]
 800c5cc:	bf18      	it	ne
 800c5ce:	6059      	strne	r1, [r3, #4]
 800c5d0:	6863      	ldr	r3, [r4, #4]
 800c5d2:	bf08      	it	eq
 800c5d4:	f8c8 1000 	streq.w	r1, [r8]
 800c5d8:	5162      	str	r2, [r4, r5]
 800c5da:	604b      	str	r3, [r1, #4]
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f000 f82f 	bl	800c640 <__malloc_unlock>
 800c5e2:	f104 000b 	add.w	r0, r4, #11
 800c5e6:	1d23      	adds	r3, r4, #4
 800c5e8:	f020 0007 	bic.w	r0, r0, #7
 800c5ec:	1ac2      	subs	r2, r0, r3
 800c5ee:	bf1c      	itt	ne
 800c5f0:	1a1b      	subne	r3, r3, r0
 800c5f2:	50a3      	strne	r3, [r4, r2]
 800c5f4:	e7af      	b.n	800c556 <_malloc_r+0x22>
 800c5f6:	6862      	ldr	r2, [r4, #4]
 800c5f8:	42a3      	cmp	r3, r4
 800c5fa:	bf0c      	ite	eq
 800c5fc:	f8c8 2000 	streq.w	r2, [r8]
 800c600:	605a      	strne	r2, [r3, #4]
 800c602:	e7eb      	b.n	800c5dc <_malloc_r+0xa8>
 800c604:	4623      	mov	r3, r4
 800c606:	6864      	ldr	r4, [r4, #4]
 800c608:	e7ae      	b.n	800c568 <_malloc_r+0x34>
 800c60a:	463c      	mov	r4, r7
 800c60c:	687f      	ldr	r7, [r7, #4]
 800c60e:	e7b6      	b.n	800c57e <_malloc_r+0x4a>
 800c610:	461a      	mov	r2, r3
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	42a3      	cmp	r3, r4
 800c616:	d1fb      	bne.n	800c610 <_malloc_r+0xdc>
 800c618:	2300      	movs	r3, #0
 800c61a:	6053      	str	r3, [r2, #4]
 800c61c:	e7de      	b.n	800c5dc <_malloc_r+0xa8>
 800c61e:	230c      	movs	r3, #12
 800c620:	6033      	str	r3, [r6, #0]
 800c622:	4630      	mov	r0, r6
 800c624:	f000 f80c 	bl	800c640 <__malloc_unlock>
 800c628:	e794      	b.n	800c554 <_malloc_r+0x20>
 800c62a:	6005      	str	r5, [r0, #0]
 800c62c:	e7d6      	b.n	800c5dc <_malloc_r+0xa8>
 800c62e:	bf00      	nop
 800c630:	20014e84 	.word	0x20014e84

0800c634 <__malloc_lock>:
 800c634:	4801      	ldr	r0, [pc, #4]	@ (800c63c <__malloc_lock+0x8>)
 800c636:	f7ff bf00 	b.w	800c43a <__retarget_lock_acquire_recursive>
 800c63a:	bf00      	nop
 800c63c:	20014e7c 	.word	0x20014e7c

0800c640 <__malloc_unlock>:
 800c640:	4801      	ldr	r0, [pc, #4]	@ (800c648 <__malloc_unlock+0x8>)
 800c642:	f7ff befb 	b.w	800c43c <__retarget_lock_release_recursive>
 800c646:	bf00      	nop
 800c648:	20014e7c 	.word	0x20014e7c

0800c64c <__sflush_r>:
 800c64c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c654:	0716      	lsls	r6, r2, #28
 800c656:	4605      	mov	r5, r0
 800c658:	460c      	mov	r4, r1
 800c65a:	d454      	bmi.n	800c706 <__sflush_r+0xba>
 800c65c:	684b      	ldr	r3, [r1, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	dc02      	bgt.n	800c668 <__sflush_r+0x1c>
 800c662:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c664:	2b00      	cmp	r3, #0
 800c666:	dd48      	ble.n	800c6fa <__sflush_r+0xae>
 800c668:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	d045      	beq.n	800c6fa <__sflush_r+0xae>
 800c66e:	2300      	movs	r3, #0
 800c670:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c674:	682f      	ldr	r7, [r5, #0]
 800c676:	6a21      	ldr	r1, [r4, #32]
 800c678:	602b      	str	r3, [r5, #0]
 800c67a:	d030      	beq.n	800c6de <__sflush_r+0x92>
 800c67c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	0759      	lsls	r1, r3, #29
 800c682:	d505      	bpl.n	800c690 <__sflush_r+0x44>
 800c684:	6863      	ldr	r3, [r4, #4]
 800c686:	1ad2      	subs	r2, r2, r3
 800c688:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c68a:	b10b      	cbz	r3, 800c690 <__sflush_r+0x44>
 800c68c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c68e:	1ad2      	subs	r2, r2, r3
 800c690:	2300      	movs	r3, #0
 800c692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c694:	6a21      	ldr	r1, [r4, #32]
 800c696:	4628      	mov	r0, r5
 800c698:	47b0      	blx	r6
 800c69a:	1c43      	adds	r3, r0, #1
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	d106      	bne.n	800c6ae <__sflush_r+0x62>
 800c6a0:	6829      	ldr	r1, [r5, #0]
 800c6a2:	291d      	cmp	r1, #29
 800c6a4:	d82b      	bhi.n	800c6fe <__sflush_r+0xb2>
 800c6a6:	4a2a      	ldr	r2, [pc, #168]	@ (800c750 <__sflush_r+0x104>)
 800c6a8:	410a      	asrs	r2, r1
 800c6aa:	07d6      	lsls	r6, r2, #31
 800c6ac:	d427      	bmi.n	800c6fe <__sflush_r+0xb2>
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	6062      	str	r2, [r4, #4]
 800c6b2:	04d9      	lsls	r1, r3, #19
 800c6b4:	6922      	ldr	r2, [r4, #16]
 800c6b6:	6022      	str	r2, [r4, #0]
 800c6b8:	d504      	bpl.n	800c6c4 <__sflush_r+0x78>
 800c6ba:	1c42      	adds	r2, r0, #1
 800c6bc:	d101      	bne.n	800c6c2 <__sflush_r+0x76>
 800c6be:	682b      	ldr	r3, [r5, #0]
 800c6c0:	b903      	cbnz	r3, 800c6c4 <__sflush_r+0x78>
 800c6c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c6c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6c6:	602f      	str	r7, [r5, #0]
 800c6c8:	b1b9      	cbz	r1, 800c6fa <__sflush_r+0xae>
 800c6ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6ce:	4299      	cmp	r1, r3
 800c6d0:	d002      	beq.n	800c6d8 <__sflush_r+0x8c>
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f7ff fec2 	bl	800c45c <_free_r>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6dc:	e00d      	b.n	800c6fa <__sflush_r+0xae>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	47b0      	blx	r6
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	1c50      	adds	r0, r2, #1
 800c6e8:	d1c9      	bne.n	800c67e <__sflush_r+0x32>
 800c6ea:	682b      	ldr	r3, [r5, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0c6      	beq.n	800c67e <__sflush_r+0x32>
 800c6f0:	2b1d      	cmp	r3, #29
 800c6f2:	d001      	beq.n	800c6f8 <__sflush_r+0xac>
 800c6f4:	2b16      	cmp	r3, #22
 800c6f6:	d11e      	bne.n	800c736 <__sflush_r+0xea>
 800c6f8:	602f      	str	r7, [r5, #0]
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	e022      	b.n	800c744 <__sflush_r+0xf8>
 800c6fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c702:	b21b      	sxth	r3, r3
 800c704:	e01b      	b.n	800c73e <__sflush_r+0xf2>
 800c706:	690f      	ldr	r7, [r1, #16]
 800c708:	2f00      	cmp	r7, #0
 800c70a:	d0f6      	beq.n	800c6fa <__sflush_r+0xae>
 800c70c:	0793      	lsls	r3, r2, #30
 800c70e:	680e      	ldr	r6, [r1, #0]
 800c710:	bf08      	it	eq
 800c712:	694b      	ldreq	r3, [r1, #20]
 800c714:	600f      	str	r7, [r1, #0]
 800c716:	bf18      	it	ne
 800c718:	2300      	movne	r3, #0
 800c71a:	eba6 0807 	sub.w	r8, r6, r7
 800c71e:	608b      	str	r3, [r1, #8]
 800c720:	f1b8 0f00 	cmp.w	r8, #0
 800c724:	dde9      	ble.n	800c6fa <__sflush_r+0xae>
 800c726:	6a21      	ldr	r1, [r4, #32]
 800c728:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c72a:	4643      	mov	r3, r8
 800c72c:	463a      	mov	r2, r7
 800c72e:	4628      	mov	r0, r5
 800c730:	47b0      	blx	r6
 800c732:	2800      	cmp	r0, #0
 800c734:	dc08      	bgt.n	800c748 <__sflush_r+0xfc>
 800c736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c73e:	81a3      	strh	r3, [r4, #12]
 800c740:	f04f 30ff 	mov.w	r0, #4294967295
 800c744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c748:	4407      	add	r7, r0
 800c74a:	eba8 0800 	sub.w	r8, r8, r0
 800c74e:	e7e7      	b.n	800c720 <__sflush_r+0xd4>
 800c750:	dfbffffe 	.word	0xdfbffffe

0800c754 <_fflush_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	690b      	ldr	r3, [r1, #16]
 800c758:	4605      	mov	r5, r0
 800c75a:	460c      	mov	r4, r1
 800c75c:	b913      	cbnz	r3, 800c764 <_fflush_r+0x10>
 800c75e:	2500      	movs	r5, #0
 800c760:	4628      	mov	r0, r5
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	b118      	cbz	r0, 800c76e <_fflush_r+0x1a>
 800c766:	6a03      	ldr	r3, [r0, #32]
 800c768:	b90b      	cbnz	r3, 800c76e <_fflush_r+0x1a>
 800c76a:	f7ff fc71 	bl	800c050 <__sinit>
 800c76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d0f3      	beq.n	800c75e <_fflush_r+0xa>
 800c776:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c778:	07d0      	lsls	r0, r2, #31
 800c77a:	d404      	bmi.n	800c786 <_fflush_r+0x32>
 800c77c:	0599      	lsls	r1, r3, #22
 800c77e:	d402      	bmi.n	800c786 <_fflush_r+0x32>
 800c780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c782:	f7ff fe5a 	bl	800c43a <__retarget_lock_acquire_recursive>
 800c786:	4628      	mov	r0, r5
 800c788:	4621      	mov	r1, r4
 800c78a:	f7ff ff5f 	bl	800c64c <__sflush_r>
 800c78e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c790:	07da      	lsls	r2, r3, #31
 800c792:	4605      	mov	r5, r0
 800c794:	d4e4      	bmi.n	800c760 <_fflush_r+0xc>
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	059b      	lsls	r3, r3, #22
 800c79a:	d4e1      	bmi.n	800c760 <_fflush_r+0xc>
 800c79c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c79e:	f7ff fe4d 	bl	800c43c <__retarget_lock_release_recursive>
 800c7a2:	e7dd      	b.n	800c760 <_fflush_r+0xc>

0800c7a4 <__swhatbuf_r>:
 800c7a4:	b570      	push	{r4, r5, r6, lr}
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ac:	2900      	cmp	r1, #0
 800c7ae:	b096      	sub	sp, #88	@ 0x58
 800c7b0:	4615      	mov	r5, r2
 800c7b2:	461e      	mov	r6, r3
 800c7b4:	da0d      	bge.n	800c7d2 <__swhatbuf_r+0x2e>
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7bc:	f04f 0100 	mov.w	r1, #0
 800c7c0:	bf14      	ite	ne
 800c7c2:	2340      	movne	r3, #64	@ 0x40
 800c7c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	6031      	str	r1, [r6, #0]
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	b016      	add	sp, #88	@ 0x58
 800c7d0:	bd70      	pop	{r4, r5, r6, pc}
 800c7d2:	466a      	mov	r2, sp
 800c7d4:	f000 f848 	bl	800c868 <_fstat_r>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	dbec      	blt.n	800c7b6 <__swhatbuf_r+0x12>
 800c7dc:	9901      	ldr	r1, [sp, #4]
 800c7de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c7e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c7e6:	4259      	negs	r1, r3
 800c7e8:	4159      	adcs	r1, r3
 800c7ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7ee:	e7eb      	b.n	800c7c8 <__swhatbuf_r+0x24>

0800c7f0 <__smakebuf_r>:
 800c7f0:	898b      	ldrh	r3, [r1, #12]
 800c7f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7f4:	079d      	lsls	r5, r3, #30
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	d507      	bpl.n	800c80c <__smakebuf_r+0x1c>
 800c7fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	6123      	str	r3, [r4, #16]
 800c804:	2301      	movs	r3, #1
 800c806:	6163      	str	r3, [r4, #20]
 800c808:	b003      	add	sp, #12
 800c80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c80c:	ab01      	add	r3, sp, #4
 800c80e:	466a      	mov	r2, sp
 800c810:	f7ff ffc8 	bl	800c7a4 <__swhatbuf_r>
 800c814:	9f00      	ldr	r7, [sp, #0]
 800c816:	4605      	mov	r5, r0
 800c818:	4639      	mov	r1, r7
 800c81a:	4630      	mov	r0, r6
 800c81c:	f7ff fe8a 	bl	800c534 <_malloc_r>
 800c820:	b948      	cbnz	r0, 800c836 <__smakebuf_r+0x46>
 800c822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c826:	059a      	lsls	r2, r3, #22
 800c828:	d4ee      	bmi.n	800c808 <__smakebuf_r+0x18>
 800c82a:	f023 0303 	bic.w	r3, r3, #3
 800c82e:	f043 0302 	orr.w	r3, r3, #2
 800c832:	81a3      	strh	r3, [r4, #12]
 800c834:	e7e2      	b.n	800c7fc <__smakebuf_r+0xc>
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	6020      	str	r0, [r4, #0]
 800c83a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c83e:	81a3      	strh	r3, [r4, #12]
 800c840:	9b01      	ldr	r3, [sp, #4]
 800c842:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c846:	b15b      	cbz	r3, 800c860 <__smakebuf_r+0x70>
 800c848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c84c:	4630      	mov	r0, r6
 800c84e:	f000 f81d 	bl	800c88c <_isatty_r>
 800c852:	b128      	cbz	r0, 800c860 <__smakebuf_r+0x70>
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	f023 0303 	bic.w	r3, r3, #3
 800c85a:	f043 0301 	orr.w	r3, r3, #1
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	431d      	orrs	r5, r3
 800c864:	81a5      	strh	r5, [r4, #12]
 800c866:	e7cf      	b.n	800c808 <__smakebuf_r+0x18>

0800c868 <_fstat_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4d07      	ldr	r5, [pc, #28]	@ (800c888 <_fstat_r+0x20>)
 800c86c:	2300      	movs	r3, #0
 800c86e:	4604      	mov	r4, r0
 800c870:	4608      	mov	r0, r1
 800c872:	4611      	mov	r1, r2
 800c874:	602b      	str	r3, [r5, #0]
 800c876:	f7f4 fdd2 	bl	800141e <_fstat>
 800c87a:	1c43      	adds	r3, r0, #1
 800c87c:	d102      	bne.n	800c884 <_fstat_r+0x1c>
 800c87e:	682b      	ldr	r3, [r5, #0]
 800c880:	b103      	cbz	r3, 800c884 <_fstat_r+0x1c>
 800c882:	6023      	str	r3, [r4, #0]
 800c884:	bd38      	pop	{r3, r4, r5, pc}
 800c886:	bf00      	nop
 800c888:	20014e78 	.word	0x20014e78

0800c88c <_isatty_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d06      	ldr	r5, [pc, #24]	@ (800c8a8 <_isatty_r+0x1c>)
 800c890:	2300      	movs	r3, #0
 800c892:	4604      	mov	r4, r0
 800c894:	4608      	mov	r0, r1
 800c896:	602b      	str	r3, [r5, #0]
 800c898:	f7f4 fdd1 	bl	800143e <_isatty>
 800c89c:	1c43      	adds	r3, r0, #1
 800c89e:	d102      	bne.n	800c8a6 <_isatty_r+0x1a>
 800c8a0:	682b      	ldr	r3, [r5, #0]
 800c8a2:	b103      	cbz	r3, 800c8a6 <_isatty_r+0x1a>
 800c8a4:	6023      	str	r3, [r4, #0]
 800c8a6:	bd38      	pop	{r3, r4, r5, pc}
 800c8a8:	20014e78 	.word	0x20014e78

0800c8ac <_sbrk_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4d06      	ldr	r5, [pc, #24]	@ (800c8c8 <_sbrk_r+0x1c>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	602b      	str	r3, [r5, #0]
 800c8b8:	f7f4 fdda 	bl	8001470 <_sbrk>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_sbrk_r+0x1a>
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_sbrk_r+0x1a>
 800c8c4:	6023      	str	r3, [r4, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	20014e78 	.word	0x20014e78

0800c8cc <_init>:
 800c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ce:	bf00      	nop
 800c8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d2:	bc08      	pop	{r3}
 800c8d4:	469e      	mov	lr, r3
 800c8d6:	4770      	bx	lr

0800c8d8 <_fini>:
 800c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8da:	bf00      	nop
 800c8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8de:	bc08      	pop	{r3}
 800c8e0:	469e      	mov	lr, r3
 800c8e2:	4770      	bx	lr
